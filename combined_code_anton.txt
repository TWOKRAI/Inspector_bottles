=== Файл: a_display.ino ===

void serviceRoutine(serviceStates mode);

#if (DISPLAY_TYPE == 0)
#define OLED 0
#elif (DISPLAY_TYPE == 1)
#define OLED 1
#elif (DISPLAY_TYPE == 2)
#define OLED 2
#elif (DISPLAY_TYPE == 3)
#define TM1637
#elif (DISPLAY_TYPE == 4)
#define ANALOG_METER
#endif

#ifdef TM1637
GyverTM1637 disp(DISP_CLK, DISP_DIO);
enum { ml = 1, deg };
void printNum(uint16_t num, int8_t mode = 0);

//==================================================================================================

#elif defined ANALOG_METER
byte err_vector[256] = {
  0,  1,  1,  2,  2,  3,  3,  4,  4,  4,  4,  4,  5,  5,  5,  5,
  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  9,
  9,  9,  10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 14,
  14, 15, 15, 15, 15, 16, 16, 16, 17, 17, 18, 18, 18, 19, 19, 19,
  20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 27,
  27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32,
  33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 38, 38, 38,
  39, 39, 40, 40, 40, 40, 40, 41, 41, 41, 41, 42, 42, 43, 43, 44,
  44, 44, 44, 44, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 47, 47,
  47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49,
  49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
  49, 49, 49, 48, 48, 48, 48, 48, 48, 48, 48, 47, 47, 47, 47, 46,
  46, 46, 45, 45, 44, 44, 44, 43, 43, 43, 43, 42, 42, 42, 41, 41,
  40, 40, 39, 39, 38, 38, 37, 37, 36, 36, 35, 34, 33, 33, 32, 31,
  31, 30, 29, 28, 28, 27, 26, 25, 24, 23, 22, 22, 21, 20, 19, 19,
  18, 17, 16, 15, 14, 13, 12, 11, 10, 9,  7,  5,  4,  3,  1,  0,
};

void printNum(uint16_t num, int8_t mode = 0) {
  static byte lastVal = 255;
  byte value = round(num * 255.0 / parameterList[max_volume]);
  //Serial.println(num);

  if ( (value == 0) && (lastVal > 0) ) {
    for (byte i = lastVal; i > 0; i--) {
      analogWrite(ANALOG_METER_PIN, i - err_vector[i]);
      delay(2);
    }
    lastVal = value;
  }

  if ( (lastVal == 0) && (value > 0)) {
    for (byte i = 0; i < value; i++) {
      analogWrite(ANALOG_METER_PIN, i - err_vector[i]);
      delay(3);
    }
    lastVal = value;
  }
  if ( (lastVal == 255) && (num == thisVolume) ) {
    for (byte i = lastVal; i > value; i--) {
      analogWrite(ANALOG_METER_PIN, i - err_vector[i]);
      delay(3);
    }
    lastVal = value;
  }

  if (value > lastVal)
    for (byte i = lastVal; i < value; i++) analogWrite(ANALOG_METER_PIN, i - err_vector[i]);
  else if (value < lastVal)
    for (byte i = lastVal; i > value; i--) analogWrite(ANALOG_METER_PIN, i - err_vector[i]);

  lastVal = value;
  mode = mode;
}

/* для совместимости */
struct disp {
  void clear() {}
} disp;
enum { ml = 1, deg };


//==================================================================================================

#elif defined OLED

#if (OLED == 2)
SSD1306AsciiSoftSpi disp;
#else
SSD1306AsciiWire disp;
#endif

#if (NUM_FONT == 0)
#define BIG_NUM_FONT FixedNum30x40
#elif (NUM_FONT == 1)
#define BIG_NUM_FONT FixedNum30x40_2
#endif

#if (MENU_LANG == 0)
#define MAIN_FONT Vicler8x16
#else
#define MAIN_FONT ZevvPeep8x16
#endif

#define DISP_WIDTH 128  // ширина дисплея в пикселях

enum MenuPageName { // типы страниц меню
  NO_MENU = -1,
  MAIN_MENU_PAGE,         // основная страница
  SETTINGS_PAGE,          // страница настроек
  STATISTICS_PAGE,        // страница статистики
  SERVICE_PAGE,           // страница сервисного меню
  SERVO_CALIBRATION_PAGE  // страница настройки сервопривода
};

MenuPageName menuPage = MAIN_MENU_PAGE; // актуальная страница
byte lastMenuPage = NO_MENU;            // последняя отображаемая страница. Нужна для предотвращения повторного вывода заголовка одной и той же страницы во время прокрутки.
bool itemSelected = 0;                  // флаг нажатия на пункт меню

uint8_t menuItemsNum[] = {3, 8, 3, 5, 4}; // количество строк на каждой странице без заголовка

#if(MENU_LANG == 0)
const char *MenuPages[][9] = {
  { "#####  Меню  #####",
    "", // зарезервированно для названия режима
    " Настройки",
    " Статистика",
  },

  { "###  Настройки  ###",
    "таймаут выкл.",
    "режим ожидания",
    "яркость лед",
    "цвет лед",
    "динам. подсветка",
    "инверсия дисп.",
    "яркость дисп.",
    "макс. объeм"
  },

  { "### Статистика  ###",
    " Рюмок",
    " Объ@м /сеанс",
    " Объ@м всего"
  },
  //////////////////////////////////////////////////////////////////// сервисное меню
  { "##### Сервис #####",
    " Двигатель",
    " Помпа",
#ifdef BATTERY_PIN
    " Аккумулятор",
#else
    " Поддерж. питания",
#endif
    " Сброс",
    " Выход"
  },

  {
    "###  Двигатель  ###",
    " Калибровка",
    " Инверсия",
    " Скорость",
    " Авто парковка"
  }
};

#else
const char *MenuPages[][9] = {
  { "      Menu      ",
    "",
    " Settings",
    " Stats"
  },

  { "Settings",
    "timeout off",
    "stby time",
    "led bright.",
    "led color",
    "color flow",
    "disp invert",
    "disp contrast",
    "max volume",
  },

  { "Stats",
    " Shots",
    " Session",
    " Total"
  },

  { "Service",
    " Motor",
    " Pump",
#ifdef BATTERY_PIN
    " Battery",
#else
    " Keep power",
#endif
    " Reset",
    " Exit"
  },

  {
    " Servo ",
    " Calibration",
    " Invert",
    " Speed",
    " Auto parking"
  }
};
#endif

byte strWidth(const char str[]) { // расчёт ширины текста в пикселях
  byte _width = 0;
  while (*str) {
#if(MENU_LANG == 0)
    _width += disp.charWidth(*str++);
#else
    _width += disp.charSpacing(*str++);
#endif
  }
  return _width;
}

enum text_position { // выравнивание текста на дисплее
  Append = -4,  // к актуальной позиции
  Left,         // к левому краю
  Center,       // по центру
  Right         // к правому краю
};

void clearToEOL(const char ch = ' ') { // заполнение строки от актуальной позиции до правого края дисплея любым символом. По умолчанию используется пробел для очистки
  byte i = 1 + (DISP_WIDTH - disp.col()) / disp.charWidth(ch);
  while (i--) disp.write(ch);
}

void printStr(const char str[], int8_t x = Append, int8_t y = Append) { // вывод текста с возможностью выравнивания
  switch (x) {
    case Left: disp.setCol(0); break;
    case Center: disp.setCol( (DISP_WIDTH - strWidth(str)) / 2); break;
    case Right: disp.setCol(DISP_WIDTH - strWidth(str)); break;
    default: disp.setCol(x); break;
  }
  //  if (x == Left)    disp.setCol(0);
  //  else if (x == Center)  disp.setCol( (DISP_WIDTH - strWidth(str)) / 2);
  //  else if (x == Right)   disp.setCol(DISP_WIDTH - strWidth(str));
  //  else if (x != Append)  disp.setCol(x);

  if (y != Append)  disp.setRow(y);

  while (*str) disp.write(*str++);
}

void printInt(uint16_t num, int8_t x = Append, int8_t y = Append) { // вывод целых чисел с возможностью выравнивания
  char cstr[5];
  itoa(num, cstr, 10);
  printStr(cstr, x, y);
}

void ftoa(float floatVal, char* floatStr, byte dec) { // преобразование реального числа в массив символов
  byte index = 0;

  float rounding = 0.5;
  for (uint8_t i = 0; i < dec; ++i) rounding /= 10.0;
  floatVal += rounding;

  uint16_t int_part = (uint16_t)floatVal;
  float remainder = floatVal - (float)int_part;
  if (int_part < 10) floatStr[index++] = int_part + '0';
  else {
    floatStr[index++] = int_part / 10 + '0';
    floatStr[index++] = int_part % 10 + '0';
  }

  if (dec > 0) floatStr[index++] = '.';

  while (dec-- > 0)
  {
    remainder *= 10.0;
    uint16_t toPrint = (uint16_t)remainder;
    floatStr[index++] = toPrint + '0';
    remainder -= toPrint;
  }
  floatStr[index++] = '\0';
}

void printFloat(float num, uint8_t decimals, int8_t x = Append, int8_t y = Append) { // вывод рельных чисел с возможностью выравнивания
  char cstr[6];
  ftoa(num, cstr, decimals);
  printStr(cstr, x, y);
}

enum { ml = 1, deg }; // постфикс для вывода чисел большими цифрами. мл для объёма и ° для градусов

void printNum(uint16_t volume, int8_t postfix = 0) { //вывод чисел крупным шрифтом по центру с возможностью вывода дополнительного постфикса (мл или °)
  static uint16_t lastVol = 0; // переменная для сохранения последнего выводимого числа
  disp.setFont(BIG_NUM_FONT);
  static byte shiftY = 0;

  if (postfix == 1) shiftY = 1; // число объёма выводится на одну строку выше, чем градусы серво и напяжение аккумулятора

  // очистка первой цифры если число уменьшилось с 1000 до 999, 100 до 99 или с 10 до 9
  if (volume <= 999 && lastVol >= 1000) printStr("    ", Center, 3 - shiftY);
  else if (volume <= 99 && lastVol >= 100) {
    printStr("   ", Left, 3 - shiftY);
    printStr("  ", Right, 3 - shiftY);
  }
  else if ( (volume <= 9 && lastVol >= 10) || !timeoutState )
    printStr("   ", Left, 3 - shiftY);

  switch (postfix) {
    case 1:
      //    if (volume > 99) { // быстрый вывод трёхзначных чисел
      //      static uint16_t tVolume;
      //      (volume > 200) ? tVolume = volume - 200 : tVolume = volume - 100;
      //      if ( (lastVol < 100) || (lastVol < 200 && volume >= 200) || (lastVol >= 200 && volume < 200) || volume == 109 || volume == 209 || volume == 200) printInt(volume, Left, 3 - shiftY); // вывод трёхзначного чисел 100, 109, 200 и 209
      //      else if (tVolume > 9) printInt(tVolume, (DISP_WIDTH - strWidth("000")) / 2 + 12, 3 - shiftY);
      //      else printInt(tVolume, (DISP_WIDTH - strWidth("00")) / 2 + 28, 3 - shiftY);
      //    }

      if (volume > 99) printInt(volume, Left, 3 - shiftY);
      else if (volume > 9) printInt(volume, (DISP_WIDTH - 90) / 2, 3 - shiftY);
      else printInt(volume, (DISP_WIDTH - 60) / 2 + 16, 3 - shiftY);


#if(NUM_FONT == 0)
      disp.setFont(BigPostfix30x16);
#else
      disp.setFont(BigPostfix30x16_2);
#endif
      printStr("%", Append, 5); // "ml"

      if (!showMenu) displayVolumeSession();
      break;
    case 2:
      if (volume > 99) printInt(volume, (DISP_WIDTH - 90) / 2 - 16, 3 - shiftY);
      else if (volume > 9) printInt(volume, (DISP_WIDTH - 60) / 2, 3 - shiftY);
      else printInt(volume, (DISP_WIDTH - 30) / 2 + 16, 3 - shiftY);
#if(NUM_FONT == 0)
      disp.setFont(BigPostfix30x16);
#else
      disp.setFont(BigPostfix30x16_2);
#endif
      printStr("&", Append, 3); // "°"
      break;

    default: printInt(volume, Center, 3 - shiftY); break; // отображение числа без постфикса
  }
  lastVol = volume;

  disp.setFont(MAIN_FONT);
#if(MENU_LANG == 0)
  disp.setLetterSpacing(0);
#endif
}

void progressBar(int16_t value, uint8_t maximum = MAX_VOLUME) { // прогресс-бар для визуального отображения объёма
  disp.setFont(ProgBar);                  // активируем шрифт. Состоит из одного деления прогресс-бара
  disp.setLetterSpacing(0);               // отключаем пробелы между символами шрифта, т.к. они уже встроенны в шрифт
  static int16_t currX = 0, targetX = 0;  // актуальная и целевая позиция координаты Х на дисплее
  static bool reseted = 1;

  if (value == -1) { // если параметр -1, сбрасываем бар и рисуем пунктирную линию на всю ширину дисплея
    disp.setCursor(0, 7); // седьмая строка (самая нижняя)
    for (int i = 0; i < DISP_WIDTH; i++) {
      if (i % 2 == 0) disp.write('.'); // в каждом чётном пикселе точка
      else disp.write(' ');            // в нечётном пусто
    }
    currX = 0; // сброс актуальной координаты Х: 0
    reseted = 1;
    return;    // выходим из функции
  }

  targetX = value * (128.0 / maximum); // масштабирование параметра на ширину дисплея. Значение -> номер пикселя от 0 до ширины дисплея (127)

  if (targetX > currX) { // если целевая позиция больше актуальной, заполняем по одному символу до целевого пикселя
    do
    {
      disp.setCursor(currX, 7);
      disp.write('-');
      if (value == thisVolume && systemState != PUMPING ) delay(5 * !reseted);
    }
    while (targetX > ++currX);
    reseted = 0;
  }
  else if (targetX < currX) { // целевая позиция меньше актуальной. Заполняем пунктирной линией до целевого пикселя
    do {
      disp.setCursor(min(currX, DISP_WIDTH - 1), 7);
      if (currX % 2 == 0) {
        disp.write('.');
        if (value == thisVolume) delay(5);
        else if (value == 0) delay(2);
      }
      else disp.write(' ');
    } while (targetX <= --currX);
    currX = targetX;
  }
}

void displayVolumeSession() {
#if DISPLAY_SESSION_VOLUME
  disp.setFont(MAIN_FONT);
#if(MENU_LANG == 0)
  const byte offsetX = DISP_WIDTH - 33 - 1;
#else
  const byte offsetX = DISP_WIDTH - strWidth("0.00l") + 5;
#endif
  disp.setLetterSpacing(0);
  if (volume_session > 0) {
    printFloat(volume_session / 1000.0, 2, offsetX, 2);
#if(MENU_LANG == 0)
    printStr("л");
#else
    printStr("l");
#endif
  }
#endif
}

void displayMode(workModes mode);
void displayMode(workModes mode) { // вывод иконки режима и иконки аккумулятора
  if (!timeoutState) return;

  disp.setFont(Mode12x26);
  disp.setLetterSpacing(0);

#ifdef BATTERY_PIN
  if (mode == AutoMode) {
    byte x = 79;
    do {
      x -= 2;
      printInt(mode, x, 0); // выводим иконку режима
    } while (x > 1);
  }
  else printInt(mode, 1, 0); // выводим иконку режима

#else
  if (mode == AutoMode) {
    byte x = 129;
    do {
      x -= 2;
      printInt(mode, x, 0); // выводим иконку режима
    } while (x > 1);
  }
  else printInt(mode, 1, 0); // выводим иконку режима
#endif

#ifdef BATTERY_PIN // выводим иконку батареи
  disp.setFont(Battery12x22);
  printInt(get_battery_percent(), Right, 0);
#endif
}

void displayVolume() { // вывод объёма крупным шрифтом с постфиксом "мл" и соответствующего ему значения статус-бара
  displayVolumeSession();
  printNum(thisVolume, ml);
  progressBar(thisVolume, parameterList[max_volume]);
}

void displayMenu() { // вывод страниц меню
  static uint8_t firstItem = 1, selectedRow = 0;

  disp.setFont(MAIN_FONT);
#if(MENU_LANG == 0)
  disp.setLetterSpacing(0);
#endif

  if (itemSelected) { // нажали на пункт в меню
    switch (menuPage) {
      case MAIN_MENU_PAGE:  // выбор елемента на главной странице Меню
        if (menuItem == 1) { // нажали на режим
          workMode = (workModes)!workMode;
          timeoutReset();
          itemSelected = 0;
          showMenu = false;
          disp.clear();
          lastMenuPage = NO_MENU;
          progressBar(-1);
          displayVolume();
          displayMode(workMode);

#if (SAVE_MODE == 1)
          EEPROM.update(eeAddress._workMode, workMode);
#endif
          return; // выходим из меню
        }
        else {
          menuPage = (MenuPageName)(menuItem - 1);
          menuItem = 1;
        }
        break;
      case SETTINGS_PAGE: // выбор елемента на странице настройки
        editParameter(menuItem - 1, selectedRow);
        if (!timeoutState) { // произошёл вход в режим ожидания
          itemSelected = 0;
          return;
        }
        break;
      case SERVICE_PAGE:  // выбор елемента на странице сервисного меню
        if (menuItem == menuItemsNum[menuPage] - 1) { // предпоследний пункт -> сброс настроек
          resetEEPROM();
          readEEPROM();
        }
        else if (menuItem == 1) menuPage = SERVO_CALIBRATION_PAGE; // выбор первого пункта -> переходим на страницу серво
#ifndef BATTERY_PIN
        else if (menuItem == 3) editParameter(keep_power, selectedRow); // выбор
#endif
        else if (menuItem == menuItemsNum[menuPage]) { // последний пункт ->  выход из сервис режима
          disp.clear();
          showMenu = 0;
          menuItem = 1;
          itemSelected = 0;
          lastMenuPage = NO_MENU;
          menuPage = MAIN_MENU_PAGE;
          progressBar(-1);
          displayMode(workMode);
          displayVolume();
          timeoutState = true;
          return;
        }
        else { // иначе запускаем обработку выбранного этапа калибровки
          serviceRoutine((serviceStates)(menuItem - 1));
          lastMenuPage = NO_MENU;
        }
        break;
      case STATISTICS_PAGE: // выбор елемента на странице статистики
        if (menuItem == 1) shots_session = 0; // сбрасываем количетво рюмок
        else if (menuItem == 2) volume_session = 0; // сбрасываем объём
        else if (menuItem == 3) {
          volume_overall = 0;
          EEPROM.put(eeAddress._volume_overall, 0);
        }
        break;
      case SERVO_CALIBRATION_PAGE:  // выбор елемента на странице настройки сервопривода
        if (menuItem == 1) { // выбрали первый пункт -> начало этапа калибровки серво
          serviceRoutine(POSITION);
          lastMenuPage = NO_MENU;
        }
        else editParameter(menuItem - 2 + 8, selectedRow); // запускаем обработчик изменения параметра. -2 отступ (заголовок и первый пункт страницы). +8 начало параметров для сервисного меню в массиве parameterList
        break;
      default: break;
    }
    itemSelected = 0; // флаг на успешную обработку нажатия на пункт меню.
  }

  if ( (menuItem < 1) || (menuItem > menuItemsNum[menuPage]) ) { // предотвращение повторного вывода станицы меню если крутим енкодер за пределы пунктов меню.
    menuItem = constrain(menuItem, 1, menuItemsNum[menuPage]);
    return;
  }
  menuItem = constrain(menuItem, 1, menuItemsNum[menuPage]);

  if (menuPage != lastMenuPage) {
    disp.setInvertMode(0);
    printStr(MenuPages[menuPage][0], Center, 0);
    disp.write('\n');
    lastMenuPage = menuPage;
    firstItem = 1;
  }
  else disp.setCursor(0, 2);


  if (menuItem > firstItem + 2) firstItem = menuItem - 2; // прокрутка елементов меню
  else if (menuItem < firstItem)  firstItem = menuItem;

  for (byte currItem = firstItem; currItem < (firstItem + 3); currItem++) {// отображаем три строки из страницы меню, начиная с firstitem
    if (currItem == menuItem) { // инвертируем текущую строку
#if(MENU_SELECT == 0)
      disp.setInvertMode(1);
#else
      disp.setInvertMode(0);
      disp.write('>');
#endif
      selectedRow = disp.row();
    }
    else  disp.setInvertMode(0);

    static byte parameter;

    switch (menuPage) {

      case MAIN_MENU_PAGE:
        if (currItem == 1) {
#if(MENU_LANG == 0)
          if (workMode == ManualMode) MenuPages[menuPage][currItem] = " Авто режим";
          else  MenuPages[menuPage][currItem] = " Ручной режим";
#else
          if (workMode == ManualMode) MenuPages[menuPage][currItem] = " Auto mode";
          else  MenuPages[menuPage][currItem] = " Manual mode";
#endif
        }
        printStr(MenuPages[menuPage][currItem]);
        clearToEOL(' ');
        disp.write('\n');
        break;

      case SETTINGS_PAGE:
        printStr(MenuPages[menuPage][currItem]);
        clearToEOL();
        parameter = currItem - 1;
#if(MENU_LANG == 0)
        if ( (parameter == rainbow_flow) || (parameter == invert_display) ) {
          if (parameterList[parameter] == 0) printStr("(", Right);
          else printStr(")", Right);
        }
        else printInt(parameterList[parameter], Right);
#else
        printInt(parameterList[parameter], Right);
#endif
        disp.write('\n');
        break;
      case STATISTICS_PAGE:
        printStr(MenuPages[menuPage][currItem]);
        clearToEOL();
        if (currItem == 1)  printInt(shots_session, Right);
        else  {
          float currValue = (currItem == 2) ? volume_session : volume_overall;
#if(MENU_LANG == 0)
          if (currValue < 10000.0) { // меньше 10л
            printFloat(currValue / 1000.0, 2, DISP_WIDTH - 34 - 1);
            printStr("л");
          }
          else {
            printFloat(currValue / 1000.0, 2, DISP_WIDTH - 42 - 1);
            printStr("л");
          }
#else
          if (currValue < 10000.0) {
            printFloat(currValue / 1000.0, 2, DISP_WIDTH - strWidth("0.00l"));
            printStr("l");
          }
          else {
            printFloat(currValue / 1000.0, 2, DISP_WIDTH - strWidth("00.00l"));
            printStr("l");
          }
#endif
        }
        disp.write('\n');
        break;
      case SERVICE_PAGE:
        printStr(MenuPages[menuPage][currItem]);
        clearToEOL();
#ifndef BATTERY_PIN
        if (currItem == 3) // пункт Поддержание питания
          printInt(parameterList[keep_power], Right); // вывод значения таймера для поддержания питания
#endif
        disp.write('\n');
        break;
      case SERVO_CALIBRATION_PAGE:
        printStr(MenuPages[menuPage][currItem]);
        clearToEOL();
        parameter = currItem - 2 + 8;
#if(MENU_LANG == 0)
        if ( (parameter == motor_reverse) || (parameter == auto_parking) ) {
          if (parameterList[parameter] == 0) printStr("(", Right);
          else printStr(")", Right);
        }
        if ( (parameter == motor_speed) || (parameter == keep_power) )
          printInt(parameterList[parameter], Right);
#else
        if (currItem > 1) printInt(parameterList[parameter], Right);
#endif
        disp.write('\n');
        break;
      default: break;
    }
  }
  disp.setInvertMode(0);
}

#endif /* OLED */


=== Файл: b_setup.ino ===

void setup() {
  //Serial.begin(9600);
  // старт дисплея
#ifdef TM1637
  disp.clear();
  disp.brightness(7);
#elif defined OLED
#if (OLED == 0)
  Wire.begin();
  Wire.setClock(WIRE_SPEED * 1000L);
  disp.begin(&Adafruit128x64, 0x3C);
#elif (OLED == 1)
  Wire.begin();
  Wire.setClock(WIRE_SPEED * 1000L);
  disp.begin(&SH1106_128x64, 0x3C);
#elif (OLED == 2)
  disp.begin(&Adafruit128x64, DISP_DC, DISP_CLK, DISP_MOSI);
#endif
#endif

  //disp.displayRemap(1); // переворот дисплея на 180 градусов

  // епром
  readEEPROM();

  // проверка напряжения аккумулятора перед началом работы
#ifdef BATTERY_PIN
  float batCheck = 0;
  for (byte i = 0; i < 20; i++) {
    batCheck += get_battery_voltage() / 20;
    delay(1);
  }
  while (get_battery_voltage() < BATTERY_LOW) {
#ifdef TM1637
    disp.brightness(0);
    disp.displayByte(0x39, 0x09, 0x09, 0x0F);
    delay(500);
    disp.displayByte(0x00, 0x00, 0x00, 0x00);
    delay(500);
#elif defined OLED
    disp.setFont(Battery12x22);
    printInt(get_battery_percent(), Right, 0);
    delay(500);
    disp.clear();
    delay(500);
#endif
    if (btn.holded()) {
      disp.clear();
#ifdef TM1637
      disp.brightness(7);
#endif
      serviceRoutine(BATTERY);
      break;
    }
  }
#endif

  if (parameterList[timeout_off] > 0) POWEROFFtimer.setInterval(parameterList[timeout_off] * 60000L);
  POWEROFFtimer.stop();

  if (parameterList[keep_power] > 0) {
    KEEP_POWERtimer.setInterval(parameterList[keep_power] * 1000L);
    KEEP_POWERtimer.start();
  }

  // тыкаем ленту
  strip.setBrightness(255);
  strip.clear();

  // настройка пинов
  pinMode(PUMP_POWER, 1);
  pinMode(SERVO_POWER, 1);
#ifdef ANALOG_METER
  pinMode(ANALOG_METER_PIN, OUTPUT);
#endif
  for (byte i = 0; i < NUM_SHOTS; i++) {
    if (SWITCH_LEVEL == 0) pinMode(SW_pins[i], INPUT_PULLUP);
  }
#ifdef BATTERY_PIN
  pinMode(BATTERY_PIN, INPUT);
#endif

#if (MOTOR_TYPE == 0)  // настройка серво
  servoON();
  servo.setDirection(parameterList[motor_reverse]);
  servo.attach(SERVO_PIN, parking_pos, SERVO_MIN_US, SERVO_MAX_US);
  delay(500);
  servo.setSpeed(parameterList[motor_speed]);
  servo.setAccel(MOTOR_ACCEL);
  servo.stop();
  servoOFF();
  parking = true;
  Timer2.setPeriod(5000);
#elif (MOTOR_TYPE == 1) // настройка шаговика
#ifdef STEPPER_ENDSTOP
  pinMode(STEPPER_ENDSTOP, INPUT_PULLUP);
#endif
  stepper.setRunMode(FOLLOW_POS);
  stepper.setMaxSpeedDeg(parameterList[motor_speed]);
  stepper.setAccelerationDeg(MOTOR_ACCEL);
  stepper.reverse(parameterList[motor_reverse]);
  stepper.setCurrentDeg(parking_pos);
  stepper.autoPower(MOTOR_AUTO_POWER);
  stepper.disable();
  Timer2.setPeriod(stepper.getMinPeriod() / 2);
#endif

  Timer2.enableISR();

  /* - Стартовая анимация. Значение ANIMATION_FPS задаёт количество кадров в секунду (чем больше - тем быстрее анимация)
        Всего доступно 8 видов анимации. Выбирается в ANIMATION_NUM от 0 до 7.
        Если #define ANIMATION_NUM 6 закомментированно, анимация будет меняться при каждом старте устройства
     - Радуга. Начальная яркость задаётся в RAINBOW_START_BRIGHTNESS ... (максимум 255). С этого значения яркость плавно убавляется до 0.
        Частота изменения цвета зависит от RAINBOW_FPS ... (чем больше значение - тем быстрее смена цвета)
     - Время, за которое пройдёт приветствие (пока светодиоды не погаснут) зависит от RAINBOW_FPS и RAINBOW_START_BRIGHTNESS.
        Время до полного угасания в мс = 1000 * RAINBOW_START_BRIGHTNESS / RAINBOW_FPS
  */

#define RAINBOW_FPS 60
#define RAINBOW_START_BRIGHTNESS 250

#ifdef TM1637
  //#define ANIMATION_NUM 7
#define ANIMATION_FPS 20
  timerMinim nextSym(1000 / ANIMATION_FPS);
#elif defined OLED
  timerMinim nextSym(10);
  disp.setFont(MAIN_FONT);
#if(MENU_LANG == 0)
  disp.setLetterSpacing(0);
#endif // MENU_LANG
  static byte targetX = (DISP_WIDTH - strWidth(bootscreen)) / 2;
  progressBar(-1);
#elif defined ANALOG_METER
  timerMinim nextSym(1000 / RAINBOW_FPS);
#endif // TM1637


  timerMinim nextColor(1000 / RAINBOW_FPS);

  uint8_t startBrightness = RAINBOW_START_BRIGHTNESS;
  while (startBrightness) {
#if (MOTOR_TYPE == 1) && defined STEPPER_ENDSTOP
    homing();
#endif
    if (nextColor.isReady()) {
      for (byte i = 0; i < NUM_SHOTS + statusLed; i++)
        leds[i] = mHSV(startBrightness + i * (255 / (NUM_SHOTS + statusLed) ), 255, startBrightness);
      startBrightness--;
      strip.show();
    }
    if (nextSym.isReady()) {
#ifdef TM1637
#ifdef ANIMATION_NUM
      showAnimation(ANIMATION_NUM);
#else
      showAnimation(animCount);
#endif
#elif defined OLED
      static byte currX = 128;
      if (currX > targetX) {
        disp.setFont(MAIN_FONT);
#if(MENU_LANG == 0)
        disp.setLetterSpacing(0);
#endif
        printStr(bootscreen, currX, 3);
        clearToEOL();
        currX -= 5;
      }
      else if (DISPLAY_VERSION) {
        disp.setFont(MAIN_FONT);
        printFloat(VERSION, 1, Center, 5);
      }

      progressBar(RAINBOW_START_BRIGHTNESS - startBrightness, RAINBOW_START_BRIGHTNESS - 2);
#elif defined ANALOG_METER
      static byte i = 0;
      i += round(255.0 / RAINBOW_START_BRIGHTNESS);
      analogWrite(ANALOG_METER_PIN, i - err_vector[i]);
#endif
    }
  }
  if (parameterList[stby_light] > 0) {
    for (byte i = 0; i < parameterList[stby_light]; i++) {
      for (byte j = 0; j < NUM_SHOTS; j++)  leds[j] = mHSV(parameterList[leds_color], 255, i);
      strip.show();
      delay(10);
    }
  }

#ifdef STATUS_LED
  if (workMode == ManualMode) LED = mHSV(manualModeStatusColor, 255, STATUS_LED);
  else LED = mHSV(autoModeStatusColor, 255, STATUS_LED);
  strip.show();
#endif

#if (MOTOR_TYPE == 1) && defined STEPPER_ENDSTOP
#ifdef STEPPER_ENDSTOP
  while (homing());
#endif
  stepper.setTargetDeg(parking_pos);
#endif

  if (!digitalRead(BTN_PIN) || serviceBoot) { // вход в сервисное меню
#ifdef TM1637
    serviceRoutine(serviceState);
  }
#elif defined OLED
    disp.clear();
    while (!digitalRead(BTN_PIN));  // ждём отпускания
    showMenu = true;
    lastMenuPage = NO_MENU;
    menuPage = SERVICE_PAGE;
    timeoutState = true;
    systemState = WAIT;
    displayMenu();
    POWEROFFtimer.stop();
  }
#endif
  else { // пропустили вход в сервис режим
#ifdef OLED
    disp.clear();
    if (parameterList[timeout_off] == 0) {
      progressBar(-1);
      displayMode(workMode);
      displayVolume();
    }
#elif defined ANALOG_METER
    printNum(thisVolume);
#endif
  }

  timeoutReset();   // сброс таймаута
  TIMEOUTtimer.start();
}

//#if (MOTOR_TYPE == 1)
ISR(TIMER2_A) {
#if (MOTOR_TYPE == 0)
  servo.tick();
#else
  stepper.tick();
#endif
}
//#endif


=== Файл: Config.h ===


//╞════════════════════════════════════════════════════════════════════════════════════╣ Настройки ⚒ ╠════════════════════════════════════════════════════════════════════════════════════╡

/*■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ Основные настройки ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■*/

/*  ======================== выбор дисплея ========================
   0  → OLED 128x64 на контроллере SSD1306 или SSD1309 по (I2C)
   1  → OLED 128x64 на контроллере SH1106 (I2C)
   2  → OLED 128x64 на контроллере SSD1306 или SSD1309 (SPI)
   3  → 4-х значный 7-ми сегментный дисплей на контроллере TM1637
   4  → стрелочный индикатор
*/
#define DISPLAY_TYPE   1

#define NUM_SHOTS      6     // количество рюмок (оно же кол-во светодиодов и кнопок!)
#define SWITCH_LEVEL   0     // кнопки: 1 → высокий сигнал при замыкании, 0 → низкий
#define ENCODER_TYPE   1     // тип энкодера. 0 или 1. Отличаются количеством делений на оборот
#define ENCODER_DIR    1     // направление вращения энкодера. 0 или 1
//#define STATUS_LED     30    // яркость статус-светодиода. 255 → максимум. Раскомментировать, если подключен
//#define BATTERY_PIN    A7    // + аккумулятора (максимум 5 вольт без делителя). Раскомментировать, если подключен
//#define CHARGER_PIN    A6    // IN+ с TP4056. Используется для детектирования зарядки

#define MOTOR_TYPE     1     // тип привода. Серво - 0, Шаговик - 1

// ======================== Настройка шагового мотора ========================

#define STEPS_PER_REVOLUTION     200  // количество шагов на оборот двигателя
#define MICROSTEPS               4     // значение микрошага, выставленного на драйвере двигателя
#define STEPPER_HOMING_SPEED     10    // скорость вращения двигателя при движении к концевику (если он есть) в об/мин
#define SMOOTH_ALGORITHM               // ещё больше плавности движения!

// ========================= Настройка Серводвигателя =========================

#define SERVO_MIN_US  544     // минимальная ширина импульса в мкс
#define SERVO_MAX_US  2400    // максимальная ширина импульса в мкс

/*■■■■■■■■■■■■■■■■■■■■■ Параметры, изменяемые в сервис режиме ■■■■■■■■■■■■■■■■■■■■■■*/

#define TIME_50ML      5000  // время заполнения 50 мл
#define MAX_VOLUME     50    // ограничение максимального объёма. Максимальное значение 255
#define MOTOR_REVERSE  0     // инвертировать направление вращения двигателя
#define PARKING_POS    0     // угол двигателя для парковочной позиции
#define BATTERY_CAL    1.0   // фактор для калибровки напряжения акб

// позиции серводвигателя над рюмками. От первой к последней
#define SHOT_POSITIONS       90, 135, 180, 225, 270

/*■■■■■■■■■■■■■■■■■■■■■■■■■■ Дополнительные настройки ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■*/

// Онлайн конвертер цветов https://bit.ly/34WSaig Используем значение H из HSV.

#define PREPUMP_VOLUME    0           // объём жидкости в системе в мл. Добавляется к объёму первой рюмки после включения устройства, когда система ещё пуста.
#define PAUSE_TIME        1000        // пауза после налива в мс. 
#define LEDS_COLOR        270         // цвет подсветки светодиодов от 0 до 360
#define TIMEOUT_STBY      10          // таймаут входа в режим ожидания в секундах. В режиме ожидания сохраняется последний объём и приглушается яркость подсветки
#define TIMEOUT_OFF       5           // таймаут входа в енергосберегающий режим в минутах. В этом режиме отключается дисплей и все светодиоды. Если 0 → режим не активен
#define KEEP_POWER        0           // интервал поддержания питания от повербанка в секундах. Через этот интервал происходит скачёк потребления енергии светодиодами. 0 → функция отключена
#define MOTOR_SPEED       100         // скорость привода в градус/сек (макс 255)
#define MOTOR_ACCEL       250         // ускорение двигателя в угол/сек^2
#define AUTO_PARKING      1           // парковка в авто режиме: 1 → вкл, 0 → выкл
#define MOTOR_AUTO_POWER  1           // авто отключение двигателя во время простоя
#define SAVE_MODE         0           // 1 → сохранение последнего активного режима в памяти, 0 → не сохраняется
#define STBY_LIGHT        20          // яркость подсветки в режиме ожидания. 255 → максимум, 0 → выкл
#define RAINBOW_FLOW      1           // 1 → динамическая подсветка налитых рюмок, 0 → статическая
#define BATTERY_LOW       3.0         // минимальное напряжение аккумулятора
#define MANUAL_MODE_STATUS_COLOR  200 // цвет статусного светодиода в ручном режиме
#define AUTO_MODE_STATUS_COLOR    100 // цвет статусного светодиода в авто режиме
#define DISPLAY_SESSION_VOLUME    1   // вывод общего объёма за сеанс на основную страницу. 1 → вкл, 0 → выкл

/*■■■■■■■■■■■■■■■■■■■■■■■■■■■ Настройки OLED дисплея ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■*/

#define INVERT_DISPLAY 0     // инверсия цветов OLED дисплея
#define OLED_CONTRAST  15    // яркость дисплея. Макс 255
#define MENU_SELECT    0     // 0 → выбор пункта меню инверсией, 1 → стрелкой
#define MENU_LANG      0     // язык меню. 0 → русский, 1 → english
#define NUM_FONT       0     // выбор шрифта для отображения объёма (0 или 1)
#define WIRE_SPEED     600   // частота передачи данных OLED дисплею в kHz (min 100, mid 400, max 900). Понизьте частоту, при проблемах с дисплеем.
#define BOOTSCREEN     "стаб версия"  // текст на OLED дисплее при старте устройства


//╞════════════════════════════════════════════════════════════════════════════════════╣ Соединения ╠════════════════════════════════════════════════════════════════════════════════════╡

#define PUMP_REVERCE 13          //реверс помпы (ток меньше чем на остальных пинах!)
//#define LIFT_MOTOR 12            //привод подъемного механизма
//#define LIFT_END 11              //концевик лифта

#define PUMP_POWER  3        // управляющий сигнал драйвера помпы (обычно обозначен как IN на драйверах моторов, либо GATE/BASE, если используется транзистор)

#define SERVO_POWER 4        // управляющий сигнал драйвера для питания серводвигателя (обычно обозначен как IN на драйверах моторов, либо GATE/BASE, если используется транзистор)
#define SERVO_PIN   5        // сигнальный провод серводвигателя
#define LED_PIN     6        // сигнал DIO/DI первого светодиода (WS2812b)
#define BTN_PIN     7        // сигнал с основной кнопки для разлива и смены режимов
#define ENC_SW      8        // сигнал центральной кнопки на энкодере для прокачки и настройки различных обьёмов. Обозначен как SW или BTN
#define ENC_DT      9        // сигнал DT или А с энкодера
#define ENC_CLK     10       // сигнал CLK или B с энкодера

//#define STEPPER_ENDSTOP 1    // сигнал с концевика для двигателя. В активном состоянии должен замыкать на GND. Закоментировать, если концевик не используется
#define STEPPER_EN      2    // сигнал EN драйвера
#define STEPPER_DIR     4    // сигнал DIR драйвера
#define STEPPER_STEP    5    // сигнал STEP драйвера

/*■■■■■■■■■■■■■■■■■■■■■■■■■■■ Версия с дисплеем TM1639 ■■■■■■■■■■■■■■■■■■■■■■■■■■■*/
#if(DISPLAY_TYPE == 3)

#define DISP_DIO    11       // сигнал DIO на дисплее TM1637
#define DISP_CLK    12       // сигнал CLK на дисплее TM1637
#define SW_PINS     A0, A1, A2, A3, A4, A5    // сигналы с датчиков наличия рюмок на ТМ1637 версии: от первой к последней рюмке

/*■■■■■■■■■■■■■■■■■■■■■■■■■■■■ Версия с OLED дисплеем ■■■■■■■■■■■■■■■■■■■■■■■■■■■■*/
#elif (DISPLAY_TYPE < 3)

// пины I2C
#define DISP_SDA    A4       // сигнал SDA OLED дисплея
#define DISP_SCK    A5       // сигнал SCK OLED дисплея
// пины SPI
#define DISP_DC     0        // сигнал DC OLED дисплея
#define DISP_MOSI   A4       // сигнал MOSI или SDA OLED дисплея
#define DISP_CLK    A5       // сигнал CLK или SCL OLED дисплея

#define SW_PINS     A0, A1, A2, A3, 11, 12  // сигналы с датчиков наличия рюмок на OLED версии: от первой к последней рюмке

/*■■■■■■■■■■■■■■■■■■■■■■■ Версия со стрелочным индикатором ■■■■■■■■■■■■■■■■■■■■■■■*/
#elif (DISPLAY_TYPE == 4)

#define ANALOG_METER_PIN 11  // + с индикатора
#define SW_PINS     A0, A1, A2, A3, A4, A5    // сигналы с датчиков наличия рюмок на ANALOG_METER версии: от первой к последней рюмке
#endif


=== Файл: c_loop.ino ===

//void CPS() // cycles per second
//{
//  static uint32_t cnt_loop = 0;
//  static uint32_t tm_m = 0;
//  cnt_loop++;
//  if ((millis() - tm_m) >= 500)
//  {
////    Serial.println(cnt_loop / 1000.0);
//    disp.setFont(MAIN_FONT);
//    printStr("    ", Left, 0);
//    printInt(cnt_loop / 500.0, Left, 0);
//    cnt_loop = 0;
//    tm_m = millis();
//  }
//}

void loop() {
  while (1) {

#ifdef BATTERY_PIN
    while (!battery_watchdog() && !showMenu);
#endif
    encTick();
    btnTick();
    flowTick();
    LEDtick();
    timeoutTick();
    motorTick();
    keepPowerTick();
    //CPS();
  }
}


=== Файл: d_func.ino ===


timerMinim timer100(100);

// обработка функций сервисного режима
void serviceRoutine(serviceStates mode) {

#ifdef TM1637
  byte serviceText[] = {_S, _E, _r, _U, _i, _C, _E};
  disp.runningString(serviceText, sizeof(serviceText), 150);
  while (!digitalRead(BTN_PIN));  // ждём отпускания
#endif

  //==============================================================================
  //                       настройка позиций двигателя
  //==============================================================================

  if (mode == POSITION) {
#if (MOTOR_TYPE == 1)
    stepper.autoPower(false);
#endif
    byte workModeTemp = workMode;
    workMode = AutoMode;
    for (byte i = 0; i*2 < NUM_SHOTS; i++) strip.setLED(i, mHSV(parameterList[leds_color], 255, parameterList[stby_light]));
    strip.show();
#ifdef TM1637
    disp.scrollByte(_dash, _1, _dash, _empty, 50);
    delay(1000);
#elif defined OLED
    disp.clear();
    disp.setInvertMode(1);
    clearToEOL();
#if(MENU_LANG == 0)
    printStr("Парковка", Center, 0);
#else
    printStr("Parking", Center, 0);
#endif
    disp.setInvertMode(0);
#endif
    byte servoPos = parking_pos;
    printNum(servoPos, deg);
    while (1) {
      enc.tick();
      static int currShot = -1;
      // зажигаем светодиоды от кнопок
      for (byte i = 0; i*2 < NUM_SHOTS; i++) {
        if (!digitalRead(SW_pins[i]) && shotStates[i] != EMPTY) { // поставили рюмку
          strip.setLED(i, mHSV(255, 0, 50));
          strip.show();
          shotStates[i] = EMPTY;
          currShot = i;
          shotCount++;
          servoPos = shotPos[currShot];
#ifdef TM1637
          printNum((i + 1) * 1000 + shotPos[i], deg);
#elif defined OLED
          disp.home();
          disp.setInvertMode(1);
          clearToEOL();
#if(MENU_LANG == 0)
          printStr("Рюмка ", Center, 0);
#else
          printStr("Shot ", Center, 0);
#endif
          printInt(currShot + 1);
          clearToEOL();
          disp.write('\n');
          disp.setInvertMode(0);
          printNum(servoPos, deg);
#endif

#if (MOTOR_TYPE == 0)
          servo.setTargetDeg(servoPos);
          servo.start();
          servoON();
          while (!servo.tick());
          servoOFF();
          break;
#elif (MOTOR_TYPE == 1)
          stepper.setTargetDeg(servoPos);
          while (stepper.tick());
          break;
#endif
        }
        if (digitalRead(SW_pins[i]) && shotStates[i] == EMPTY)  { // убрали рюмку
          strip.setLED(i, mHSV(parameterList[leds_color], 255, parameterList[stby_light]));
          strip.show();
          shotStates[i] = NO_GLASS;
          if (currShot == i)  currShot = -1;
          shotCount--;
          if (shotCount == 0) { // убрали последнюю рюмку
            servoPos = parking_pos;
#ifdef OLED
            disp.home();
            disp.setInvertMode(1);
            clearToEOL();
#if(MENU_LANG == 0)
            printStr("Парковка", Center, 0);
#else
            printStr("Parking", Center, 0);
#endif
            clearToEOL();
            disp.write('\n');
            disp.setInvertMode(0);
#endif
            printNum(servoPos, deg);
#if (MOTOR_TYPE == 0)
            servo.setTargetDeg(servoPos);
            servo.start();
            servoON();
            while (!servo.tick());
            servo.stop();
            servoOFF();
            break;
#elif (MOTOR_TYPE == 1)
            stepper.setTargetDeg(servoPos);
            while (stepper.tick());
            break;
#endif
          }
          else continue;  // если ещё есть поставленные рюмки -> ищем заново и попадаем в следующий блок
        }
        if (shotStates[i] == EMPTY && currShot == -1) { // если стоит рюмка
          currShot = i;
          servoPos = shotPos[currShot];
#ifdef TM1637
          printNum((i + 1) * 1000 + shotPos[i], deg);
#elif defined OLED
          disp.home();
          disp.setInvertMode(1);
          clearToEOL();
#if(MENU_LANG == 0)
          printStr("Рюмка ", Center, 0);
#else
          printStr("Shot ", Center, 0);
#endif
          printInt(currShot + 1);
          clearToEOL();
          disp.write('\n');
          disp.setInvertMode(0);
          printNum(servoPos, deg);
#endif
#if (MOTOR_TYPE == 0)
          servo.setTargetDeg(servoPos);
          servo.start();
          servoON();
          while (!servo.tick());
          servoOFF();
          break;
#elif (MOTOR_TYPE == 1)
          stepper.setTargetDeg(servoPos);
          while (stepper.tick());
          break;
#endif
        }
      }

      if (enc.isTurn()) {   // крутим серво от энкодера
        if (enc.isLeft()) servoPos += 1;
        if (enc.isRight() && servoPos > 0)  servoPos -= 1;
        //servoPos = min(servoPos, 180);
#if (MOTOR_TYPE == 0)
        servoON();
        servo.attach(SERVO_PIN, servoPos, SERVO_MIN_US, SERVO_MAX_US);
#elif (MOTOR_TYPE == 1)
        stepper.setAccelerationDeg(0);
        stepper.setMaxSpeedDeg(60);
        stepper.setTargetDeg(servoPos);
        while (stepper.tick());
        stepper.setAccelerationDeg(MOTOR_ACCEL);
        stepper.setMaxSpeedDeg(parameterList[motor_speed]);
#endif
        if (shotCount == 0) parking_pos = servoPos;
        if (shotStates[currShot] == EMPTY) {
          shotPos[currShot] = servoPos;
#ifdef TM1637
          printNum((currShot + 1) * 1000 + shotPos[currShot], deg);
#elif defined OLED
          printNum(shotPos[currShot], deg);
#endif
        }
        else printNum(servoPos, deg);
      }
      if (btn.pressed()) {
        workMode = (workModes)workModeTemp;
#ifdef TM1637
        disp.scrollByte(0, 0, 0, 0, 50);
        mode = VOLUME;
#elif defined OLED
        timeoutReset();
        for (byte i = 0; i*2 < NUM_SHOTS; i++) {
          if (shotStates[i] == EMPTY) strip.setLED(i, mHSV(parameterList[leds_color], 255, 255));
        }
        strip.show();
#endif
        if (shotCount > 0) parking = false;
        break;
      }
    }

    disp.clear();

#if (MOTOR_TYPE == 0)
    servo.stop();
    servoOFF();
#elif (MOTOR_TYPE == 1)
    stepper.autoPower(MOTOR_AUTO_POWER);
#endif

    // сохраняем значения углов в память
    for (byte i = 0; i*2 < NUM_SHOTS; i++) EEPROM.update(eeAddress._shotPos + i, shotPos[i]);
    EEPROM.update(eeAddress._parking_pos, parking_pos);
  }

  //==============================================================================
  //                            калибровка объёма
  //==============================================================================

  if (mode == VOLUME) {
    uint16_t pumpTime = 0;
    bool flag = false;
    for (byte i = 0; i*2 < NUM_SHOTS; i++) strip.setLED(i, mHSV(parameterList[leds_color], 255, parameterList[stby_light]));
    strip.show();
#ifdef TM1637
    while (!digitalRead(BTN_PIN));  // ждём отпускания
    disp.scrollByte(_dash, _2, _dash, _empty, 50);
    delay(1000);
    disp.displayInt(pumpTime);
#elif defined OLED
    disp.clear();
    printNum(pumpTime);

#endif
    if (curPumping != -1) {   // если уже стоит рюмка
      shotStates[curPumping] = EMPTY;
      systemON = false;
      systemState = SEARCH;
      curPumping = -1;
#ifdef OLED
      disp.home();
      disp.setInvertMode(1);
      clearToEOL();
#if(MENU_LANG == 0)
      printStr("Зажмите энкодер", Center, 0);
#else
      printStr("Press encoder", Center, 0);
#endif
      disp.setInvertMode(0);
#endif
    }
    else {
#ifdef OLED
      disp.home();
      disp.setInvertMode(1);
      clearToEOL();
#if(MENU_LANG == 0)
      printStr("Поставьте рюмку", Center, 0);
#else
      printStr("Place shot", Center, 0);
#endif
      disp.setInvertMode(0);
#endif
    }
    while (1) {

      if (timer100.isReady()) {   // период 100 мс
        // работа помпы со счётчиком
        if (!digitalRead(ENC_SW) && curPumping != -1) {
          if (flag) pumpTime += 100;
          else {
#ifdef OLED
            disp.home();
            disp.setInvertMode(1);
            clearToEOL();
#if(MENU_LANG == 0)
            printStr("   Налейте 50мл   ", Center, 0);
#else
            printStr("   Fill 50ml   ", Center, 0);
#endif
            disp.setInvertMode(0);
#endif
          }
#ifdef TM1637
          disp.displayInt(pumpTime);
#elif defined OLED
          printNum(pumpTime);
#endif
          pumpON();
          flag = true;
        } else {
          pumpOFF();
          flag = false;
        }
      }

      for (byte i = 0; i*2 < NUM_SHOTS; i++) { // поиск рюмки
        if (!digitalRead(SW_pins[i]) && curPumping == -1) { // нашли
          delay(100);
          strip.setLED(i, mHSV(255, 0, 50));
          strip.show();
          curPumping = i;
#if (MOTOR_TYPE == 0)
          servo.setTargetDeg(shotPos[i]);
          servo.start();
          servoON();
#elif (MOTOR_TYPE == 1)
          stepper.setTargetDeg(shotPos[i]);
#endif
#ifdef OLED
          disp.home();
          disp.setInvertMode(1);
          clearToEOL();
#if(MENU_LANG == 0)
          printStr("Зажмите энкодер", Center, 0);
#else
          printStr("Press encoder", Center, 0);
#endif
          disp.setInvertMode(0);
#endif
        }
      }
      if (digitalRead(SW_pins[curPumping]) && (curPumping > -1)) {
        delay(100);
        strip.setLED(curPumping, mHSV(parameterList[leds_color], 255, parameterList[stby_light]));
        strip.show();
        if (pumpTime > 0) EEPROM.put(eeAddress._time50ml, pumpTime);
        pumpTime = 0;
        printNum(pumpTime);
        curPumping = -1;
#ifdef OLED
        disp.home();
        disp.setInvertMode(1);
        clearToEOL();
#if(MENU_LANG == 0)
        printStr("Поставьте рюмку", Center, 0);
#else
        printStr("  Place shot  ", Center, 0);
#endif
        disp.setInvertMode(0);
#endif
      }

#if (MOTOR_TYPE == 0)
      if (servo.tick()) servoOFF();
      else servoON();
#elif (MOTOR_TYPE == 1)
      stepper.tick();
#endif

      if (btn.pressed()) {
#ifdef TM1637
        disp.scrollByte(0, 0, 0, 0, 50);
#ifdef BATTERY_PIN
        mode = BATTERY;
#endif
#elif defined OLED
        timeoutReset();
#endif

        curPumping = -1;
#if (MOTOR_TYPE == 0)
        servo.setTargetDeg(parking_pos);
        servo.start();
        servoON();
#elif (MOTOR_TYPE == 1)
        stepper.setTargetDeg(parking_pos);
#endif

        for (byte i = 0; i*2 < NUM_SHOTS; i++) strip.setLED(i, mHSV(parameterList[leds_color], 255, parameterList[stby_light]));
        strip.show();
        break;
      }

    }
#if (MOTOR_TYPE == 0)
    while (!servo.tick());
    servoOFF();
#elif (MOTOR_TYPE == 1)
    while (stepper.tick());
#endif
    disp.clear();
    // сохраняем настройки таймера налива
    if (pumpTime > 0) {
      time50ml = pumpTime;
      volumeTick = 20.0 * 50.0 / time50ml;
      EEPROM.put(eeAddress._time50ml, pumpTime);
    }
  }

  //==============================================================================
  //                     калибровка напряжения аккумулятора
  //==============================================================================
#ifdef BATTERY_PIN
  if (mode == BATTERY) {
    for (byte i = 0; i*2 < NUM_SHOTS; i++) strip.setLED(i, mHSV(parameterList[leds_color], 255, parameterList[stby_light]));
    strip.show();
#ifdef TM1637
    while (!digitalRead(BTN_PIN));  // ждём отпускания
    disp.scrollByte(_dash, _3, _dash, _empty, 50);
    delay(1000);
#elif defined OLED
    disp.clear();
    disp.setInvertMode(1);
    disp.setFont(MAIN_FONT);
    static byte text_offset = (DISP_WIDTH - strWidth("Фактор: 0.000")) / 2;
#if(MENU_LANG == 0)
    disp.setLetterSpacing(0);
    clearToEOL();
    //    printStr("Напряжение аккум-а", Center, 0);
    printStr("Фактор: ", text_offset, 0);
    printFloat(battery_cal, 3);
#else
    clearToEOL();
    //    printStr("Battery voltage", Center, 0);
    printStr("Factor: ", text_offset, 0);
    printFloat(battery_cal, 3);
#endif /* MENU_LANG*/
    //    disp.setFont(BIG_NUM_FONT);
    disp.setInvertMode(0);
#endif /* OLED*/
    while (1) {
      enc.tick();

      if (timer100.isReady()) {
#ifdef TM1637
        printNum(get_battery_voltage() * 1000);
#elif defined OLED
        disp.setFont(BIG_NUM_FONT);
        printFloat(get_battery_voltage(), 2, Center, 3);
#endif
      }

      if (enc.isTurn()) {
        if (enc.isLeft())  battery_cal += 0.002;
        if (enc.isRight()) battery_cal -= 0.002;
        battery_cal = constrain(battery_cal, 0, 3.0);

#ifdef OLED
        disp.setInvertMode(1);
        disp.setFont(MAIN_FONT);
#if(MENU_LANG == 0)
        disp.setLetterSpacing(0);
        printStr("Фактор: ", text_offset, 0);
        printFloat(battery_cal, 3);
#else
        printStr("Factor: ", text_offset, 0);
        printFloat(battery_cal, 3);
#endif /* MENU_LANG */
        disp.setInvertMode(0);
#endif /* OLED */

      }

      if (btn.pressed()) {
#ifdef TM1637
        disp.scrollByte(0, 0, 0, 0, 50);
#elif defined OLED
        disp.setFont(MAIN_FONT);
#if(MENU_LANG == 0)
        disp.setLetterSpacing(0);
#endif
        disp.clear();
        if (showMenu) timeoutReset();
#endif
        break;
      }
    }
    EEPROM.put(eeAddress._battery_cal, battery_cal);
  }
#endif
}

#ifdef OLED
// обработка изменения параметра меню
void editParameter(byte parameter, byte selectedRow) {
  bool bypass = false;
  byte lastParameterValue = parameterList[parameter];
  if ( (parameter != motor_reverse) && (parameter != auto_parking) && (parameter != rainbow_flow) && (parameter != invert_display) ) { // boolean parameters
    disp.setInvertMode(0);
    printStr(MenuPages[menuPage][menuItem], 0, selectedRow);
#if (MENU_LANG == 0)
    clearToEOL('\'');
#else
    clearToEOL('.');
#endif
    disp.setInvertMode(1);
    printInt(parameterList[parameter], Right);
  }
  while (1) {
    enc.tick();

    if (enc.isTurn()) {
      if (enc.isLeft())  parameterList[parameter] += 1;
      if (enc.isRight()) parameterList[parameter] -= 1;
      if (enc.isLeftH()) parameterList[parameter] += 5;
      if (enc.isRightH()) parameterList[parameter] -= 5;

      if (parameterList[timeout_off] > 15) parameterList[timeout_off] = 0;
      //#if (MOTOR_TYPE == 0)
      //      if (parameterList[motor_speed] > 100) parameterList[motor_speed] = 0;
      //#endif

      if (parameterList[stby_time] > 0) {
        TIMEOUTtimer.setInterval(parameterList[stby_time] * 1000L); // таймаут режима ожидания
        TIMEOUTtimer.reset();
      }

      if (parameterList[keep_power] > 0) KEEP_POWERtimer.setInterval(parameterList[keep_power] * 1000L);
      else keepPowerState = 0;

      if (parameter == oled_contrast) disp.setContrast(parameterList[oled_contrast]);

      if (parameterList[parameter] <= 99 && lastParameterValue >= 100) {
        disp.setInvertMode(0);
        disp.setCursor(strWidth(MenuPages[menuPage][menuItem]), selectedRow);
#if (MENU_LANG == 0)
        clearToEOL('\'');
#else
        clearToEOL('.');//printStr(".", DISP_WIDTH - strWidth("000"));
#endif
        disp.setInvertMode(1);
      }
      if (parameterList[parameter] <= 9 && lastParameterValue >= 10) {
        disp.setInvertMode(0);
        disp.setCursor(strWidth(MenuPages[menuPage][menuItem]), selectedRow);
#if (MENU_LANG == 0)
        clearToEOL('\'');
#else
        clearToEOL('.');//printStr(".", DISP_WIDTH - strWidth("00"));
#endif
        disp.setInvertMode(1);
      }

      printInt(parameterList[parameter], Right);
      lastParameterValue = parameterList[parameter];

      timeoutReset();
    }

    if ( (parameter == motor_reverse) || (parameter == auto_parking) || (parameter == rainbow_flow) || (parameter == invert_display) ) { // boolean parameters
      parameterList[parameter] = !parameterList[parameter];
      bypass = true;
    }

    if (encBtn.pressed() ||  btn.pressed() || bypass) {
      EEPROM.update(eeAddress._timeout_off, parameterList[timeout_off]);
      EEPROM.update(eeAddress._motor_reverse, parameterList[motor_reverse]);
      EEPROM.update(eeAddress._motor_speed, parameterList[motor_speed]);
      EEPROM.update(eeAddress._auto_parking, parameterList[auto_parking]);
      EEPROM.update(eeAddress._stby_time, parameterList[stby_time]);
      EEPROM.update(eeAddress._stby_light, parameterList[stby_light]);
      EEPROM.update(eeAddress._rainbow_flow, parameterList[rainbow_flow]);
      EEPROM.update(eeAddress._max_volume, parameterList[max_volume]);
      EEPROM.update(eeAddress._keep_power, parameterList[keep_power]);
      EEPROM.update(eeAddress._invert_display, parameterList[invert_display]);
      EEPROM.update(eeAddress._leds_color, parameterList[leds_color]);
      EEPROM.update(eeAddress._oled_contrast, parameterList[oled_contrast]);

      if (parameterList[timeout_off] > 0) POWEROFFtimer.setInterval(parameterList[timeout_off] * 60000L);

#if (MOTOR_TYPE == 0)
      servo.setSpeed(parameterList[motor_speed]);
      servo.setDirection(parameterList[motor_reverse]);
      servo.start();
      servoON();
      while (!servo.tick());
      servo.stop();
      servoOFF();
#elif (MOTOR_TYPE == 1)
      stepper.setMaxSpeedDeg(parameterList[motor_speed]);
      stepper.reverse(parameterList[motor_reverse]);
      //stepper.setTargetDeg(parking_pos - 180);
      while (stepper.getState());
      //stepper.setCurrentDeg(parking_pos);
#endif

      if (thisVolume > parameterList[max_volume]) thisVolume = parameterList[max_volume];

      for (byte i = 0; i*2 < NUM_SHOTS; i++) {
        if (shotStates[i] == NO_GLASS) leds[i] = mHSV(parameterList[leds_color], 255, parameterList[stby_light]);
      }
      disp.invertDisplay(parameterList[invert_display]);
      timeoutReset();
      break;
    }
    keepPowerTick();
    LEDtick();
    //if ( (menuPage != SERVO_CALIBRATION_PAGE) && (menuPage != SERVICE_PAGE) ) {
    timeoutTick();
    if (!timeoutState) break;
    //}
  }
}
#endif

// наливайка, опрос кнопок
void flowTick() {
  if (FLOWdebounce.isReady()) {
    for (byte i = 0; i*2 < NUM_SHOTS; i++) {
      /* антидребезг датчиков с цифровым выходом
        //        static bool wait[NUM_SHOTS], swPreState[NUM_SHOTS], swState;
        //        static long stateDebounce[NUM_SHOTS];
        //        swPreState[i] = !digitalRead(SW_pins[i]) ^ SWITCH_LEVEL;
        //        if(swPreState[i] && !wait[i]) stateDebounce[i] = millis();
        //        wait[i] = swPreState[i];
        //        swState = (swPreState[i] && (millis() - stateDebounce[i] > 1000)) ? true : false;
      */
      //bool swState = (bool)(analogRead(SW_pins[i]) < 512) ^ SWITCH_LEVEL;   // для датчиков с аналоговым выходом
      bool swState = !digitalRead(SW_pins[i]) ^ SWITCH_LEVEL;                 // для датчиков с цифровым выходом

      if (swState && shotStates[i] == NO_GLASS) {  // поставили пустую рюмку
        if (keepPowerState) keepPowerState = false;
        shotStates[i] = EMPTY;                                      // флаг на заправку
        if (i == curSelected) strip.setLED(curSelected, mHSV(255, 0, 50));
        else  strip.setLED(i, mHSV(parameterList[leds_color], 255, 255));                      // подсветили
        LEDchanged = true;
        shotCount++;                                                // инкрементировали счётчик поставленных рюмок
        timeoutReset();                                             // сброс таймаута
        if (systemState != PUMPING && systemState != MOVING && !showMenu) {
          printNum(shotVolume[i], ml);
#ifdef OLED
          progressBar(shotVolume[i], parameterList[max_volume]);
#endif
        }
      }
      if (!swState && shotStates[i] != NO_GLASS) {   // убрали пустую/полную рюмку
        shotStates[i] = NO_GLASS;                                   // статус - нет рюмки
        if (i == curSelected) {
          selectShot = -1;
          curSelected = -1;
        }
        if (parameterList[stby_light] > 0)
          strip.setLED(i, mHSV(parameterList[leds_color], 255, parameterList[stby_light]));
        else strip.setLED(i, mRGB(0, 0, 0));  // чёрный
        LEDchanged = true;
        //timeoutReset();                                           // сброс таймаута
        if (i == curPumping) {
          curPumping = -1; // снимаем выбор рюмки
          systemState = WAIT;                                       // режим работы - ждать
          WAITtimer.reset();
          pumpOFF();                                                // помпу выкл
#ifdef OLED
          volume_overall += actualVolume;
          EEPROM.put(eeAddress._volume_overall, volume_overall);
#endif
          actualVolume = 0;
        }
        shotCount--;
        if (systemState != PUMPING && systemState != MOVING && !showMenu) {
          printNum(thisVolume, ml);
#ifdef OLED
          progressBar(thisVolume, parameterList[max_volume]);
#endif
        }
      }
      if (shotStates[i] == READY) rainbowFlow(1, i);
      else  rainbowFlow(0, i);
    }
    if (shotCount == 0) {                                          // если нет ни одной рюмки
      TIMEOUTtimer.start();
      if (!parking && !systemON) systemON = true;
    }
    else  TIMEOUTtimer.stop();

    if (workMode == AutoMode)           // авто
      flowRoutine();       // крутим отработку кнопок и поиск рюмок
    else if (systemON)    // ручной
      flowRoutine();     // если активны - ищем рюмки и всё такое
  }
}

// поиск и заливка
void flowRoutine() {
  if (showMenu) return;
  static byte prepump_volume = 0;
  if (systemState == SEARCH) {                                           // если поиск рюмки
    bool noGlass = true;
    for (byte i = 0; i*2 < NUM_SHOTS; i++) {
      if (shotStates[i] == EMPTY && i != curPumping) {    // поиск
        TIMEOUTtimer.stop();
        noGlass = false;                                  // флаг что нашли хоть одну рюмку
        curPumping = i;                                   // запоминаем выбор
        systemState = MOVING;                             // режим - движение
        shotStates[curPumping] = IN_PROCESS;              // стакан в режиме заполнения

        // включаем серво только если целевая позиция не совпадает с текущей
#if (MOTOR_TYPE == 0)
        if (servo.getCurrentDeg() != shotPos[i]) {
          servo.setTargetDeg(shotPos[curPumping]);        // задаём цель
          servo.start();
          servoON();                                      // вкл питание серво
#elif (MOTOR_TYPE == 1)
        if (stepper.getCurrentDeg() != shotPos[i]) {
          stepper.setTargetDeg(shotPos[curPumping]);
#endif
          parking = false;
#ifdef STATUS_LED
          LEDblinkState = true;
          LEDchanged = true;
#endif
        }
        else if (shotPos[i] == parking_pos) {             // если положение рюмки совпадает с парковочным
#if (MOTOR_TYPE == 0)
          servoON();                                      // вкл питание серво
          servo.attach(SERVO_PIN, parking_pos, SERVO_MIN_US, SERVO_MAX_US);
          delay(500);
#elif (MOTOR_TYPE == 1)
          stepper.setTargetDeg(parking_pos);
#endif
        }
#ifdef OLED
        printNum(shotVolume[curPumping], ml);
        progressBar(0);
#elif defined ANALOG_METER
        printNum(0);
#endif
        break;
      }
    }

    if (noGlass && !parking) {                            // если не нашли ни одной пустой рюмки и не припаркованны
      if ( (workMode == AutoMode) && parameterList[auto_parking] == 0) {                // если в авто режиме:
        systemON = false;                                 // выключили систему
        parking = true;                                   // уже на месте!
#ifdef STATUS_LED
        if (workMode == ManualMode) LED = mHSV(manualModeStatusColor, 255, STATUS_LED);
        else LED = mHSV(autoModeStatusColor, 255, STATUS_LED);
#endif
      }
      else {                                              // если же в ручном режиме:
#if (MOTOR_TYPE == 0)
        if (servo.getTargetDeg() != parking_pos) {
          servo.setTargetDeg(parking_pos);
          servo.start();
          servoON();                                        // включаем серво и паркуемся
#elif (MOTOR_TYPE == 1)
        if (stepper.getTargetDeg() != parking_pos) {
          stepper.setTargetDeg(parking_pos);
#endif
#ifdef STATUS_LED
          LEDblinkState = true;
          LEDchanged = true;
#endif
#ifdef TM1637
          printNum(thisVolume);
#endif
#ifdef OLED

          progressBar(thisVolume, parameterList[max_volume]);
          displayVolumeSession();
#endif
        }
#if (MOTOR_TYPE == 0)
        if (servo.tick()) {                               // едем до упора
          servo.stop();
          servoOFF();
#elif (MOTOR_TYPE == 1)
        if (!stepper.getState()) {
#endif
          systemON = false;                               // выключили систему
          parking = true;                                 // на месте!
#ifdef STATUS_LED
          LEDblinkState = false;
          if (workMode == ManualMode) LED = mHSV(manualModeStatusColor, 255, STATUS_LED);
          else LED = mHSV(autoModeStatusColor, 255, STATUS_LED);
          LEDchanged = true;
#endif
//          pinMode(13, OUTPUT);
//          digitalWrite(13, 1);
//          delay(300);
//          digitalWrite(13, 0);
        }
      }
    }
    else if ( (workMode == ManualMode) && noGlass) systemON = false;     // если в ручном режиме, припаркованны и нет рюмок - отключаемся нахрен
  }
  else if (systemState == MOVING) {                                          // движение к рюмке
#if (MOTOR_TYPE == 0)
    if (servo.tick()) {                                   // если приехали
#elif (MOTOR_TYPE == 1)
    if (!stepper.getState()) {
#endif
#ifdef STATUS_LED
      LEDblinkState = false;
      if (workMode == ManualMode) LED = mHSV(manualModeStatusColor, 255, STATUS_LED);
      else LED = mHSV(autoModeStatusColor, 255, STATUS_LED);
      strip.show();
#endif
      // обнуляем счётчик
#ifdef OLED
      disp.setFont(BIG_NUM_FONT);
      disp.setCursor(0, 2);
      clearToEOL();
      byte targetX = (DISP_WIDTH - strWidth("00")) / 2 + 17;
      byte currX = 128;
      while (currX > targetX) {
        currX -= 3;
        currX = max(currX - 3, targetX);
        printStr("0 ", currX, 2);
        disp.setCursor(currX + strWidth("0"), 5);
#if(NUM_FONT == 0)
        disp.setFont(BigPostfix30x16);
#else
        disp.setFont(BigPostfix30x16_2);
#endif
        disp.write('%');
        disp.setFont(BIG_NUM_FONT);
      }
      displayVolumeSession();
#endif

      systemState = PUMPING;                              // режим - наливание
      if (!prepumped) {
        prepump_volume = PREPUMP_VOLUME; // если самая первая рюмка - учитываем прокачку
        prepumped = true;
      }
      else prepump_volume = 0;
      delay(300);
      FLOWtimer.setInterval((long)(shotVolume[curPumping] + prepump_volume) * time50ml / 50);  // перенастроили таймер
      FLOWtimer.reset();                                  // сброс таймера
      actualVolume = 0;
      volumeCounter = 0;
      volumeColor[curPumping] = 0;
#ifdef OLED
      progressBar(-1);
#endif
      pumpON();                                           // НАЛИВАЙ!
    }
  }
  else if (systemState == PUMPING) {                           // если качаем
    //    static long tStart, tDiff, tDiffMax = 0;
    //    tStart = millis();

    volumeCounter += volumeTick;
    if ((byte)volumeCounter > actualVolume + prepump_volume) {
      actualVolume++;
      printNum(actualVolume, ml);

      //      tDiffMax = 0;

#ifdef OLED
      volume_session++;
      displayVolumeSession();
      progressBar(actualVolume, shotVolume[curPumping]);
#endif
    }

    strip.setLED(curPumping, mHSV(volumeColor[curPumping] + parameterList[leds_color], 255, 255));
    volumeColor[curPumping]++;
    LEDchanged = true;

    if (FLOWtimer.isReady()) {                            // если налили (таймер)
      pumpOFF();                                          // помпа выкл
          pumpRevON();                                    //  \
          delay(200);                                     //   |
          pumpON();                                       //   |управление
          delay(200);                                     //   |реверсом помпы
          pumpOFF();                                      //   |
          pumpRevOFF();                                   //  /
      shotStates[curPumping] = READY;                     // налитая рюмка, статус: готов
#ifdef OLED
      shots_session++;
      volume_overall += actualVolume;
      EEPROM.put(eeAddress._volume_overall, volume_overall);
#endif
      curPumping = -1;                                    // снимаем выбор рюмки
      systemState = WAIT;                                 // режим работы - ждать
      WAITtimer.reset();
      if (volumeChanged) {
        volumeChanged = false;
        EEPROM.update(eeAddress._thisVolume, thisVolume);
      }
    }

    //    tDiff = millis() - tStart;
    //    if (tDiff > tDiffMax) {
    //      tDiffMax = tDiff;
    //      disp.setFont(MAIN_FONT);
    //      printStr("  ", Left, 0);
    //      printInt(tDiffMax, Left, 0);
    //    }
  }
  else if (systemState == WAIT) {
    actualVolume = 0;
    if (WAITtimer.isReady())
      systemState = SEARCH;
  }
}

// прокачка
void prePump() {
  if (showMenu) return;
  for (byte i = 0; i*2 < NUM_SHOTS; i++) {    // поиск наличия рюмки
    if (!digitalRead(SW_pins[i])) {        // нашли рюмку
      curPumping = i;
#if (MOTOR_TYPE == 0)
      if (abs(servo.getCurrentDeg() - shotPos[i]) <= 3) break;
      servo.setTargetDeg(shotPos[curPumping]);
      servo.start();
      servoON();
#elif (MOTOR_TYPE == 1)
      if (abs(stepper.getCurrentDeg() - shotPos[i]) <= 3) break;
      stepper.setTargetDeg(shotPos[curPumping]);
#endif
      volumeCounter = 0;
      parking = false;
      break;
    }
  }
  if (curPumping == -1) return; // нет рюмок -> нет прокачки, ищем заново ^
#if (MOTOR_TYPE == 0)
  while (!servo.tick()); // едем к рюмке
  servo.stop();
  servoOFF();
#elif (MOTOR_TYPE == 1)
  while (stepper.tick());
#endif
  delay(100); // небольшая задержка перед наливом

  pumpON(); // включаем помпу
  FLOWdebounce.reset();
  while (!digitalRead(SW_pins[curPumping]) && !digitalRead(ENC_SW)) // пока стоит рюмка и зажат энкодер, продолжаем наливать
  {
    if (FLOWdebounce.isReady()) {

      volumeCounter += volumeTick;
      if ((byte)volumeCounter > actualVolume) {
        actualVolume++;
        printNum(actualVolume, ml);
      }

      strip.setLED(curPumping, mHSV(volumeColor[curPumping] + parameterList[leds_color], 255, 255));
      volumeColor[curPumping]++;
      strip.show();
    }
  }
  pumpOFF();
}

// сброс таймаута
void timeoutReset() {
  if (!timeoutState && !showMenu && (curSelected < 0)) {
    timeoutState = true;
#ifdef TM1637
    disp.brightness(7);
    disp.displayByte(0x00, 0x00, 0x00, 0x00);
    if (thisVolume < 100) {                                // объём меньше 100
      if (thisVolume < 10)
        disp.scrollByte(workMode * _dash, 0, digToHEX(thisVolume % 10), workMode * _dash, 30);  // число меньше 10 - второй индикатор пуст
      else
        disp.scrollByte(workMode * _dash, digToHEX(thisVolume / 10), digToHEX(thisVolume % 10), workMode * _dash, 30);     // число больше 9
    }
    else disp.scrollByte(digToHEX(thisVolume / 100), digToHEX((thisVolume % 100) / 10), digToHEX(thisVolume % 10), workMode * _dash, 30); // объём больше 99
#elif defined OLED
    disp.setContrast(parameterList[oled_contrast]);
    disp.invertDisplay((bool)parameterList[invert_display]);
    if ( (parameterList[timeout_off] > 0) && !POWEROFFtimer.isOn() ) {
      dispSTBicon = false;
      disp.clear();
      displayMode(workMode);
      progressBar(-1);
      if (!volumeChanged) displayVolume();
    }
    if (volumeChanged) displayVolume(); // выход из режима ожидания прокруткой энкодера - обновляем значение объёма
    // стираем иконку режима ожидания
    disp.setFont(Mode12x26);
    printInt(0, Center, 0);
#endif
  }
  TIMEOUTtimer.reset();

  if (!keepPowerState) {
    for (byte i = 0; i*2 < NUM_SHOTS; i++) {
      if (i == curSelected) strip.setLED(curSelected, mHSV(255, 0, 50)); // белый
      else if (shotStates[i] == NO_GLASS) leds[i] = mHSV(parameterList[leds_color], 255, parameterList[stby_light]);
    }
  }
#ifdef STATUS_LED
  if (workMode == ManualMode) LED = mHSV(manualModeStatusColor, 255, STATUS_LED);
  else LED = mHSV(autoModeStatusColor, 255, STATUS_LED);
  LEDbreathingState = false;
#endif
  //  LEDchanged = true;
  strip.show();
}

// сам таймаут
void timeoutTick() {
  if ( timeoutState && TIMEOUTtimer.isReady() && (systemState == SEARCH) ) {
    timeoutState = false;
#ifdef TM1637
    disp.brightness(0);
    printNum(thisVolume, ml);
#elif defined OLED
    disp.setContrast(1);
    if (showMenu) {
      showMenu = 0;
      menuItem = 1;
      lastMenuPage = NO_MENU;
      menuPage = MAIN_MENU_PAGE;
      disp.setInvertMode(0);
      disp.clear();
      progressBar(-1);
      displayVolume();
    }
    displayMode(workMode);

    // выводим иконку режима ожидания
    disp.setFont(Mode12x26);
    printInt(2, Center, 0);
#endif
    if (parameterList[stby_light])
      for (byte i = 0; i*2 < NUM_SHOTS; i++) leds[i] = mHSV(parameterList[leds_color], 255, parameterList[stby_light] / 2);
    LEDbreathingState = true;
    LEDchanged = true;
    selectShot = -1;
    curSelected = -1;
    systemON = false;
    if (parameterList[timeout_off] > 0) POWEROFFtimer.reset();
#if (SAVE_MODE == 1)
    EEPROM.update(eeAddress._workMode, workMode);
#endif
  }

  if (parameterList[timeout_off]) {
    if (POWEROFFtimer.isReady() && !timeoutState) {
      for (byte i = 0; i*2 < NUM_SHOTS; i++) leds[i] = mRGB(0, 0, 0); // black
#ifdef STATUS_LED
      LED = mHSV(0, 0, 0);  // off
      LEDbreathingState = false;
#endif
#ifdef TM1637
      disp.scrollByte(0, 0, 0, 0, 50);
#elif defined OLED
      if (parameterList[invert_display]) disp.invertDisplay(false);
      disp.clear();
      dispSTBicon = true;
      //      printStr("1", Center, 2);
#endif
      LEDchanged = true;
      POWEROFFtimer.stop();
    }
#ifdef OLED
    if (dispSTBicon) {  // отображение большой иконки режима ожидания
      if (timer100.isReady()) {
        static int8_t xDir = 1, xPos = 0;
        xPos += xDir;
        if (xPos == 92 || xPos == 0) xDir *= -1;
        disp.setFont(BigIcon36x40);
        printStr("1", xPos, 2);
      }
    }
#endif
  }
}

// обработка поддержания питания
void keepPowerTick() {
  if (parameterList[keep_power] > 0) {
    if (KEEP_POWERtimer.isReady() && (shotCount == 0)) {
      keepPowerState = 1;
      LEDchanged = true;
    }
  }
}

// обработка движения двигателя
void motorTick() {
#if (MOTOR_TYPE == 0)
  if (servo.tick()) {
#if(MOTOR_AUTO_POWER)
    servoOFF();
    servo.stop();
#endif
  }
  else {
#if(MOTOR_AUTO_POWER)
    servoON();
    servo.start();
#endif
  }
#elif (MOTOR_TYPE == 1)
  stepper.tick();
#endif
}

#if (MOTOR_TYPE == 1) && defined STEPPER_ENDSTOP
bool homing() {
  if (parking) return 0;

  if (ENDSTOP_STATUS) {
    stepper.brake();
    stepper.setRunMode(FOLLOW_POS);
    stepper.setCurrentDeg(parking_pos);
    stepper.setMaxSpeedDeg(parameterList[motor_speed]);

    parking = true;
    return 0;
  }
  else if (!stepper.tick()) {
    stepper.enable();
    stepper.setRunMode(KEEP_SPEED);
    stepper.setSpeedDeg(-STEPPER_HOMING_SPEED);
  }

  return 1;
}
#endif

// отрисовка светодиодов по флагу (50мс)
void LEDtick() {
  if (LEDchanged && LEDtimer.isReady()) {
    LEDchanged = false;
#ifdef STATUS_LED
    ledBreathing(LEDbreathingState);
    ledBlink(LEDblinkState);
#endif
    if (keepPowerState) keepPower();
    strip.show();
  }
}

// динамическая подсветка светодиодов
void rainbowFlow(bool _state, uint8_t _shotNum) {
  if (parameterList[rainbow_flow]) {
    static float count[NUM_SHOTS] = {0};
    if (!_state) {
      count[_shotNum] = 0;
      return;
    }
    leds[_shotNum] = mHSV((int)count[_shotNum] + volumeColor[_shotNum] + parameterList[leds_color], 255, 255);
    count[_shotNum] += 0.5;
    LEDchanged = true;
  }
}

#ifdef STATUS_LED
// еффект дыхания светодиода
void ledBreathing(bool _state) {
  static float _brightness = STATUS_LED;
  static int8_t _dir = -1;
  if (!_state) {
    _brightness = STATUS_LED;
    _dir = -1;
    return;
  }
  _brightness += _dir * (STATUS_LED / 50.0);
  if (_brightness < 0) {
    _brightness = 0;
    _dir = 1;
  }
  else if (_brightness > STATUS_LED) {
    _brightness = STATUS_LED;
    _dir = -1;
  }
  if (workMode == ManualMode) LED = mHSV(manualModeStatusColor, 255, _brightness);
  else LED = mHSV(autoModeStatusColor, 255, _brightness);

  LEDchanged = true;
}

// моргание светодиода
void ledBlink(bool _state) {
  if (!_state) return;

  static bool _blink = true;

  if (timer100.isReady()) _blink = !_blink;

  LED = mHSV(11, 255, STATUS_LED * _blink); // orange

  LEDchanged = true;
}
#endif /* STATUS_LED */

// поддержание питания от повербанка
void keepPower() {
  static bool _dir = 1;
  static float _brightness = 1;
  uint8_t stby_brightness = 0;

  if (parameterList[stby_light] > 0) {
    if (timeoutState) stby_brightness = parameterList[stby_light];
    else if (POWEROFFtimer.isOn()) stby_brightness = parameterList[stby_light] / 2;
  }

  if (_brightness >= (255 - stby_brightness) ) {
    _brightness = 255 - stby_brightness;
    _dir = 0;
  }

  for (byte i = NUM_SHOTS - 1; i*2 > 0; i--) leds[i] = leds[i - 1];
  leds[0] = mHSV(parameterList[leds_color], 255, stby_brightness + (int)_brightness);

  if (_dir) _brightness *= 1.5;
  else      _brightness /= 1.5;

  if (_brightness <= 1) {
    _brightness = 1;
    _dir = 1;
    keepPowerState = 0;
    for (byte i = 0; i*2 < NUM_SHOTS; i++)
      leds[i] = mHSV(parameterList[leds_color], 255, stby_brightness);
    strip.show();
  }

  LEDchanged = true;
}

// функции для работы с акб
#ifdef BATTERY_PIN
// фильтрация показаний напряжения
float filter(float value) {
  static float k = 1.0, filteredValue = 4.0;
  if (battery_voltage < (BATTERY_LOW)) k = 1.0;
  else k = 0.1;
  filteredValue = (1.0 - k) * filteredValue + k * value;
  return filteredValue;
}

// проверка статуса зарядки
#ifdef CHARGER_PIN
bool charging() {
  return ( (analogRead(CHARGER_PIN) * 4.7 / 1023) >= 4.0) ? 1 : 0; // зарядка подключена, если напряжение > 4.0 вольт
}
#endif

// получение напряжения с ацп
float get_battery_voltage() {
  battery_voltage = filter(analogRead(BATTERY_PIN) * (4.7 * battery_cal) / 1023);
  return battery_voltage;
}

// преобразование напряжение в процент заряда акб
uint8_t get_battery_percent() {
  static uint8_t percent = 0;
  if (battery_voltage >= 4.00) percent = 5;
  else if (battery_voltage >= 3.90) percent = 4;
  else if (battery_voltage >= 3.80) percent = 3;
  else if (battery_voltage >= 3.70) percent = 2;
  else if (battery_voltage >= 3.30) percent = 1;
  else percent = 0;
  return percent;
}

// мониторинг напряжения
bool battery_watchdog() {
  static uint32_t lastMillis = 0;
  static bool batOk, lastOkStatus = 1;

  if (millis() - lastMillis >= 1000) {
    lastMillis = millis();

    batOk = (get_battery_voltage() < (float)BATTERY_LOW) ? 0 : 1;
    if (!batOk) {
      if (systemState == PUMPING) {
        pumpOFF();                      // помпа выкл
        shotStates[curPumping] = READY; // налитая рюмка, статус: готов
        curPumping = -1;                // снимаем выбор рюмки
        systemState = WAIT; // режим работы - ждать
        WAITtimer.reset();
        systemON = false;
      }
      for (byte i = 0; i*2 < NUM_SHOTS; i++) leds[i] = mHSV(20, 255, 0);
#ifdef STATUS_LED
      LED = mHSV(0, 0, 0);
#endif
      strip.show();
      timeoutState = false;
#ifdef TM1637
      disp.brightness(0);
      disp.displayByte(0x39, 0x09, 0x09, 0x0F);
      delay(500);
      disp.displayByte(0x00, 0x00, 0x00, 0x00);
#elif defined OLED
      showMenu = false;
      menuItem = 1;
      lastMenuPage = NO_MENU;
      menuPage = MAIN_MENU_PAGE;
      if (parameterList[invert_display]) disp.invertDisplay(false);
#endif
    }
    else if (!lastOkStatus) {
#ifdef OLED
      progressBar(-1);
#endif
      timeoutReset();
    }
    lastOkStatus = batOk;
  }
#ifdef OLED
  if (POWEROFFtimer.isOn() || timeoutState || !batOk) displayBattery(batOk);
#endif
  return batOk;
}

#ifdef OLED
// функция вывода иконки акб
void displayBattery(bool batOk) {
  if ( batOk && showMenu ) return;

  static uint32_t currentMillis, lastDisplay = 0, lastBlink = 0;
  static bool blinkState = true;
  currentMillis = millis();
  disp.setFont(Battery12x22);

  if ( (currentMillis - lastDisplay >= 1000) && batOk) {
    lastDisplay = currentMillis;

#ifdef CHARGER_PIN
    if (charging()) {
      static byte index = 0;
      if (index == 6) index = 0;
      printInt(index, Right, 0);
      index++;
      lastDisplay -= 250;
    }
    else
#endif
      printInt(get_battery_percent(), Right, 0);
  }
  else if ( (currentMillis - lastBlink >= 500) && !batOk) {
    lastBlink = currentMillis;
    blinkState = !blinkState;
    if (blinkState) printInt(get_battery_percent(), Right, 0);
    else disp.clear();
  }
}
#endif /* OLED */
#endif /* BATTERY_PIN */


=== Файл: eeprom.ino ===

#if defined TM1637 || defined ANALOG_METER
#define EEPROM_KEY (byte)(VERSION * 10)
#elif defined OLED
#define EEPROM_KEY (byte)(VERSION * 10 + 1)
#endif


void readEEPROM() {

  if (EEPROM.read(100) != EEPROM_KEY) {
    EEPROM.write(100, EEPROM_KEY);
    resetEEPROM();
    serviceBoot = true;
  }

#ifdef TM1637
  thisVolume = min(EEPROM.read(eeAddress._thisVolume), MAX_VOLUME);  // чтение последнего налитого объёма
#elif defined OLED
  thisVolume = min(EEPROM.read(eeAddress._thisVolume), EEPROM.read(eeAddress._max_volume));  // чтение последнего налитого объёма
#endif
  for (byte i = 0; i < NUM_SHOTS; i++) shotVolume[i] = thisVolume;

  EEPROM.get(eeAddress._time50ml, time50ml);  // чтение значения таймера для 50мл
  volumeTick = 20.0 * 50.0 / time50ml;

  for (byte i = 0; i < NUM_SHOTS; i++) shotPos[i] = EEPROM.read(eeAddress._shotPos + i);  // чтение позиций серво над рюмками

  parking_pos = EEPROM.read(eeAddress._parking_pos);  // чтение парковочной позиции

#if(SAVE_MODE == 1)
  workMode = (workModes)EEPROM.read(eeAddress._workMode); // режим
#endif

#ifdef BATTERY_PIN
  EEPROM.get(eeAddress._battery_cal, battery_cal);  // чтение калибровки аккумулятора
#endif

#ifdef TM1637
  animCount = EEPROM.read(eeAddress._animCount);  // чтение текущей анимации
  if (animCount > 7) animCount = 0;
  EEPROM.update(eeAddress._animCount, animCount + 1);
#endif

#ifdef OLED
  //╞═════════════════════╡ Чтение параметров меню настроек ╞══════════════════════╡

  parameterList[timeout_off] = EEPROM.read(eeAddress._timeout_off); // чтение значения таймаута

  parameterList[stby_time] = EEPROM.read(eeAddress._stby_time); // чтение таймаута режима ожидания

  parameterList[stby_light] = EEPROM.read(eeAddress._stby_light); // чтение яркости подсветки в режиме ожидания

  parameterList[leds_color] = EEPROM.read(eeAddress._leds_color); // цвет светодиодов

  parameterList[rainbow_flow] = EEPROM.read(eeAddress._rainbow_flow); // чтение установки динамической подсветки

  parameterList[invert_display] = EEPROM.read(eeAddress._invert_display); // инверсия дисплея
  disp.invertDisplay((bool)parameterList[invert_display]);

  parameterList[oled_contrast] = EEPROM.read(eeAddress._oled_contrast); // яркость олед дисплея
  disp.setContrast(parameterList[oled_contrast]);

  parameterList[max_volume] = EEPROM.read(eeAddress._max_volume); // чтение максимального объёма

  //╞═══════════════════╡ Чтение параметров сервисного меню ╞═════════════════════╡

  parameterList[keep_power] = EEPROM.read(eeAddress._keep_power); // функция пинания повербанка

  parameterList[motor_reverse] = EEPROM.read(eeAddress._motor_reverse); // чтение установки инверсии серво

  parameterList[motor_speed] = EEPROM.read(eeAddress._motor_speed); // скорость сервопривода

  parameterList[auto_parking] = EEPROM.read(eeAddress._auto_parking); // чтение установки автопарковки в авторежиме

  //╞═══════════════════════════╡ Чтение статистики ╞═════════════════════════════╡

  EEPROM.get(eeAddress._volume_overall, volume_overall); // общий объём после сброса
#endif
}

void resetEEPROM() {
  EEPROM.update(100, EEPROM_KEY); // флаг сброса памяти

  EEPROM.update(eeAddress._thisVolume, INIT_VOLUME);  // сброс последнего значения объёма

  EEPROM.put(eeAddress._time50ml, TIME_50ML); // сброс калибровки времени на 50мл

  for (byte i = 0; i < NUM_SHOTS; i++) {  // сброс позиций серво над рюмками
    EEPROM.update(eeAddress._shotPos + i, initShotPos[i]);
    shotPos[i] = initShotPos[i];
  }

  EEPROM.update(eeAddress._parking_pos, PARKING_POS); // сброс парковочной позиции

  EEPROM.update(eeAddress._workMode, ManualMode); // сброс режима
  workMode = ManualMode;

#ifdef BATTERY_PIN
  EEPROM.put(eeAddress._battery_cal, BATTERY_CAL);  //сброс калибровки аккумулятора
#endif

#ifdef OLED
  EEPROM.update(eeAddress._timeout_off, TIMEOUT_OFF); // сброс значения таймаута

  EEPROM.update(eeAddress._stby_time, TIMEOUT_STBY);  // сброс таймаута режима ожидания

  EEPROM.update(eeAddress._keep_power, KEEP_POWER); // сброс функции поддержания питания от повербанка

  EEPROM.update(eeAddress._motor_reverse, MOTOR_REVERSE); // сброс инверсии серво

  EEPROM.update(eeAddress._motor_speed, MOTOR_SPEED); // сброс скорости сервопривода

  EEPROM.update(eeAddress._auto_parking, AUTO_PARKING); // сброс установки автопарковки в авторежиме

  EEPROM.update(eeAddress._max_volume, MAX_VOLUME); // сброс максимального объёма

  EEPROM.update(eeAddress._stby_light, STBY_LIGHT); // сброс яркости подсветки в режиме ожидания

  EEPROM.update(eeAddress._rainbow_flow, RAINBOW_FLOW); // сброс установки динамической подсветки

  EEPROM.update(eeAddress._invert_display, INVERT_DISPLAY); // сброс инвертирования дисплея

  EEPROM.update(eeAddress._leds_color, ledsColor);  // сброс цвета светодиодов

  EEPROM.update(eeAddress._oled_contrast, OLED_CONTRAST); // сброс яркости олед дисплея
#endif
}


=== Файл: e_control.ino ===


void encTick() {
  enc.tick();
  if (systemState == PUMPING) return;
  if (enc.isTurn()) {
    if (enc.isLeftH()) {
      if (curSelected >= 0 && shotVolume[curSelected] < 246) shotVolume[curSelected] += 10;
      else if (thisVolume < 246) thisVolume += 10;
      volumeChanged = true;
    }
    if (enc.isRightH()) {
      if (curSelected >= 0 && shotVolume[curSelected] > 10) shotVolume[curSelected] -= 10;
      else if (thisVolume > 10) thisVolume -= 10;
      volumeChanged = true;
    }
    if (enc.isLeft()) {
      if (showMenu) menuItem++;
      else {
        if (curSelected >= 0) shotVolume[curSelected] += 1;
        else if (thisVolume < 255) thisVolume += 1;
        volumeChanged = true;
      }
    }

    if (enc.isRight()) {
      if (showMenu) menuItem--;
      else {
        if (curSelected >= 0) shotVolume[curSelected] -= 1;
        else thisVolume -= 1;
        volumeChanged = true;
      }
    }

#ifdef OLED
    if (showMenu) {
      displayMenu();
      timeoutReset();
      return;
    }
#endif

    if (curSelected >= 0) {
      shotVolume[(byte)curSelected] = constrain(shotVolume[(byte)curSelected], 1, parameterList[max_volume]);
      printNum(shotVolume[curSelected], ml);
#ifdef OLED
      progressBar(shotVolume[curSelected], parameterList[max_volume]);
#endif
    }
    else {
      thisVolume = constrain(thisVolume, 1, parameterList[max_volume]);
      if (timeoutState) {
        printNum(thisVolume, ml);
      }
#ifdef OLED
      progressBar(thisVolume, parameterList[max_volume]);
#endif
      for (byte i = 0; i < NUM_SHOTS; i++) shotVolume[i] = thisVolume;
    }

    timeoutReset();
  }
}

// активация/остановка налива
void btnTick() {
#ifdef OLED
  //  static byte pressCount = 0; // счётчик нажатий
  //  static long lastPressedMillis = 0; // время последнего нажатия на кнопку
#endif

  if (btn.pressed()) { // нажатие на основную кнопку
    timeoutReset(); // таймаут сброшен

    if (systemState == PUMPING) {
      pumpOFF();                      // помпа выкл
      shotStates[curPumping] = READY; // налитая рюмка, статус: готов
      curPumping = -1;                // снимаем выбор рюмки
#ifdef OLED
      shots_session++;
      volume_overall += actualVolume;
      displayVolume();
      EEPROM.put(eeAddress._volume_overall, volume_overall);
#endif
      systemState = WAIT; // режим работы - ждать
      WAITtimer.reset();
      return;
    }
    if ((workMode == ManualMode) && !showMenu) systemON = true; // система активирована
#ifdef OLED
    if (showMenu) {
      if (menuPage != MAIN_MENU_PAGE && menuPage != SERVICE_PAGE) {
        if (menuPage == SERVO_CALIBRATION_PAGE) {
          menuItem = 1;
          menuPage = SERVICE_PAGE;
        }
        else {
          menuItem = menuPage + 1;
          menuPage = MAIN_MENU_PAGE;
        }
        displayMenu();
      }
      else {
        disp.clear();
        showMenu = 0;
        menuItem = 1;
        lastMenuPage = NO_MENU;
        menuPage = MAIN_MENU_PAGE;
        progressBar(-1);
        displayMode(workMode);
        displayVolume();
        timeoutState = true;
      }
    }
    //    else {  // считаем количество нажатий только на основном экране. Время между кликами 100-500 мс
    //      if ( (millis() - lastPressedMillis > 100) && (millis() - lastPressedMillis < 500) ) pressCount++;
    //      else pressCount = 1;
    //      lastPressedMillis = millis();
    //    }

#endif
  }

  // смена режима/вход в меню
  //if (btn.holded() || (encBtn.holded() && shotCount == 0)) {
  if (btn.holded()) {
    if (systemState == PUMPING) return;
    timeoutReset();
#ifdef TM1637
    workMode = (workModes)!workMode;
    if (thisVolume < 100) {                                // объём меньше 100
      if (thisVolume < 10)
        disp.scrollByte(workMode * _dash, 0, digToHEX(thisVolume % 10), workMode * _dash, 50);  // число меньше 10 - второй индикатор пуст
      else
        disp.scrollByte(workMode * _dash, digToHEX(thisVolume / 10), digToHEX(thisVolume % 10), workMode * _dash, 50);     // иначе статичное изменение
    }
    else disp.scrollByte(digToHEX(thisVolume / 100), digToHEX((thisVolume % 100) / 10), digToHEX(thisVolume % 10), workMode * _dash, 50); // объём больше 99
#elif defined OLED
    showMenu = !showMenu;
    if (showMenu) displayMenu();
    else {
      disp.clear();
      menuItem = 1;
      lastMenuPage = NO_MENU;
      menuPage = MAIN_MENU_PAGE;
      progressBar(-1);
      displayMode(workMode);
      displayVolume();
    }
#elif defined ANALOG_METER
    workMode = (workModes)!workMode;
#endif /* ANALOG_METER */
  }

  // промывка
  if (encBtn.holding() && (shotCount == 1) ) {
    if (workMode == AutoMode) return;
#ifdef OLED
    printNum(actualVolume, ml);
    progressBar(0);
#endif
    prePump();
  }

  // выбор елемента меню
#ifdef OLED
  if (encBtn.pressed() && showMenu) {
    itemSelected = 1;
    displayMenu();
  }
#endif

  // выбор рюмки
  if (encBtn.clicked() && !showMenu) {  // нажали на энкодер не в меню
    if (systemState == PUMPING) { // если нажали на энкодер во время налива - останавливаем налив
      pumpOFF();                      // помпа выкл
      shotStates[curPumping] = READY; // налитая рюмка, статус: готов
      curPumping = -1;                // снимаем выбор рюмки
#ifdef OLED
      shots_session++;
      volume_overall += actualVolume;
      displayVolume();
      EEPROM.put(eeAddress._volume_overall, volume_overall);
      //      EEPROM.put(eeAddress._shots_session, shots_session);
      //      EEPROM.put(eeAddress._volume_session, volume_session);
#endif
      systemState = WAIT; // режим работы - ждать
      WAITtimer.reset();
      timeoutReset();
      return;
    }

    if (shotCount < 2) return;  // если стоит только одна стопка, выходим из функции

    // выбор объёма определённой рюмки
    for (int8_t i = selectShot + 1; i <= NUM_SHOTS; i++) {
      if (i == NUM_SHOTS) {
        selectShot = -1;
        break;
      }
      else if (shotStates[(byte)i] == EMPTY) {
        selectShot = i;
        break;
      }
    }

    curSelected = selectShot;

    for (byte i = 0; i < NUM_SHOTS; i++) {
      if (i == curSelected) strip.setLED(curSelected, mRGB(255, 255, 255)); // white
      else if (shotStates[i] == EMPTY)  strip.setLED(i, mHSV(parameterList[leds_color], 255, 255));
      //else  strip.setLED(i, mHSV(20, 255, parameterList[stby_light]));
    }
    LEDchanged = true;

    if (curSelected >= 0) {
      printNum(shotVolume[curSelected], ml);
#ifdef OLED
      progressBar(shotVolume[curSelected], parameterList[max_volume]);
#endif
    }
    else  {
      printNum(thisVolume, ml);
#ifdef OLED
      progressBar(thisVolume, parameterList[max_volume]);
#endif
    }

    timeoutReset();
  }

  //#ifdef OLED
  //  if (pressCount == 2) {
  //    workMode = (workModes)!workMode;
  //    displayMode(workMode);
  //    timeoutReset();
  //    pressCount = 0;
  //  }
  //#endif


  // сброс настроек
  if (btn.holdedFor(5)) {
    if (systemState == PUMPING) return;
#if defined TM1637
    byte resetText[] = {_r, _E, _S, _E, _t};
    disp.runningString(resetText, sizeof(resetText), 150);
#elif defined OLED
    disp.clear();
    disp.setFont(MAIN_FONT);
#if(MENU_LANG == 0)
    disp.setLetterSpacing(0);
#endif
    printStr("Сброс настроек", Center, 3);
#endif
    while (!digitalRead(BTN_PIN));
    resetEEPROM();
    readEEPROM();
#ifdef OLED
    disp.clear();
    showMenu = false;
    lastMenuPage = NO_MENU;
    timeoutReset();
    progressBar(-1);
    displayVolume();
#endif
#if (MOTOR_TYPE == 0)
    servoON();
    servo.attach(SERVO_PIN, parking_pos, SERVO_MIN_US, SERVO_MAX_US);
    delay(500);
    servoOFF();
#elif (MOTOR_TYPE == 1)
    stepper.setTargetDeg(parking_pos);
    while (stepper.getState());
#endif
  }
}


=== Файл: GyverDrink_VICLER_MOD.ino ===

//GyverDrink VICLER_MOD
#define VERSION 7.8
#define DISPLAY_VERSION 1
//29.11.2021
/*
  ==============================================================================================
  Модифицированная версия прошивки к проекту "Наливатор by AlexGyver" с расширенным функционалом
  ==============================================================================================

   ⚠ Все настройки в файле Config.h ⚠
   ! Все схемы подключений находятся в файле Config.h в секции Соединения !


   ⚫ Arduino Nano в качестве управляющего микроконтроллера (ATmega 328P).

   ⚫ Поддержка двух типов дисплея:
        OLED на контроллере SSD1306 (0.96"), SH1106(1.3") или SSD1309 (2.42").
        Подключение по I2C:  SCK -> A5
                             SDA -> A4
                             RES -> RST
                             DC  -> GND
                             CS  -> GND
        Подключение по SPI:  CLK -> A5
                             SDA -> A4
                             RES -> RST
                             DC  -> 0
                             CS  -> GND

        4х символьный, 7-сегментный на контроллере TM1637.
        Подключение:  DIO -> 11
                      CLK -> 12
   ⚫ Шаговый двигатель с драйвером типа StepStick (A4899, DRV8825, LV8729, TMC2100/2208/2209) или серво.

   ⚫ Прокачка. Поставьте рюмку, нажмите и удерживайте кнопку энкодера.
        Прокачка проводится только в ручном режиме и только при наличии рюмки.
        Возврат крана в домашнее положение и сброс счётчика объёма жидкости происходит после снятия рюмки.

   ⚫ Режим изменяется удержанием основной кнопки в течении полусекунды.
        Ручной режим: разлив начинается только после однократного нажатия на основную кнопку.
        Авто режим: разлив начинается автоматически сразу после установки рюмки.

   ⚫ Возможность настроить объём для каждой рюмки отдельно:
        Функция активна только если количество поставленных рюмок > 1
        При однократном нажатии на энкодер подсвечивается место рюмки, объём которой изменяется вращением энкодера. При повторном нажатии подсвечивается следующая установленная рюмка.
        Если же ни одна рюмка не подсвечивается белым, вращение энкодера изменяет объём для всех рюмок одновременно (как в обычном ручном режиме).

   ⚫ Разлив можно остановить в любое время нажатием на основную кнопку.

   ⚫ Последний выбранный объём сохраняется сразу после налива первой рюмки.

   ⚫ Дополнительный статус-светодиод подключается к светодиоду последней рюмки, активируется в STATUS_LED. Служит для индикации режимов работы.

   ⚫ Индикация заряда аккумулятора и слежение за напряжением.
        Активируется раскоментированием строки #define BATTERY_PIN ...
        При напряжении, меньшем чем BATTERY_LOW (по умолчанию 3.3В), устройство перестаёт реагировать на внешние воздействия и на дисплее мигает иконка батареи.
        Если при первом включении мигает иконка аккумулятора, но напряжение в порядке(больше, чем BATTERY_LOW) -> нажмите и удерживайте кнопку до появления меню калибровки аккумулятора.
        Для отслеживания статуса зарядки, IN+ с модуля заряда TP4056 нужно подключить к пину A6. При зарядке появится анимация заряда акб.

   ⚫ Стартовая анимация и динамическая подсветка рюмок во время и после налива.


  ================================================
  ■■■■■ Особенности версии на TM1637 дисплее ■■■■■
  ================================================
  Сервис режим.
   ⚫ Вход в сервис режим осуществляется удержанием основной кнопки выбора режима во время стартовой анимации до появления на дисплее надписи "SerViCE". После отпускания кнопки на дисплее появится номер этапа калибровки:

      -1-   На этом этапе производится настройка положений сервопривода над рюмками.
          1. Уберите все рюмки. На дисплее отобразится положение парковочной позиции в градусах. При этом по краям дисплея будут отображенны штрихи (при градусе > 99, штрих только с правой стороны).
          2. Вращением энкодера измените положение парковочной позиции
          3. Поставьте рюмку. На дисплее отобразится номер рюмки и позиция в градусах. Вращением энкодера подстройте положение точно над рюмкой. Уберите рюмку.
          4. Повторите предыдущий пункт для всех остальных рюмок.
          5. После настройки позиций для всех рюмок нажмите основную кнопку изменения режима пока на дисплее не появится номер следующего этапа калибровки.

      -2-   На этом этапе производится калибровка таймера для налития 50мл.
          1. Поставьте рюмку в любое положение. Кран встанет над этой рюмкой.
          2. Нажатием на кнопку энкодера включится помпа. Удерживайте до тех пор, пока не польётся жидкость.
          3. Снимите рюмку и поставьте пустую в любое положение.
          4. Удерживайте кнопку энкодера, пока не нальётся ровно 50мл.
          5. Снимите рюмку. Нажмите основную кнопку изменения режима. Если мониторинг АКБ активен, на дисплее отобразится следующий номер этапа калибровки. В обратном случае калибровка оконченна. На дисплее отобразится основной объём.

      -3-   На этом этапе производится калибровка напряжения аккумулятора.
          1. На дисплее отобразится напряжение аккумулятора в [mV].
          3. Вращением энкодера подстройте отображаемое напряжение до измеренного вольтметром.
          4. Нажмите основную кнопку изменения режима. Калибровка оконченна. На дисплее отобразится основной объём.

   ⚫ При зажатии кнопки выбора режима более 5 секунд, происходит сброс настроек из памяти (TIME_50ML, SHOT_POSITIONS, PARKING_POS и BATTERY_CAL) до первоначальных, прописанных в Config.h.


  ==============================================
  ■■■■■ Особенности версии на OLED дисплее ■■■■■
  ==============================================

   ⚫ Наличие полноценного, графического меню. Вход/Выход зажатием основной кнопки более полусекунды. Выход из подменю в основное однократным нажатием.

   ⚫ Калибровка объёма за единицу времени, калибровка углов сервопривода для рюмок и калибровка напряжения аккумулятора осуществляется в сервисном меню. Вход в сервисное меню осуществляется зажатием основной кнопки во время стартовой анимации.

   ⚫ Возможность изменять настройки прошивки прямо в меню. Для этого нажмите на кнопку энкодера на параметре и вращением измените его значение.

   ⚫ Ведение статистики. Количество налитых рюмок и общий объём. При нажатии на кнопку энкодера, выбранное значение сбрасывается.


  =====================================================================================================

   ₽$€ На чашечку кофе автору:        http://paypal.me/vicler или viktorglekler@googlemail.com (PayPal)

   ★ Исходники на GitHub:             https://github.com/VICLER/GyverDrink

   ★ Оригинальный проект AlexGyver:   https://alexgyver.ru/GyverDrink/

   ====================================================================================================
*/

#ifndef __AVR_ATmega328P__
#error "Not ATmega328P board!"
#endif

//╞══════════════════════════════════════════════════════════════════════════════╡LIBS╞══════════════════════════════════════════════════════════════════════════════╡

//#define USE_TICOSERVO   // использование библиотеки Adafruit_TiCoServo вместо стандартной Servo. При использовании серводвигатель подключать к пину 9 или 10!
#include "Config.h"
#if (DISPLAY_TYPE < 2)
#include "src/microWire/microWire.h"
#include "src/SSD1306Ascii/src/SSD1306Ascii.h"
#include "src/SSD1306Ascii/src/SSD1306AsciiWire.h"
#elif (DISPLAY_TYPE == 2)
#include <SPI.h>
#include "src/SSD1306Ascii/src/SSD1306Ascii.h"
#include "src/SSD1306Ascii/src/SSD1306AsciiSoftSpi.h"
#elif (DISPLAY_TYPE == 3)
#include "src/GyverTM1637/GyverTM1637.h"
#endif
#if (MOTOR_TYPE == 0)
#include "src/ServoSmoothMinim.h"
#elif (MOTOR_TYPE == 1)
#include "src/GyverStepper.h"
#endif
#include "src/GyverTimers/GyverTimers.h"
#include "src/microLED/microLED.h"
#include "src/encUniversalMinim.h"
#include "src/buttonMinim.h"
#include "src/timer2Minim.h"
#include <EEPROM.h>

//╞══════════════════════════════════════════════════════════════════════════════╡DATA╞══════════════════════════════════════════════════════════════════════════════╡

#ifdef STATUS_LED
#define statusLed 1
#else
#define statusLed 0
#endif
LEDdata leds[NUM_SHOTS + statusLed];                  // буфер ленты типа LEDdata
microLED strip(leds, NUM_SHOTS + statusLed, LED_PIN); // объект лента
#if (MOTOR_TYPE == 0)
ServoSmoothMinim servo;
#elif (MOTOR_TYPE == 1)
GStepper<STEPPER2WIRE> stepper(STEPS_PER_REVOLUTION * MICROSTEPS, STEPPER_STEP, STEPPER_DIR, STEPPER_EN);
#endif
encMinim enc(ENC_CLK, ENC_DT, ENC_SW, ENCODER_DIR, ENCODER_TYPE); // пин clk, пин dt, пин sw, направление (0/1), тип (0/1)
buttonMinim btn(BTN_PIN);
buttonMinim encBtn(ENC_SW);

timerMinim LEDtimer(30);
timerMinim FLOWdebounce(20);
timerMinim FLOWtimer(2000);
timerMinim WAITtimer(PAUSE_TIME);
timerMinim TIMEOUTtimer(TIMEOUT_STBY * 1000L); // таймаут режима ожидания
timerMinim POWEROFFtimer(TIMEOUT_OFF * 60000L);
timerMinim KEEP_POWERtimer(KEEP_POWER * 1000L);


#define INIT_VOLUME 25
bool LEDchanged = false;
bool pumping = false;
int8_t curPumping = -1;
int8_t curSelected = -1;
int8_t selectShot = -1;
uint8_t shotCount = 0;
enum { NO_GLASS, EMPTY, IN_PROCESS, READY } shotStates[NUM_SHOTS];
enum { SEARCH, MOVING, WAIT, PUMPING } systemState;
enum serviceStates { POSITION, VOLUME, BATTERY } serviceState;
enum workModes { ManualMode, AutoMode } workMode;
uint16_t time50ml = TIME_50ML;
uint8_t thisVolume = INIT_VOLUME;
uint8_t shotVolume[NUM_SHOTS];
uint16_t initShotPos[] = {SHOT_POSITIONS};
uint16_t shotPos[] = {SHOT_POSITIONS};
const byte SW_pins[] = {SW_PINS};
float volumeTick = 20.0 * 50.0 / time50ml;  // volume in one FLOWdebounce timer tick
uint8_t actualVolume = 0;
float volumeCounter = 0;
bool systemON = false;
bool timeoutState = false;
bool parking = false;
bool LEDbreathingState = false;
bool LEDblinkState = false;
float battery_voltage = 4.2;
float battery_cal = BATTERY_CAL;
bool keepPowerState = false;
bool volumeChanged = true;
uint8_t parking_pos = PARKING_POS;
uint8_t animCount = 7;
bool showMenu = 0;
uint8_t menuItem = 1;
byte volumeColor[NUM_SHOTS];
const int ledsColor = LEDS_COLOR / 360.0 * 255;
const int manualModeStatusColor = MANUAL_MODE_STATUS_COLOR / 360.0 * 255;
const int autoModeStatusColor = AUTO_MODE_STATUS_COLOR / 360.0 * 255;
bool prepumped = false;
bool serviceBoot = false;
bool dispSTBicon = false;



#if(DISPLAY_TYPE < 3) // OLED
int16_t shots_session = 0, volume_overall = 0;
float volume_session = 0;
char bootscreen[] = {BOOTSCREEN};
#endif

// названия параметров в меню настроек OLED
enum
{
  timeout_off = 0,
  stby_time,
  stby_light,
  leds_color,
  rainbow_flow,
  invert_display,
  oled_contrast,
  max_volume,
  // доступны из сервисного меню
  motor_reverse,
  motor_speed,
  auto_parking,
  keep_power
};
// массив параметров в меню настроек OLED
uint8_t parameterList[] = {
  TIMEOUT_OFF,
  TIMEOUT_STBY,
  STBY_LIGHT,
  ledsColor,
  RAINBOW_FLOW,
  INVERT_DISPLAY,
  OLED_CONTRAST,
  MAX_VOLUME,
  // доступны из сервисного меню
  MOTOR_REVERSE,
  MOTOR_SPEED,
  AUTO_PARKING,
  KEEP_POWER
};


// расчёт адрессных ячеек для сохранения параметров
const struct EEPROMAddress
{
  const byte _thisVolume = 0;
  const byte _time50ml = _thisVolume + sizeof(thisVolume);
  const byte _shotPos = _time50ml + sizeof(time50ml);  
  const byte _battery_cal = _shotPos + sizeof(byte);
  const byte _animCount = _battery_cal + sizeof(battery_cal);
  //const byte _parking_pos = _shotPos*2 + sizeof(byte) * NUM_SHOTS;
  //const byte _workMode = _parking_pos*2 + sizeof(parking_pos);
#if(DISPLAY_TYPE < 3) // OLED
  const byte _timeout_off = _animCount + sizeof(animCount);
  const byte _stby_time = _timeout_off + sizeof(parameterList[timeout_off]);
  const byte _keep_power = _stby_time + sizeof(parameterList[stby_time]);
  const byte _motor_reverse = _keep_power + sizeof(parameterList[keep_power]);
  const byte _motor_speed = _motor_reverse + sizeof(parameterList[motor_reverse]);
  const byte _auto_parking = _motor_speed + sizeof(parameterList[motor_speed]);
  const byte _max_volume = _auto_parking + sizeof(parameterList[auto_parking]);
  const byte _stby_light = _max_volume + sizeof(parameterList[max_volume]);
  const byte _rainbow_flow = _stby_light + sizeof(parameterList[stby_light]);
  const byte _invert_display = _rainbow_flow + sizeof(parameterList[rainbow_flow]);
  const byte _leds_color = _invert_display + sizeof(parameterList[invert_display]);
  const byte _oled_contrast = _leds_color + sizeof(parameterList[leds_color]);
  const byte _volume_overall = _oled_contrast + sizeof(parameterList[oled_contrast]);
  const byte _parking_pos = _shotPos*2 + sizeof(byte) * NUM_SHOTS;
  const byte _workMode = _parking_pos*2 + sizeof(parking_pos);
#endif
} eeAddress;



//╞══════════════════════════════════════════════════════════════════════════════╡MACROS╞══════════════════════════════════════════════════════════════════════════════╡

#define servoON() digitalWrite(SERVO_POWER, 1)
#define servoOFF() digitalWrite(SERVO_POWER, 0)
#define pumpON() digitalWrite(PUMP_POWER, 1)
#define pumpOFF() digitalWrite(PUMP_POWER, 0)
/////////присираем реверс/////////
#define pumpRevON() digitalWrite(PUMP_REVERCE, 1)
#define pumpRevOFF() digitalWrite(PUMP_REVERCE, 0)

#ifdef STATUS_LED
#define LED leds[NUM_SHOTS]
#endif

#if (MOTOR_TYPE == 1) && defined STEPPER_ENDSTOP
#define ENDSTOP_STATUS (!digitalRead(STEPPER_ENDSTOP))
#endif


=== Файл: tm1637.ino ===

#ifdef TM1637

uint8_t AnimationData_0[20][4] {
  {0x63, 0x00, 0x00, 0x00},       //-
  {0x00, 0x63, 0x00, 0x00},       // -
  {0x00, 0x00, 0x63, 0x00},       //  -
  {0x00, 0x00, 0x00, 0x63},       //   -
  {0x63, 0x00, 0x00, 0x63},       //-  -
  {0x00, 0x63, 0x00, 0x63},       // - -
  {0x00, 0x00, 0x63, 0x63},       //  --
  {0x63, 0x00, 0x63, 0x63},       //- --
  {0x00, 0x63, 0x63, 0x63},       // ---
  {0x63, 0x63, 0x63, 0x63},       //----
  {0x63, 0x63, 0x63, 0x00},       //---
  {0x63, 0x63, 0x00, 0x63},       //-- -
  {0x63, 0x63, 0x00, 0x00},       //--
  {0x63, 0x00, 0x63, 0x00},       //- -
  {0x63, 0x00, 0x00, 0x63},       //-  -
  {0x63, 0x00, 0x00, 0x00},       //-
  {0x00, 0x63, 0x00, 0x00},       // -
  {0x00, 0x00, 0x63, 0x00},       //  -
  {0x00, 0x00, 0x00, 0x63},       //   -
  {0x00, 0x00, 0x00, 0x00}        //
};
uint8_t AnimationData_1[12][4] {
  {0x40, 0x42, 0x50, 0x40},        //
  {0x50, 0x40, 0x40, 0x42},        //
  {0x58, 0x00, 0x00, 0x43},        //
  {0x18, 0x08, 0x01, 0x03},        //
  {0x08, 0x0c, 0x21, 0x01},        //
  {0x00, 0x4c, 0x61, 0x00},        //
  {0x40, 0x44, 0x60, 0x40},        //
  {0x60, 0x40, 0x40, 0x44},        //
  {0x61, 0x00, 0x00, 0x4c},        //
  {0x21, 0x01, 0x08, 0x0c},        //
  {0x01, 0x03, 0x18, 0x08},        //
  {0x00, 0x43, 0x58, 0x00},        //
};
uint8_t AnimationData_2[12][4] {
  {0x01, 0x01, 0x01, 0x00},        //
  {0x00, 0x01, 0x01, 0x01},        //
  {0x00, 0x00, 0x01, 0x03},        //
  {0x00, 0x00, 0x00, 0x07},        //
  {0x00, 0x00, 0x00, 0x0e},        //
  {0x00, 0x00, 0x08, 0x0c},        //
  {0x00, 0x08, 0x08, 0x08},        //
  {0x08, 0x08, 0x08, 0x00},        //
  {0x18, 0x08, 0x00, 0x00},        //
  {0x38, 0x00, 0x00, 0x00},        //
  {0x31, 0x00, 0x00, 0x00},        //
  {0x21, 0x01, 0x00, 0x00},        //
};
uint8_t AnimationData_3[60][4] {
  {0x31, 0x00, 0x00, 0x00},        //
  {0x23, 0x00, 0x00, 0x00},        //
  {0x07, 0x00, 0x00, 0x00},        //
  {0x0e, 0x00, 0x00, 0x00},        //
  {0x1c, 0x00, 0x00, 0x00},        //
  {0x38, 0x00, 0x00, 0x00},        //

  {0x31, 0x00, 0x00, 0x00},        //
  {0x21, 0x01, 0x00, 0x00},        //
  {0x01, 0x03, 0x00, 0x00},        //
  {0x00, 0x07, 0x00, 0x00},        //
  {0x00, 0x0e, 0x00, 0x00},        //
  {0x08, 0x0c, 0x00, 0x00},        //
  {0x18, 0x08, 0x00, 0x00},        //
  {0x38, 0x00, 0x00, 0x00},        //

  {0x31, 0x00, 0x00, 0x00},        //
  {0x21, 0x01, 0x00, 0x00},        //
  {0x01, 0x01, 0x01, 0x00},        //
  {0x00, 0x01, 0x03, 0x00},        //
  {0x00, 0x00, 0x07, 0x00},        //
  {0x00, 0x00, 0x0e, 0x00},        //
  {0x00, 0x08, 0x0c, 0x00},        //
  {0x08, 0x08, 0x08, 0x00},        //
  {0x18, 0x08, 0x00, 0x00},        //
  {0x38, 0x00, 0x00, 0x00},        //

  {0x31, 0x00, 0x00, 0x00},        //
  {0x21, 0x01, 0x00, 0x00},        //
  {0x01, 0x01, 0x01, 0x00},        //
  {0x00, 0x01, 0x01, 0x01},        //
  {0x00, 0x00, 0x01, 0x03},        //
  {0x00, 0x00, 0x00, 0x07},        //

  {0x00, 0x00, 0x00, 0x0e},        //
  {0x00, 0x00, 0x08, 0x0c},        //
  {0x00, 0x08, 0x08, 0x08},        //
  {0x00, 0x18, 0x08, 0x00},        //
  {0x00, 0x38, 0x00, 0x00},        //
  {0x00, 0x31, 0x00, 0x00},        //
  {0x00, 0x21, 0x01, 0x00},        //
  {0x00, 0x01, 0x01, 0x01},        //
  {0x00, 0x00, 0x01, 0x03},        //
  {0x00, 0x00, 0x00, 0x07},        //

  {0x00, 0x00, 0x00, 0x0e},        //
  {0x00, 0x00, 0x08, 0x0c},        //
  {0x00, 0x00, 0x18, 0x08},        //
  {0x00, 0x00, 0x38, 0x00},        //
  {0x00, 0x00, 0x31, 0x00},        //
  {0x00, 0x00, 0x21, 0x01},        //
  {0x00, 0x00, 0x01, 0x03},        //
  {0x00, 0x00, 0x00, 0x07},        //

  {0x00, 0x00, 0x00, 0x0e},        //
  {0x00, 0x00, 0x00, 0x1c},        //
  {0x00, 0x00, 0x00, 0x38},        //
  {0x00, 0x00, 0x00, 0x31},        //
  {0x00, 0x00, 0x00, 0x23},        //
  {0x00, 0x00, 0x00, 0x07},        //
  {0x00, 0x00, 0x00, 0x0e},        //
  {0x00, 0x00, 0x08, 0x0c},        //
  {0x00, 0x08, 0x08, 0x08},        //
  {0x08, 0x08, 0x08, 0x00},        //
  {0x18, 0x08, 0x00, 0x00},        //
  {0x38, 0x00, 0x00, 0x00}         //
};
uint8_t AnimationData_4[6][4]  {
  {0x63, 0x00, 0x00, 0x5c},        //
  {0x00, 0x63, 0x5c, 0x00},        //
  {0x00, 0x5c, 0x63, 0x00},        //
  {0x5c, 0x00, 0x00, 0x63},        //
  {0x00, 0x5c, 0x63, 0x00},        //
  {0x00, 0x63, 0x5c, 0x00}         //
};
uint8_t AnimationData_5[8][4]  {
  {0x63, 0x00, 0x00, 0x00},        //
  {0x00, 0x63, 0x00, 0x00},        //
  {0x00, 0x00, 0x63, 0x00},        //
  {0x00, 0x00, 0x00, 0x63},        //
  {0x00, 0x00, 0x00, 0x5c},        //
  {0x00, 0x00, 0x5c, 0x00},        //
  {0x00, 0x5c, 0x00, 0x00},        //
  {0x5c, 0x00, 0x00, 0x00}         //
};
uint8_t AnimationData_6[12][4] {
  {0x30, 0x00, 0x00, 0x00},       //|
  {0x00, 0x00, 0x00, 0x00},       //
  {0x40, 0x00, 0x00, 0x00},       //-
  {0x00, 0x40, 0x00, 0x00},       // -
  {0x00, 0x00, 0x40, 0x00},       //  -
  {0x00, 0x00, 0x00, 0x40},       //   -
  {0x00, 0x00, 0x00, 0x06},       //    |
  {0x00, 0x00, 0x00, 0x00},       //
  {0x00, 0x00, 0x00, 0x40},       //   -
  {0x00, 0x00, 0x40, 0x00},       //  -
  {0x00, 0x40, 0x00, 0x00},       // -
  {0x40, 0x00, 0x00, 0x00}        //-
};
uint8_t AnimationData_7[23][4] {
  { 48,   0,   0,   0},
  {121,   0,   0,   0},
  {127,   0,   0,   0},

  {127,  48,   0,   0},
  {127, 121,   0,   0},
  {127, 127,   0,   0},

  {127, 127,  48,   0},
  {127, 127, 121,   0},
  {127, 127, 127,   0},

  {127, 127, 127,  48},
  {127, 127, 127, 121},
  {127, 127, 127, 127},

  { 79, 127, 127, 127},
  {  6, 127, 127, 127},
  {  0, 127, 127, 127},

  {  0,  79, 127, 127},
  {  0,   6, 127, 127},
  {  0,   0, 127, 127},

  {  0,   0,  79, 127},
  {  0,   0,   6, 127},
  {  0,   0,   0, 127},

  {  0,   0,   0,  79},
  {  0,   0,   0,   6},
};

// анимация TM1637
void showAnimation(byte mode) {
  static uint8_t i = 0;
  static int8_t dir = 1;
  if (mode == 0) {
    if (i >= 20) i = 0;
    disp.displayByte(AnimationData_0[i++]);
  }
  else if (mode == 1) {
    if (i >= 12) i = 0;
    disp.displayByte(AnimationData_1[i++]);
  }
  else if (mode == 2) {
    if (i >= 12) i = 0;
    disp.displayByte(AnimationData_2[i++]);
  }
  else if (mode == 3) {
    if (i >= 60) i = 0;
    disp.displayByte(AnimationData_3[i++]);
  }
  else if (mode == 4) {
    if (i >= 6) i = 0;
    disp.displayByte(AnimationData_4[i++]);
  }
  else if (mode == 5) {
    if (i >= 8) i = 0;
    disp.displayByte(AnimationData_5[i++]);
  }
  else if (mode == 6) {
    if (i >= 12) i = 0;
    disp.displayByte(AnimationData_6[i++]);
  }
  else if (mode == 7) {
    if (i == 22) dir = -1;
    else if (i == 0) dir = 1;
    disp.displayByte(AnimationData_7[i += dir]);
  }
}

void printNum(uint16_t num, int8_t mode) {
  if (num < 100) {                                // число меньше 100
    if (num < 10)
      disp.displayByte(workMode * _dash, 0, digToHEX(num % 10), workMode * _dash);  // число меньше 10 - второй индикатор пуст
    else
      disp.displayByte(workMode * _dash, digToHEX(num / 10), digToHEX(num % 10), workMode * _dash);     // иначе статичное изменение
  }
  else if (num < 1000) { // число > 99 и < 1000
    disp.displayByte(digToHEX(num / 100), digToHEX((num % 100) / 10), digToHEX(num % 10), workMode * _dash);
  }
  else if (mode == 0) {
    disp.display(0, num / 1000);              // тысячные
    disp.display(1, (num % 1000) / 100);     // сотые
    disp.display(2, (num % 100) / 10);      // десятые
    disp.display(3, num % 10);             // единицы
  }
  else {
    disp.display(0, num / 1000);                                            // тысячные
    if ( (num % 1000) / 100 > 0 )  disp.display(1, (num % 1000) / 100);     // сотые
    else disp.displayByte(1, 0x00);
    if ( ((num % 100) / 10 > 0) || ((num % 1000) / 100 > 0) )  disp.display(2, (num % 100) / 10);         // десятые
    else disp.displayByte(2, 0x00);
    disp.display(3, num % 10);
  }
}

#endif


=== Файл: src\buttonMinim.h ===

// мини-класс для работы с кнопкой, версия 1.1

#pragma pack(push,1)
typedef struct {
  bool holdedFlag: 1;
  bool btnFlag: 1;
  bool pressF: 1;
  bool clickF: 1;
  bool holdF: 1;
  bool holdedFor: 1;
} buttonMinimFlags;
#pragma pack(pop)

class buttonMinim {
  public:
    buttonMinim(uint8_t pin);
    boolean pressed();
    boolean clicked();
    boolean holding();
    boolean holded();
    boolean holdedFor(uint8_t sec);
  private:
    buttonMinimFlags flags;
    void tick();
    uint32_t _btnTimer;
    byte _pin;
};

buttonMinim::buttonMinim(uint8_t pin) {
  pinMode(pin, INPUT_PULLUP);
  _pin = pin;
}

void buttonMinim::tick() {
  boolean btnState = digitalRead(_pin);
  if (!btnState && !flags.btnFlag && ((uint32_t)millis() - _btnTimer > 90)) {
    flags.btnFlag = true;
    _btnTimer = millis();
    flags.pressF = true;
    flags.holdedFlag = true;
    flags.holdedFor = true;
  }
  if (btnState && flags.btnFlag && ((uint32_t)millis() - _btnTimer < 500) && ((uint32_t)millis() - _btnTimer > 100))
  {
    flags.btnFlag = false;
    _btnTimer = millis();
    flags.clickF = true;
    flags.holdF = false;
  }
  if (flags.btnFlag && ((uint32_t)millis() - _btnTimer > 500)) {
    if (!btnState) {
      flags.holdF = true;
    } else {
      flags.btnFlag = false;
      flags.holdF = false;
      _btnTimer = millis();
    }
  }
}

boolean buttonMinim::pressed() {
  buttonMinim::tick();
  if (flags.pressF) {
    flags.pressF = false;
    return true;
  }
  else return false;
}

boolean buttonMinim::clicked() {
  buttonMinim::tick();
  if (flags.clickF) {
    flags.clickF = false;
    return true;
  }
  else return false;
}

boolean buttonMinim::holding() {
  buttonMinim::tick();
  if (flags.holdF) {
    return true;
  }
  else return false;
}

boolean buttonMinim::holded() {
  buttonMinim::tick();
  if (flags.holdF && flags.holdedFlag) {
    flags.holdedFlag = false;
    flags.pressF = false;
    return true;
  }
  else return false;
}

boolean buttonMinim::holdedFor(uint8_t sec) {
  buttonMinim::tick();
  if (flags.holdF && (millis() - _btnTimer > sec * 1000) && flags.holdedFor) {
    flags.holdedFor = false;
    return true;
  }
  else return false;
}


=== Файл: src\encUniversalMinim.h ===

// мини-класс для работы с энкодером, версия 1.0

class encMinim
{
  public:
    encMinim(uint8_t clk, uint8_t dt, uint8_t sw, boolean dir, boolean type);
    void tick();
    boolean isClick();
    boolean isTurn();
    boolean isRight();
    boolean isLeft();
    boolean isRightH();
    boolean isLeftH();

  private:
    byte _clk, _dt, _sw;
    boolean _type = false;
    boolean _state, _lastState, _turnFlag, _swState, _swFlag, _turnState;
    byte _encState;
    uint32_t _debTimer;
    // 0 - ничего, 1 - лево, 2 - право, 3 - правоНажат, 4 - левоНажат
};

encMinim::encMinim(uint8_t clk, uint8_t dt, uint8_t sw, boolean dir, boolean type) {
  if (dir) {
    _clk = clk;
    _dt = dt;
  } else {
    _clk = dt;
    _dt = clk;
  }
  _sw = sw;
  _type = type;
  pinMode (_clk, INPUT_PULLUP);
  pinMode (_dt, INPUT_PULLUP);
  pinMode (_sw, INPUT_PULLUP);
  _lastState = digitalRead(_clk);
}

void encMinim::tick() {
  _encState = 0;
  _state = digitalRead(_clk);
  _swState = digitalRead(_sw);

  if (_state != _lastState) {
    _turnState = true;
    _turnFlag = !_turnFlag;
    if (_turnFlag || !_type) {
      if (digitalRead(_dt) != _lastState) {
        if (_swState) _encState = 1;
        else _encState = 3;
      } else {
        if (_swState) _encState = 2;
        else _encState = 4;
      }
    }
    _lastState = _state;
  }

  if (!_swState && !_swFlag && millis() - _debTimer > 80) {
    _debTimer = millis();
    _swFlag = true;
    _turnState = false;
  }
  if (_swState && _swFlag && millis() - _debTimer > 80) {
    _debTimer = millis();
    _swFlag = false;
    if (!_turnState) _encState = 5;
  }
}
boolean encMinim::isTurn() {
  if (_encState > 0 && _encState < 5) {
    return true;
  } else return false;
}
boolean encMinim::isRight() {
  if (_encState == 1) {
    _encState = 0;
    return true;
  } else return false;
}
boolean encMinim::isLeft() {
  if (_encState == 2) {
    _encState = 0;
    return true;
  } else return false;
}
boolean encMinim::isRightH() {
  if (_encState == 3) {
    _encState = 0;
    return true;
  } else return false;
}
boolean encMinim::isLeftH() {
  if (_encState == 4) {
    _encState = 0;
    return true;
  } else return false;
}
boolean encMinim::isClick() {
  if (_encState == 5) {
    _encState = 0;
    return true;
  } else return false;
}


=== Файл: src\GyverStepper.h ===

#ifndef GyverStepper_h
#define GyverStepper_h
/*
	GyverStepper - производительная библиотека для управления шаговыми моторами
	Документация: https://alexgyver.ru/gyverstepper/
	- Поддержка 4х пинового (шаг и полушаг) и STEP-DIR драйверов
	- Автоматическое отключение питания при достижении цели
	- Режимы работы:
		- Вращение с заданной скоростью. Плавный разгон и торможение с ускорением
		- Следование к позиции с ускорением и ограничением скорости
		- Следование к позиции с заданной скоростью (без ускорения)
	- Быстрый алгоритм управления шагами
	- Два алгоритма плавного движения
		- Мой планировщик обеспечивает максимальную производительность: 
			скорость до 30'000 шагов/сек с ускорением (активен по умолчанию)
		- Модифицированный планировщик из AccelStepper: максимальную плавность и 
			скорость до 7'000 шагов/сек с ускорением (для активации пропиши дефайн SMOOTH_ALGORITHM)
	
	v1.0
	v1.1 - добавлена возможность плавного управления скоростью в KEEP_SPEED (см. пример accelDeccelButton)
	v1.2 - добавлена поддержка ESP8266
	v1.3 - изменена логика работы setTarget(, RELATIVE)
	v1.4 - добавлена задержка для STEP, настроить можно дефайном DRIVER_STEP_TIME
	v1.5 - пофикшен баг для плат есп
	v1.6 - Исправлена остановка для STEPPER4WIRE_HALF, скорость можно задавать во float (для медленных скоростей)
	v1.7 - Исправлен баг в отрицательной скорости (спасибо Евгению Солодову)
	v1.8 - Исправлен режим KEEP_SPEED
	v1.9 - Исправлена ошибка с esp функцией max
	
	Алгоритм из AccelStepper: https://www.airspayce.com/mikem/arduino/AccelStepper/
	AlexGyver, 2020
*/

/*
// Примечание: далее по тексту под "по умолчанию" имеется в виду "даже если не вызывать функцию"

// Создание объекта
// steps - шагов на один оборот вала (для расчётов с градусами)
// step, dir, pin1, pin2, pin3, pin4 - любые GPIO
// en - пин отключения драйвера, любой GPIO
GStepper<STEPPER2WIRE> stepper(steps, step, dir);						// драйвер step-dir
GStepper<STEPPER2WIRE> stepper(steps, step, dir, en);					// драйвер step-dir + пин enable
GStepper<STEPPER4WIRE> stepper(steps, pin1, pin2, pin3, pin4);			// драйвер 4 пин
GStepper<STEPPER4WIRE> stepper(steps, pin1, pin2, pin3, pin4, en);		// драйвер 4 пин + enable
GStepper<STEPPER4WIRE_HALF> stepper(steps, pin1, pin2, pin3, pin4);		// драйвер 4 пин полушаг
GStepper<STEPPER4WIRE_HALF> stepper(steps, pin1, pin2, pin3, pin4, en);	// драйвер 4 пин полушаг + enable

// Здесь происходит движение мотора, вызывать как можно чаще!
// Имеет встроенный таймер
// Возвращает true, если мотор движется к цели или крутится по KEEP_SPEED
bool tick();

// Инвертировать направление мотора - true (по умолч. false)
void reverse(bool dir);

// инвертировать поведение EN пина - true (по умолч. false)
void invertEn(bool rev);

// Установка режима работы, mode:
// FOLLOW_POS - следование к позиции setTarget(...)
// KEEP_SPEED - удержание скорости setSpeed(...)
void setRunMode(GS_runMode mode);

// Установка текущей позиции мотора в шагах и градусах
void setCurrent(long pos);
void setCurrentDeg(float pos);

// Чтение текущей позиции мотора в шагах и градусах
long getCurrent();
float getCurrentDeg();

// установка целевой позиции в шагах и градусах (для режима FOLLOW_POS)
// type - ABSOLUTE или RELATIVE, по умолчанию стоит ABSOLUTE
// RELATIVE считается от текущей позиции мотора
void setTarget(long pos);
void setTarget(long pos, GS_posType type);
void setTargetDeg(float pos);
void setTargetDeg(float pos, GS_posType type);

// Получение целевой позиции в шагах и градусах
long getTarget();
float getTargetDeg();

// Установка максимальной скорости (по модулю) в шагах/секунду и градусах/секунду (для режима FOLLOW_POS)
// по умолч. 300
void setMaxSpeed(float speed);
void setMaxSpeedDeg(float speed);

// Установка ускорения в шагах и градусах в секунду (для режима FOLLOW_POS).
// При значении 0 ускорение отключается и мотор работает 
// по профилю постоянной максимальной скорости setMaxSpeed().
// По умолч. 300
void setAcceleration(int accel);
void setAccelerationDeg(float accel);

// Автоотключение EN при достижении позиции - true (по умолч. false).
void autoPower(bool mode);

// Плавная остановка с заданным ускорением от текущего положения. 
// Работает также в режиме KEEP_SPEED
void stop();

// Жёсткая остановка. Отключает мотор, если включен autoPower
void brake();

// Жёсткая остановка + сброс позиции в 0 (для концевиков)
void reset();

// Установка целевой скорости в шагах/секунду и градусах/секунду (для режима KEEP_SPEED)
// при передаче вторым аргументом (true или SMOOTH) будет выполнен плавный разгон/торможение к нужной скорости
void setSpeed(float speed, bool smooth);
void setSpeedDeg(float speed, bool smooth);

// Получение целевой скорости в шагах/секунду и градусах/секунду (для режима KEEP_SPEED)
float getSpeed();
float getSpeedDeg();

// Включить мотор (пин EN)
void enable();

// Выключить мотор (пин EN)
void disable();

// Возвращает то же самое, что tick, т.е. крутится мотор или нет
bool getState();

// Возвращает минимальный период тика мотора в микросекундах при настроенной setMaxSpeed() скорости.
// Можно использовать для настройки прерываний таймера, в обработчике которого будет лежать tick() (см. пример timerISR)
uint32_t getMinPeriod();

// Текущий период "тика" для отладки и всего такого
uint32_t stepTime;

*/

// Раскомментируй для использования более плавного, но медленного алгоритма
// Также дефайн можно прописать в скетче до подключения библиотеки!!! См. пример smoothAlgorithm
//#define SMOOTH_ALGORITHM

#define _MIN_STEPPER_SPEED 10			// мин. скорость для FOLLOW_POS
#define _MAX_STEP_PERIOD (1000000L/_MIN_STEPPER_SPEED)
#define MIN_STEPPER_SPEED (1.0f/3600)	// 1 шаг в час

#ifndef DRIVER_STEP_TIME
#define DRIVER_STEP_TIME 1
#endif

#include <Arduino.h>

#ifdef __AVR__
#include <util/delay.h>
#endif

// макросы
#define degPerMinute(x) ((x)/60.0f)
#define degPerHour(x) ((x)/3600.0f)
#define _sign(x) ((x) >= 0 ? 1 : -1)	// знак числа
#define maxMacro(a,b) ((a)>(b)?(a):(b))	// привет esp

enum GS_driverType {
	STEPPER2WIRE,
	STEPPER4WIRE,
	STEPPER4WIRE_HALF,
};

enum GS_runMode {
	FOLLOW_POS,
	KEEP_SPEED,
};

enum GS_posType {
	ABSOLUTE,
	RELATIVE,
};

enum GS_smoothType {	
	NO_SMOOTH,
	SMOOTH,
};



template <GS_driverType _DRV>
class GStepper {
public:	
	// конструктор
	GStepper(int stepsPerRev, int8_t pin1, int8_t pin2, int8_t pin3 = -1, int8_t pin4 = -1, int8_t pin5 = -1) : 
	_stepsPerDeg(stepsPerRev / 360.0) {
		if (_DRV == STEPPER2WIRE) {
			configurePin(0, pin1);
			configurePin(1, pin2);
			if (pin3 != -1) {
				_enPin = pin3;
				pinMode(_enPin, OUTPUT);
			}
		} else {
			configurePin(0, pin1);
			configurePin(1, pin2);
			configurePin(2, pin3);
			configurePin(3, pin4);
			if (pin5 != -1) {
				_enPin = pin5;
				pinMode(_enPin, OUTPUT);
			}
		}
		// умолчания
		setMaxSpeed(300);
		setAcceleration(300);
	}
	
	// возвращает true, если мотор всё ещё движется к цели
	bool tick() {
#ifndef SMOOTH_ALGORITHM
		// в активном режиме движения к цели с ненулевым ускорением
		// планировщик скорости быстрый			
		if (_workState && !_curMode && _accel != 0 && _maxSpeed > _MIN_STEPPER_SPEED) planner();	
#endif
		// при плавном разгоне в KEEP_SPEED
		if (_smoothStart && _curMode) smoothSpeedPlanner();
		
		if (_workState && micros() - _prevTime >= stepTime) {
			_prevTime = micros();			
			// FOLLOW_POS
			if (!_curMode && _target == _current) {
				brake();
				return false;					
			}
#ifdef SMOOTH_ALGORITHM
			// в активном режиме движения к цели с ненулевым ускорением
			// планировщик скорости	плавный
			// выходим если приехал
			if (!_curMode && _accel != 0 && _maxSpeed > _MIN_STEPPER_SPEED) 
				if (!plannerSmooth()) {
					brake();
					return false;	
				}
#endif
			
			// двигаем мотор
			_current += _dir;
			if (_DRV == STEPPER2WIRE) {
				// ~4 us
				setPin(1, (_dir > 0 ? _globDir : !_globDir) );
				setPin(0, 1);	// HIGH
#ifdef __AVR__
				_delay_us(DRIVER_STEP_TIME);
#else
				delayMicroseconds(DRIVER_STEP_TIME);
#endif
				setPin(0, 0);	// LOW
			} else {
				// ~5.7 us	
				thisStep += (_globDir ? _dir : -_dir);			
				step();
			}			
		}		
		return _workState;
	}
	
	
	// инвертировать направление мотора
	void reverse(bool dir) 			{_globDir = dir;}

	// инвертировать поведение EN пина
	void invertEn(bool dir) 		{_enDir = dir;}

	// установка и чтение текущей позиции в шагах и градусах
	void setCurrent(long pos) 		{_current = pos; _accelSpeed = 0;}
	void setCurrentDeg(float pos) 	{setCurrent((float)pos * _stepsPerDeg);}
	long getCurrent() 				{return _current;}
	float getCurrentDeg() 			{return ((float)_current / _stepsPerDeg);}

	// установка и получение целевой позиции в шагах и градусах
	void setTarget(long pos, GS_posType type = ABSOLUTE) {
		_target = type ? (_current + pos) : pos;		
		if (_target != _current) {
			recalculateSpeed(); 
			_workState = true; 
			if (!_powerState) enable();
		}
	}
	void setTargetDeg(float pos, GS_posType type = ABSOLUTE) {setTarget((float)pos * _stepsPerDeg, type);}
	long getTarget() 				{return _target;}
	float getTargetDeg() 			{return ((float)_target / _stepsPerDeg);}

	// установка максимальной скорости в шагах/секунду и градусах/секунду
	void setMaxSpeed(float speed) {
		_maxSpeed = maxMacro(speed, MIN_STEPPER_SPEED);	// 1 шаг в час минимум
		recalculateSpeed();
		
#ifdef SMOOTH_ALGORITHM
		_cmin = 1000000.0 / _maxSpeed;
		if (_n > 0)	{
			_n = (float)_accelSpeed * _accelSpeed * _accelInv;
			plannerSmooth();
		}
#else
		// период планировщка в зависимости от макс. скорости
		_plannerPrd = map((int)_maxSpeed, 1000, 20000, 15000, 1000);
		_plannerPrd = constrain(_plannerPrd, 15000, 1000);	
#endif
	}
	
	void setMaxSpeedDeg(float speed){setMaxSpeed((float)speed * _stepsPerDeg);}

	// установка ускорения шагах и градусах в секунду
	void setAcceleration(int accel) 		{
		_accel = accel; 
		_accelInv = 0.5f / accel;
		_accelTime = accel / 1000000.0f;
#ifdef SMOOTH_ALGORITHM
		_n = _n * (_accel / accel);
		_c0 = 0.676 * sqrt(2.0 / _accel) * 1000000.0; // Equation 15
		plannerSmooth();
#endif
	}
	void setAccelerationDeg(float accel) 	{setAcceleration(accel * _stepsPerDeg);}

	void autoPower(bool mode) 		{_autoPower = mode;}

	// плавная остановка с ускорением
	void stop() {
		if (_workState) {
			if (_curMode == FOLLOW_POS) {
				_accelSpeed = 1000000.0f / stepTime * _dir;
				setTarget(_current + (float)_accelSpeed * _accelSpeed * _accelInv * _dir);
				setMaxSpeed(abs(_accelSpeed));
#ifdef SMOOTH_ALGORITHM
				_n = (float)_accelSpeed * _accelSpeed * _accelInv;
#endif
			} else {
				setSpeed(0, true);
			}
		}
	}

	// жёсткая остановка
	void brake() 					{
		if (_workState) {
			_workState = false;
			if (_autoPower) disable();
			_accelSpeed = 0;
			//stepTime = _MAX_STEP_PERIOD;
#ifdef SMOOTH_ALGORITHM
			_n = 0;
#endif
		}
	}
	void reset()					{brake(); setCurrent(0);}

	// установка и получение целевой скорости в шагах/секунду и градусах/секунду
	void setSpeed(float speed, bool smooth = false) {
		// 1 шаг в час минимум
		_speed = speed;
		if (abs(_speed) < MIN_STEPPER_SPEED) _speed = MIN_STEPPER_SPEED * _sign(_speed);
		
		if (smooth && abs(speed) > _MIN_STEPPER_SPEED) {	// плавный старт		
			if (_accelSpeed == _speed) return;				// скорости совпадают? Выходим
			_smoothStart = true;
#ifdef __AVR__
			_smoothPlannerPrd = map(max(abs((int)_speed), abs((int)_accelSpeed)), 1000, 20000, 15000, 1000);
#else
			// горячий привет тупому компилятору ESP8266 и индусам, которые его настраивали
			int speed1 = abs(_speed);
			int speed2 = abs((int)_accelSpeed);
			int maxSpeed = maxMacro(speed1, speed2);
			_smoothPlannerPrd = map(maxSpeed, 1000, 20000, 15000, 1000);
#endif
			
			_smoothPlannerPrd = constrain(_smoothPlannerPrd, 15000, 1000);	
		} else {		// резкий старт
			if (_speed == 0) {brake(); return;}	// скорость 0? Отключаемся и выходим
			_accelSpeed = _speed;
			stepTime = 1000000.0 / abs(_speed);
			_dir = (_speed > 0) ? 1 : -1;	
		}
		_workState = true;
		if (!_powerState) enable();
	}
	void setSpeedDeg(float speed, bool smooth = false) 	{setSpeed(_stepsPerDeg * speed, smooth);}
	float getSpeed() 				{return (1000000.0 / stepTime * _dir);}
	float getSpeedDeg() 			{return ((float)getSpeed() / _stepsPerDeg);}

	// установка режима работы
	void setRunMode(GS_runMode mode){
		_curMode = mode; 
		if (mode == KEEP_SPEED) recalculateSpeed();
		else _smoothStart = false;
	}

	bool getState()					{return _workState;}

	void enable() {
		_powerState = true;
		if (_DRV == STEPPER4WIRE || _DRV == STEPPER4WIRE_HALF) step();	// подадим прошлый сигнал на мотор, чтобы вал зафиксировался
		if (_enPin != -1) digitalWrite(_enPin, _enDir);
	}

	void disable() {
		_powerState = false;
		if (_DRV == STEPPER4WIRE || _DRV == STEPPER4WIRE_HALF) {
			setPin(0, 0);
			setPin(1, 0);
			setPin(2, 0);
			setPin(3, 0);
		}
		if (_enPin != -1) digitalWrite(_enPin, !_enDir);
	}	

	uint32_t getMinPeriod() {
		if (_curMode == KEEP_SPEED) return abs(1000000.0 / _speed);
		else return (1000000.0 / _maxSpeed);
	}

	uint32_t stepTime = 10000;

private:
	void configurePin(int num, int8_t pin) {
#ifdef __AVR__
		_port_reg[num] = portOutputRegister(digitalPinToPort(pin));
		_ddr_reg[num] = portModeRegister(digitalPinToPort(pin));
		_bit_mask[num] = digitalPinToBitMask(pin);
		*_ddr_reg[num] |= _bit_mask[num];	// OUTPUT
#else
		_pins[num] = pin;
		pinMode(_pins[num], OUTPUT);
#endif
	}

	void setPin(int num, bool state) {
#ifdef __AVR__
		if (state) *_port_reg[num] |= _bit_mask[num];
		else *_port_reg[num] &= ~ _bit_mask[num];
#else
		digitalWrite(_pins[num], state);
#endif				
	}

	void step() {
		if (_DRV == STEPPER4WIRE) {	
			// 0b11 берёт два бита, т.е. формирует 0 1 2 3 0 1..
			switch (thisStep & 0b11) {			
			case 0: setPin(0, 1); setPin(1, 0); setPin(2, 1); setPin(3, 0); break;	// 1010
			case 1: setPin(0, 0); setPin(1, 1); setPin(2, 1); setPin(3, 0); break;	// 0110
			case 2: setPin(0, 0); setPin(1, 1); setPin(2, 0); setPin(3, 1); break;	// 0101
			case 3: setPin(0, 1); setPin(1, 0); setPin(2, 0); setPin(3, 1); break;	// 1001
			}			
		} else if (_DRV == STEPPER4WIRE_HALF) {
			// 0b111 берёт три бита, т.е. формирует 0 1 2 4 5 6 7 0 1 2..
			switch (thisStep & 0b111) {
			case 0: setPin(0, 1); setPin(1, 0); setPin(2, 0); setPin(3, 0); break;	// 1000
			case 1: setPin(0, 1); setPin(1, 0); setPin(2, 1); setPin(3, 0); break;	// 1010
			case 2: setPin(0, 0); setPin(1, 0); setPin(2, 1); setPin(3, 0); break;	// 0010
			case 3: setPin(0, 0); setPin(1, 1); setPin(2, 1); setPin(3, 0); break;	// 0110
			case 4: setPin(0, 0); setPin(1, 1); setPin(2, 0); setPin(3, 0); break;	// 0100
			case 5: setPin(0, 0); setPin(1, 1); setPin(2, 0); setPin(3, 1); break;	// 0101
			case 6: setPin(0, 0); setPin(1, 0); setPin(2, 0); setPin(3, 1); break;	// 0001
			case 7: setPin(0, 1); setPin(1, 0); setPin(2, 0); setPin(3, 1); break;	// 1001
			}
		}
	}

	void recalculateSpeed() {
		if (!_curMode && (_accel == 0 || _maxSpeed < _MIN_STEPPER_SPEED)) {
			stepTime = 1000000.0 / _maxSpeed;
			_dir = (_target > _current) ? 1 : -1;
		}
	}

#ifdef SMOOTH_ALGORITHM
	// планировщик скорости из AccelStepper
	bool plannerSmooth() {		
		long err = _target - _current;
		long stepsToStop = (float)_accelSpeed * _accelSpeed * _accelInv;
		
		if (err == 0 && stepsToStop <= 1) {
			brake();
			return false;
		}

		if (err > 0) {
			if (_n > 0) {
				if ((stepsToStop >= err) || _dir == -1)
				_n = -stepsToStop;
			} else if (_n < 0) {
				if ((stepsToStop < err) && _dir == 1)
				_n = -_n;
			}
		} else if (err < 0) {
			if (_n > 0) {
				if ((stepsToStop >= -err) || _dir == 1)
				_n = -stepsToStop;
			} else if (_n < 0) {
				if ((stepsToStop < -err) && _dir == -1)
				_n = -_n;
			}
		}

		if (_n == 0) {
			_cn = _c0;
			_dir = _sign(err);;
		} else {
			_cn = _cn - ((2.0 * _cn) / ((4.0 * _n) + 1));
			_cn = max(_cn, _cmin); 
		}
		_n++;
		stepTime = _cn;
		_accelSpeed = 1000000.0 / _cn;
		if (_dir == -1) _accelSpeed = -_accelSpeed;	
		return true;
	}

	long _n = 0;
	float _c0 = 0.0;
	float _cn = 0.0;
	float _cmin = 1.0;

#else
	// планировщик скорости мой
	void planner() {
		if (micros() - _plannerTime >= _plannerPrd) {
			_plannerTime = micros();
			// ~110 us				
			long err = _target - _current;											// "ошибка"
			bool thisDir = ( _accelSpeed * _accelSpeed * _accelInv >= abs(err) );	// пора тормозить
			_accelSpeed += ( _accelTime * _plannerPrd * (thisDir ? -_sign(_accelSpeed) : _sign(err)) );	// разгон/торможение
			_accelSpeed = constrain(_accelSpeed, -_maxSpeed, _maxSpeed);			// ограничение

			if (abs(_accelSpeed) > _MIN_STEPPER_SPEED) stepTime = abs(1000000.0 / _accelSpeed);		// ограничение на мин. скорость
			else stepTime = _MAX_STEP_PERIOD;
			_dir = _sign(_accelSpeed);												// направление для шагов
		}
	}

	uint32_t _plannerTime = 0;		
	uint16_t _plannerPrd = 15000;
#endif

	float _accelTime = 0;	
	uint16_t _smoothPlannerPrd = 15000;
	uint32_t _smoothPlannerTime = 0;
	
	// планировщик разгона для KEEP_SPEED
	void smoothSpeedPlanner() {
		if (micros() - _smoothPlannerTime >= _smoothPlannerPrd) {
			_smoothPlannerTime = micros();
			int8_t dir = _sign(_speed - _accelSpeed);	// 1 - разгон, -1 - торможение
			_accelSpeed += ( _accelTime * _smoothPlannerPrd * dir);			
			_dir = _sign(_accelSpeed);
			
			// прекращение работы планировщика
			if ((dir == 1 && _accelSpeed >= _speed) || (dir == -1 && _accelSpeed <= _speed)) {
				_accelSpeed = _speed;
				_smoothStart = false;
				if (_speed == 0) {		// если нужно остановиться
					brake();
					return;				// выходим
				}
			}

			if (abs(_accelSpeed) > _MIN_STEPPER_SPEED) stepTime = abs(1000000.0 / _accelSpeed);		// ограничение на мин. скорость
			else stepTime = _MAX_STEP_PERIOD;
		}
	}	

	const float _stepsPerDeg;
	int8_t _enPin = -1;
	uint32_t _prevTime = 0;			
	float _accelSpeed = 0;
	int32_t _current = 0;
	int32_t _target = 0;

	int8_t thisStep = 0;
	int8_t _dir = 1;
	bool _globDir = false;
	bool _enDir = false;
	bool _powerState = false;
	bool _workState = false;
	bool _autoPower = false;
	bool _smoothStart = false;

	float _maxSpeed = 300;
	float _speed = 0;
	int _accel = 0;	
	float _accelInv = 0;

	GS_runMode _curMode = FOLLOW_POS;

#ifdef __AVR__
	volatile uint8_t *_port_reg[_DRV == 0 ? 2 : 4];
	volatile uint8_t *_ddr_reg[_DRV == 0 ? 2 : 4];
	volatile uint8_t _bit_mask[_DRV == 0 ? 2 : 4];
#else
	uint8_t _pins[_DRV == 0 ? 2 : 4];
#endif
};
#endif

=== Файл: src\ServoSmoothMinim.h ===


//#define USE_TICOSERVO

#ifdef USE_TICOSERVO
#include "Adafruit_TiCoServo/Adafruit_TiCoServo.h"
#else
#include <Servo.h>
#endif

#define SS_SERVO_PERIOD 10 // период работы tick(), мс

#define angleToUs(x) ((x + 52.759) * 10.3111)
#define usToAngle(x) ((x - 544) * 0.09699)

// знак числа
static int _sign(int x) {return ((x) > 0 ? 1 : -1);}

class ServoSmoothMinim
{
public:
    void write(byte angle);                 // аналог метода из библиотеки Servo
    void attach(byte pin, byte target = 0, uint16_t min_us = 544, uint16_t max_us = 2400); // аналог метода из библиотеки Servo
    void detach();                          // аналог метода из библиотеки Servo
    void start();                           // attach + разрешает работу tick
    void stop();                            // detach + запрещает работу tick
    void setSpeed(byte speed);              // установка максимальной скорости (больше 0), градусов / с
    void setAccel(int accel);			    // установка ускорения в градусах/сек/сек (рабочее от 0 до ~1500)
    void setTargetDeg(byte target);         // установка целевой позиции в градусах (0-макс. угол).
    void setDirection(bool _dir);           // смена направления поворота
    byte getCurrentDeg();                   // получение текущей позиции в градусах (0-макс. угол).
    byte getTargetDeg();                    // получение целевой позиции в градусах (0-макс. угол).
    boolean tickManual();                   // метод, управляющий сервой, без встроенного таймера.
                                            // Возвращает true, когда целевая позиция достигнута
    boolean tick();                         // метод, управляющий сервой, должен опрашиваться как можно чаще.
                                            // Возвращает true, когда целевая позиция достигнута.
                                            // Имеет встроенный таймер с периодом SS_SERVO_PERIOD
#ifdef USE_TICOSERVO
    Adafruit_TiCoServo _servo;
#else
    Servo _servo;
#endif
    

private:
    float _speed = 0, _lastSpeed = 0;
    uint16_t _acceleration = 1000;
    float _delta = SS_SERVO_PERIOD / 1000.0;
    int _servoCurrentPos = 0;
    int _servoTargetPos = 0;
    byte _pin, _servoTargetDeg = 0;
    int _servoMaxSpeed = 25;
    int _newSpeed = 0;
    bool _servoState = true;
    bool _dir = 0;
    uint16_t _min_us, _max_us;
    byte SS_DEADZONE = 10;
    byte SS_DEADZONE_SP = 3;
    
};

void ServoSmoothMinim::write(byte angle)
{
    if(_dir) _servo.writeMicroseconds(_min_us + _max_us - angleToUs(angle)); // 2400 - 544
    else _servo.writeMicroseconds(angleToUs(angle)); // 544 - 2400
}

void ServoSmoothMinim::attach(byte pin, byte target, uint16_t min_us, uint16_t max_us)
{
    _pin = pin;
    _min_us = min_us;
    _max_us = max_us;
    _servo.attach(_pin, _min_us, _max_us);
    write(target);
    _servoTargetPos = angleToUs(target);
    _servoCurrentPos = _servoTargetPos;
}

void ServoSmoothMinim::detach()
{
    _servo.detach();
}

void ServoSmoothMinim::start()
{
    _servo.attach(_pin, _min_us, _max_us);
    _servoState = true;
}

void ServoSmoothMinim::stop()
{
    _servo.detach();
    _servoState = false;
}

void ServoSmoothMinim::setSpeed(byte speed)
{
    _servoMaxSpeed = (long)speed * _max_us / 180;	// ~ перевод из градусов в секунду в тики
}

void ServoSmoothMinim::setAccel(int accel) {
    _acceleration = (long)accel * (_max_us - _min_us) / 180;	// напрямую в градусах/сек/сек (перевод в тики)
}

void ServoSmoothMinim::setTargetDeg(byte target)
{
    _servoTargetDeg = target;
    _servoTargetPos = angleToUs(target);
}

void ServoSmoothMinim::setDirection(bool dir)
{
    if(_dir != dir) _servoCurrentPos = _min_us + _max_us - _servoCurrentPos;
    _dir = dir;
}

byte ServoSmoothMinim::getCurrentDeg()
{
    return usToAngle(_servoCurrentPos);
}

byte ServoSmoothMinim::getTargetDeg()
{
    return _servoTargetDeg;
}

boolean ServoSmoothMinim::tickManual() {	
        int err = _servoTargetPos - _servoCurrentPos;
        if (abs(err) > SS_DEADZONE && abs(_lastSpeed - _speed) < SS_DEADZONE_SP) {			// условие остановки
            if (_acceleration != 0) {
                bool thisDir = ((float)_speed * _speed / _acceleration / 2.0 >= abs(err));  	// пора тормозить
                _speed += (float)_acceleration * _delta * (thisDir ? -_sign(_speed) : _sign(err));
            } else _speed = err/_delta;
            _speed = constrain(_speed, -_servoMaxSpeed, _servoMaxSpeed);
            _servoCurrentPos += _speed * _delta;
            if (!_servoState) _servoState = true;
            _servo.writeMicroseconds(_dir ? (_min_us + _max_us - _servoCurrentPos) : _servoCurrentPos);
        } else {
            _speed = 0;			
            if (_servoState) _servo.writeMicroseconds(_dir ? (_min_us + _max_us - _servoCurrentPos) : _servoCurrentPos);
            _servoState = false;
        }
        _lastSpeed = _speed;
    return !_servoState;
}

/*
boolean ServoSmoothMinim::tickManual()
{
    _newSpeed = _servoTargetPos - _servoCurrentPos; // расчёт скорости
    if (_servoState)
    {
        _newSpeed = constrain(_newSpeed, -_servoMaxSpeed, _servoMaxSpeed); // ограничиваем по макс.
        _servoCurrentPos += _newSpeed;

        if(_dir) _servo.writeMicroseconds(_min_us + _max_us - _servoCurrentPos);
        else _servo.writeMicroseconds(_servoCurrentPos);
    }
    if (_servoCurrentPos == _servoTargetPos) _servoState = false;
    else _servoState = true;

    return !_servoState;
}
*/

boolean ServoSmoothMinim::tick()
{
    static uint32_t _prevServoTime = 0;
    if (millis() - _prevServoTime >= SS_SERVO_PERIOD)
    {
        _prevServoTime = millis();
        ServoSmoothMinim::tickManual();
    }
    return !_servoState;
}


=== Файл: src\timer2Minim.h ===

// мини-класс таймера, версия 2.0
// использован улучшенный алгоритм таймера на millis
// алгоритм чуть медленнее, но обеспечивает кратные интервалы и защиту от пропусков и переполнений

class timerMinim
{
  public:
    timerMinim(uint32_t interval);        // объявление таймера с указанием интервала
    void setInterval(uint32_t interval);  // установка интервала работы таймера
    boolean isReady();                    // возвращает true, когда пришло время. Сбрасывается в false сам (AUTO) или вручную (MANUAL)
    void reset();                         // ручной сброс таймера на установленный интервал
    void stop();
    void start();
    bool isOn();
    uint32_t getInterval();

  private:
    uint32_t _timer = 0;
    uint32_t _interval = 0;
    bool _stop = false;
};

uint32_t timerMinim::getInterval() {
  return _interval;
}

timerMinim::timerMinim(uint32_t interval) {
  _interval = interval;
  _timer = millis();
}

void timerMinim::setInterval(uint32_t interval) {
  _interval = (interval == 0) ? 10 : interval;
}

void timerMinim::start() {
  if (_stop) {
    _stop = false;
    _timer = millis();
  }
}

void timerMinim::stop() {
  _stop = true;
}

bool timerMinim::isOn() {
  return !_stop;
}

// алгоритм таймера v2.0
boolean timerMinim::isReady() {
  if (_stop) return false;

  uint32_t thisMls = millis();
  if (thisMls - _timer >= _interval) {
    do {
      _timer += _interval;
      if (_timer < _interval) break;          // переполнение uint32_t
    } while (_timer < thisMls - _interval);  // защита от пропуска шага
    return true;
  } else {
    return false;
  }
}

void timerMinim::reset() {
  _timer = millis();
  _stop = false;
}


=== Файл: src\Adafruit_TiCoServo\Adafruit_TiCoServo.cpp ===

/*!
 * @file Adafruit_TiCoServo.cpp
 *
 * @mainpage Adafruit Timer/Counter Servo Library.
 *
 * @section intro_sec Introduction
 *
 * This is documentation for the Adafruit_TiCoServo library: uses
 * Timer/Counter 1 (or 3,4,5) to allow use of NeoPixels and servos in
 * the same project (with lots of caveats -- see the examples for further
 * explanation). This is similar in ways to the early (pre-0016) Arduino
 * Servo library, but updated for new boards. For AVR & ATtiny only.
 *
 * Adafruit invests time and resources providing this open source code,
 * please support Adafruit and open-source hardware by purchasing
 * products from Adafruit!
 *
 * @section author Author
 *
 * Written by Phil Burgess for Adafruit Industries, incorporating work
 * by Paul Stoffregen, Jesse Tane, Jérôme Despatis, Michael Polli and
 * Dan Clemens. The file 'known_16bit_timers.h' is taken verbatim from
 * Paul Stoffregen's fork of the TimerOne library:
 * https://github.com/PaulStoffregen/TimerOne
 * and this code is provided under the same "CC BY 3.0 US" license terms.
 *
 * @section license License
 *
 * Adafruit_TiCoServo is free software. You can redistribute it and/or
 * modify it under the terms of Creative Commons Attribution 3.0 United
 * States License. To view a copy of this license, visit
 * http://creativecommons.org/licenses/by/3.0/us/
 */

#include "Adafruit_TiCoServo.h"

// -------------------------------------------------------------------------
// Enable servo use on requested pin.  Must call this before any write()
// operation.  Pin selection is VERY limited, see examples (or
// known_16_bit_timers.h) for a list.
// -------------------------------------------------------------------------
void Adafruit_TiCoServo::attach(const int8_t p
#ifndef __TINY_SERVO__
                                ,
                                const uint16_t min, // 0, 180 degree servo pulse
                                const uint16_t max  // times in microseconds.
#endif
) {

  if (on)
    return; // Don't double-attach, else bad news.

    // Referencing any timer/counter configures it to ~50 Hz and sets all
    // output compare registers to a roughly centered-ish position for
    // servos (1.5 ms).  PWM output for the pin is NOT enabled until the
    // first call to write().

#ifdef __TINY_SERVO__
  // Adafruit Trinket, etc. ------------------------------------------------

  if ((p == TIMER1_A_PIN) || (p == TIMER1_B_PIN)) { // Valid pin?
    pin = p;                                        // Yes, save
    ocr = (servoPos_t *)&((p == TIMER1_A_PIN) ? OCR1A : OCR1B);
#if (F_CPU == 16000000L)
    GTCCR = _BV(PWM1B);                         // Enable PWM A+B
    TCCR1 = _BV(PWM1A) | _BV(CS13) | _BV(CS12); // 1:2048 prescale
    OCR1C = F_CPU / 2048 / 50;                  // 156 = ~50 Hz (~20 ms)
    OCR1A = OCR1B = F_CPU / 2048 / 50 * 3 / 40; // Center servos
    if (TCNT1 > OCR1C)
      TCNT1 = 0; // Restart count
#else
    GTCCR = _BV(PWM1B);
    TCCR1 = _BV(PWM1A) | _BV(CS13) | _BV(CS11) | _BV(CS10); // 1:1024
    OCR1C = F_CPU / 1024 / 50;
    OCR1A = OCR1B = F_CPU / 1024 / 50 * 3 / 40;
    if (TCNT1 > OCR1C)
      TCNT1 = 0;
#endif
  }

#else

    // Min/max pulse times are stored in 'raw' timer/counter ticks.
#if (F_CPU == 8000000L)
  minPulse = min; // Because 1:8 prescale is used on all non-ATtiny parts,
  maxPulse = max; // ticks == microseconds on 8 MHz devices, no math!
#else
  minPulse = min * (F_CPU / 1000000L) / 8; // Scale microseconds to ticks.
  maxPulse = max * (F_CPU / 1000000L) / 8;
#endif

#if defined(__AVR_ATmega168__) || defined(__AVR_ATmega328P__)
  // Arduino Uno, Duemilanove, etc. ----------------------------------------

  if ((p == TIMER1_A_PIN) || (p == TIMER1_B_PIN)) { // Valid pin?
    pin = p;                                        // Yes, save
    ocr = (servoPos_t *)&((p == TIMER1_A_PIN) ? OCR1A : OCR1B);
    TCCR1A = _BV(WGM11);                          // Mode 14 (fast PWM)
    TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS11); // 1:8 prescale
    ICR1 = F_CPU / 8 / 50;                        // ~50 Hz (~20 ms)
    OCR1A = OCR1B = (minPulse + maxPulse) / 2;    // Center servos
    if (TCNT1 > ICR1)
      TCNT1 = 0; // Restart count
  }

#elif defined(__AVR_ATmega32U4__)
  // Arduino Leonardo, Teensy 2.0 ------------------------------------------

  if ((p == TIMER1_A_PIN) || (p == TIMER1_B_PIN) || (p == TIMER1_C_PIN)) {
    pin = p;
    counter = (servoPos_t *)&TCNT1;
    if (p == TIMER1_A_PIN)
      ocr = (servoPos_t *)&OCR1A;
    else if (p == TIMER1_B_PIN)
      ocr = (servoPos_t *)&OCR1B;
    else
      ocr = (servoPos_t *)&OCR1C;
    TCCR1A = _BV(WGM11);                               // Mode 14 (fast PWM)
    TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS11);      // 1:8 prescale
    ICR1 = F_CPU / 8 / 50;                             // ~50 Hz
    OCR1A = OCR1B = OCR1C = (minPulse + maxPulse) / 2; // Center servos
    if (TCNT1 > ICR1)
      TCNT1 = 0; // Restart count
  } else if (p == TIMER3_A_PIN) {
    pin = p;
    ocr = (servoPos_t *)&OCR3A;
    counter = (servoPos_t *)&TCNT3;
    TCCR3A = _BV(WGM31);
    TCCR3B = _BV(WGM33) | _BV(WGM32) | _BV(CS31);
    ICR3 = F_CPU / 8 / 50;
    OCR3A = (minPulse + maxPulse) / 2;
    if (TCNT3 > ICR3)
      TCNT3 = 0;
  }

#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
  // Arduino Mega ----------------------------------------------------------

  switch (p) {
  case TIMER1_A_PIN:
  case TIMER1_B_PIN:
  case TIMER1_C_PIN:
    pin = p;
    counter = (servoPos_t *)&TCNT1;
    if (p == TIMER1_A_PIN)
      ocr = (servoPos_t *)&OCR1A;
    else if (p == TIMER1_B_PIN)
      ocr = (servoPos_t *)&OCR1B;
    else
      ocr = (servoPos_t *)&OCR1C;
    TCCR1A = _BV(WGM11);                               // Mode 14 (fast PWM)
    TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS11);      // 1:8 prescale
    ICR1 = F_CPU / 8 / 50;                             // ~50 Hz
    OCR1A = OCR1B = OCR1C = (minPulse + maxPulse) / 2; // Center servos
    if (TCNT1 > ICR1)
      TCNT1 = 0; // Restart count
    break;
  case TIMER3_A_PIN:
  case TIMER3_B_PIN:
  case TIMER3_C_PIN:
    pin = p;
    counter = (servoPos_t *)&TCNT3;
    if (p == TIMER3_A_PIN)
      ocr = (servoPos_t *)&OCR3A;
    else if (p == TIMER3_B_PIN)
      ocr = (servoPos_t *)&OCR3B;
    else
      ocr = (servoPos_t *)&OCR3C;
    TCCR3A = _BV(WGM31);
    TCCR3B = _BV(WGM33) | _BV(WGM32) | _BV(CS31);
    ICR3 = F_CPU / 8 / 50;
    OCR3A = OCR3B = OCR3C = (minPulse + maxPulse) / 2;
    if (TCNT3 > ICR3)
      TCNT3 = 0;
    break;
  case TIMER4_A_PIN:
  case TIMER4_B_PIN:
  case TIMER4_C_PIN:
    pin = p;
    counter = (servoPos_t *)&TCNT4;
    if (p == TIMER4_A_PIN)
      ocr = (servoPos_t *)&OCR4A;
    else if (p == TIMER4_B_PIN)
      ocr = (servoPos_t *)&OCR4B;
    else
      ocr = (servoPos_t *)&OCR4C;
    TCCR4A = _BV(WGM41);
    TCCR4B = _BV(WGM43) | _BV(WGM42) | _BV(CS41);
    ICR4 = F_CPU / 8 / 50;
    OCR4A = OCR4B = OCR4C = (minPulse + maxPulse) / 2;
    if (TCNT4 > ICR4)
      TCNT4 = 0;
    break;
  case TIMER5_A_PIN:
  case TIMER5_B_PIN:
  case TIMER5_C_PIN:
    pin = p;
    counter = (servoPos_t *)&TCNT5;
    if (p == TIMER5_A_PIN)
      ocr = (servoPos_t *)&OCR5A;
    else if (p == TIMER5_B_PIN)
      ocr = (servoPos_t *)&OCR5B;
    else
      ocr = (servoPos_t *)&OCR5C;
    TCCR5A = _BV(WGM51);
    TCCR5B = _BV(WGM53) | _BV(WGM52) | _BV(CS51);
    ICR5 = F_CPU / 8 / 50;
    OCR5A = OCR5B = OCR5C = (minPulse + maxPulse) / 2;
    if (TCNT5 > ICR5)
      TCNT5 = 0;
    break;
  }

#endif // End specific MCU cases
#endif // End non-ATtiny case
}

// -------------------------------------------------------------------------
// Enable or disable PWM on pin.  Private method.  attach() already set up
// control registers for no output, so switching on or off just needs to
// toggle bit difference between off & non-inverting mode.
// -------------------------------------------------------------------------
void Adafruit_TiCoServo::toggle(void) {

#ifdef __TINY_SERVO__
  // Adafruit Trinket, etc. ------------------------------------------------

  if (pin == TIMER1_A_PIN)
    TCCR1 ^= _BV(COM1A1);
  else
    GTCCR ^= _BV(COM1B1);

#elif defined(__AVR_ATmega168__) || defined(__AVR_ATmega328P__)
  // Arduino Uno, Duemilanove, etc. ----------------------------------------

  if (pin == TIMER1_A_PIN)
    TCCR1A ^= _BV(COM1A1);
  else
    TCCR1A ^= _BV(COM1B1);

#elif defined(__AVR_ATmega32U4__)
  // Arduino Leonardo, Teensy 2.0 ------------------------------------------

  switch (pin) {
  case TIMER1_A_PIN:
    TCCR1A ^= _BV(COM1A1);
    break;
  case TIMER1_B_PIN:
    TCCR1A ^= _BV(COM1B1);
    break;
  case TIMER1_C_PIN:
    TCCR1A ^= _BV(COM1C1);
    break;
  case TIMER3_A_PIN:
    TCCR3A ^= _BV(COM3A1);
    break;
  }

#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
  // Arduino Mega ----------------------------------------------------------

  switch (pin) {
  case TIMER1_A_PIN:
    TCCR1A ^= _BV(COM1A1);
    break;
  case TIMER1_B_PIN:
    TCCR1A ^= _BV(COM1B1);
    break;
  case TIMER1_C_PIN:
    TCCR1A ^= _BV(COM1C1);
    break;
  case TIMER3_A_PIN:
    TCCR3A ^= _BV(COM3A1);
    break;
  case TIMER3_B_PIN:
    TCCR3A ^= _BV(COM3B1);
    break;
  case TIMER3_C_PIN:
    TCCR3A ^= _BV(COM3C1);
    break;
  case TIMER4_A_PIN:
    TCCR4A ^= _BV(COM4A1);
    break;
  case TIMER4_B_PIN:
    TCCR4A ^= _BV(COM4B1);
    break;
  case TIMER4_C_PIN:
    TCCR4A ^= _BV(COM4C1);
    break;
  case TIMER5_A_PIN:
    TCCR5A ^= _BV(COM5A1);
    break;
  case TIMER5_B_PIN:
    TCCR5A ^= _BV(COM5B1);
    break;
  case TIMER5_C_PIN:
    TCCR5A ^= _BV(COM5C1);
    break;
  }

#endif
}

// -------------------------------------------------------------------------
// Set servo position; units vary, see notes below
// -------------------------------------------------------------------------
void Adafruit_TiCoServo::write(servoPos_t pos) {

  if (pin < 0)
    return; // Invalid pin passed to attach()

#ifndef __TINY_SERVO__ // For non-ATtiny devices,
  // position is either degrees or microseconds.  Borrowing a trick from
  // the standard Arduino Servo library, it's easy to spot the difference;
  // degrees are always much smaller than the shortest allowable servo
  // pulse in microseconds.
  if (pos < MIN_PULSE_WIDTH) { // Position in degrees
    if (pos > 180)
      pos = 180; // Clip top end only (uint)
    pos = minPulse + ((long)(maxPulse - minPulse) * pos / 180); // Scale
#if (F_CPU != 8000000L)                 // @8 MHz 1 ms == 1 tick
  } else {                              // Position in microseconds
    pos = pos * (F_CPU / 1000000L) / 8; // Scale usec to ticks
#endif
  }
#endif // Else is ATtiny part, position is always in ticks

  *ocr = pos; // Set output compare register
  if (on)
    return; // If pin already enabled, we're done

    // ...otherwise, this is the first time accessing this pin.
    // Wait for timer to be past servo pulse before enabling output,
    // avoids half-pulse that could throw off initial servo position.
#ifdef TIMER3_A_PIN // For chips with >1 timer/counter
  while (*counter < *ocr)
    ;
#else
  while (TCNT1 < *ocr)
    ;
#endif

  toggle();             // Enable PWM on pin
  pinMode(pin, OUTPUT); // Enable output
  on = true;            // Mark pin as enabled
}

// -------------------------------------------------------------------------
// Stop servo pulse output on pin
// -------------------------------------------------------------------------
void Adafruit_TiCoServo::detach(void) {

  if ((pin < 0) || !on)
    return; // Pin not previously used; ignore

    // Wait for timer to be past servo pulse before disabling output,
    // avoids half-pulse that could throw off final servo position.
#ifdef TIMER3_A_PIN // For chips with >1 timer/counter
  while (*counter < *ocr)
    ;
#else
  while (TCNT1 < *ocr)
    ;
#endif

  pinMode(pin, INPUT); // Disable output
  toggle();            // Disable PWM on pin
  on = false;          // Mark as stopped
  pin = -1;
}

#ifndef __TINY_SERVO__
// -------------------------------------------------------------------------
// Return servo position in degrees (not available on ATtiny)
// -------------------------------------------------------------------------
uint8_t Adafruit_TiCoServo::read(void) {
  return (*ocr - minPulse) * 180L / (maxPulse - minPulse);
}

// -------------------------------------------------------------------------
// Return servo position in microseconds (not available on ATtiny)
// -------------------------------------------------------------------------
uint16_t Adafruit_TiCoServo::readMicroseconds(void) {
#if (F_CPU == 8000000L)
  return *ocr;
#else
  return *ocr * 8L / (F_CPU / 1000000L); // Scale ticks to microseconds
#endif
}
#endif


=== Файл: src\Adafruit_TiCoServo\Adafruit_TiCoServo.h ===

/*!
 * @file Adafruit_TiCoServo.h
 *
 * Adafruit_TiCoServo library: uses Timer/Counter 1 (or 3,4,5) to allow use
 * of NeoPixels and servos in the same project (with lots of caveats -- see
 * the examples for further explanation). This is similar in ways to the
 * early (pre-0016) Arduino Servo library, but updated for new boards.
 * For AVR/ATtiny only.
 *
 * Written by Phil Burgess for Adafruit Industries, incorporating work
 * by Paul Stoffregen, Jesse Tane, Jérôme Despatis, Michael Polli and
 * Dan Clemens. The file 'known_16bit_timers.h' is taken verbatim from
 * Paul Stoffregen's fork of the TimerOne library:
 * https://github.com/PaulStoffregen/TimerOne
 * and this code is provided under the same "CC BY 3.0 US" license terms.
 *
 * Open Source License
 *
 * Adafruit_TiCoServo is free software. You can redistribute it and/or
 * modify it under the terms of Creative Commons Attribution 3.0 United
 * States License. To view a copy of this license, visit
 * http://creativecommons.org/licenses/by/3.0/us/
 */

#ifndef _ADAFRUIT_TICOSERVO_H_
#define _ADAFRUIT_TICOSERVO_H_

#include "known_16bit_timers.h" // Timer pins for various Arduino-alikes.
#include <Arduino.h>
// This header is used (instead of the stock Arduino digitalPinToTimer()
// in pins_arduino.h) because the latter doesn't always give precedence
// to 16-bit timers on certain pins; e.g. on Leonardo, pin 11 refers to
// TIMER0A instead of TIMER1C, which we'd prefer. This means that the more
// esoteric Arduino-compatibles may not work off the bat until this header
// file is suitably amended.

#ifdef TIMER1_A_PIN          ///< Defined in known_16bit_timers.h if present
typedef uint16_t servoPos_t; ///< Servo positions are 16-bit values
// Min/max pulse range is the same as stock Arduino Servo library:
#define MIN_PULSE_WIDTH 544  ///< Shortest pulse sent to a servo (microsec)
#define MAX_PULSE_WIDTH 2400 ///< Longest pulse sent to a servo (microsec)
#else                        ///< No 16-bit timers, presumably ATtiny device
typedef uint8_t servoPos_t; ///< Servo positions are 8-bit values
#define TIMER1_A_PIN 1       ///< First of two pins supported on ATtiny
#define TIMER1_B_PIN 4       ///< Second of two pins supported on ATtiny
#define __TINY_SERVO__       ///< Functionality is limited on ATtiny
#endif

/*!
    @brief  Class encapsulating Timer/Counter Servo functionality.
*/
class Adafruit_TiCoServo {
public:
#ifdef __TINY_SERVO__

  // Behavior is slightly different for ATtiny vs other devices.
  // Due to the limited timer resolution, servo read/write only work in
  // 'raw' timer/counter ticks; degrees or microseconds are never used.

  /*!
    @brief  Constructor for ATtiny devices.
  */
  Adafruit_TiCoServo(void) : pin(-1), on(false){};

  /*!
    @brief  Enable timer/counter-driven servo output on pin. Must call this
            before any write() operation. Pin selection is VERY limited,
            see examples (or known_16_bit_timers.h) for a list.
    @param  pin  Arduino pin number.
  */
  void attach(const int8_t pin);

  /*!
    @brief  Set servo position.
    @param  pos  Position in 'raw timer units,' which are a function of
                 the timer clock. On ATtiny devices, only a few distinct
                 positions are available.
  */
  void write(const servoPos_t pos);

  /*!
    @brief   Get last-set servo position.
    @return  Position in 'raw timer units,' which are a function of
             the timer clock. On ATtiny devices, only a few distinct
             positions are available.
  */
  inline servoPos_t read(void) __attribute__((always_inline)) { return *ocr; }

#else

  // On other boards, read/write are available both in degrees and
  // microseconds, consistent with original Arduino Servo library.

  /*!
    @brief  Constructor for AVR devices.
  */
  Adafruit_TiCoServo(void)
      : pin(-1), on(false), minPulse(MIN_PULSE_WIDTH),
        maxPulse(MAX_PULSE_WIDTH){};

  /*!
    @brief  Enable timer/counter-driven servo output on pin. Must call this
            before any write() operation. Pin selection is VERY limited,
            see examples (or known_16_bit_timers.h) for a list.
    @param  pin  Arduino pin number.
    @param  min  Shortest pulse sent to servo (microseconds).
    @param  max  Longest pulse sent to servo (microseconds).
  */
  void attach(const int8_t pin, const uint16_t min = MIN_PULSE_WIDTH,
              const uint16_t max = MAX_PULSE_WIDTH);

  /*!
    @brief  Set servo position.
    @param  pos  Position in either degrees or microseconds (library can
                 spot the difference, degrees are always much smaller than
                 the shortest allowable servo pulse in microseconds).
  */
  void write(const uint16_t pos);

  /*!
    @brief   Get last-set servo position (degrees).
    @return  Servo position, in degrees.
  */
  uint8_t read(void);

  /*!
    @brief   Get last-set servo position (microseconds).
    @return  Servo position, in microseconds.
  */
  uint16_t readMicroseconds(void);

#endif

  /*!
    @brief  Stop servo output on pin.
  */
  void detach(void);

  /*!
    @brief   Is TiCoServo object currently attached to a pin?
    @return  true if attached (active), false otherwise.
  */
  inline bool attached(void) __attribute__((always_inline)) { return on; }

private:
  int8_t pin;                   ///< Arduino pin #, or -1 if invalid
  volatile servoPos_t *ocr;     ///< Output compare register for pin
#ifdef TIMER3_A_PIN             ///< For chips with >1 timer/counter...
  volatile servoPos_t *counter; ///< Timer/Counter count reg. for pin
#endif                          ///< (else always TCNT1)
  boolean on;                   ///< True after first write() call
  void toggle(void);            ///< PWM on/off
#ifndef __TINY_SERVO__
  uint16_t minPulse; ///< Min pulse duration, microseconds
  uint16_t maxPulse; ///< Max pulse duration, microseconds
#endif
};

#ifndef __TINY_SERVO__
#define writeMicroseconds(x) write(x) ///< Same thing on AVR
#endif

#endif // _ADAFRUIT_TICOSERVO_H_


=== Файл: src\Adafruit_TiCoServo\known_16bit_timers.h ===

#ifndef known_16bit_timers_header_
#define known_16bit_timers_header_

// Wiring-S
#if defined(__AVR_ATmega644P__) && defined(WIRING)
#define TIMER1_A_PIN 5
#define TIMER1_B_PIN 4
#define TIMER1_ICP_PIN 6

// Teensy 2.0
#elif defined(__AVR_ATmega32U4__) && defined(CORE_TEENSY)
#define TIMER1_A_PIN 14
#define TIMER1_B_PIN 15
#define TIMER1_C_PIN 4
#define TIMER1_ICP_PIN 22
#define TIMER1_CLK_PIN 11
#define TIMER3_A_PIN 9
#define TIMER3_ICP_PIN 10

// Teensy++ 2.0
#elif defined(__AVR_AT90USB1286__) && defined(CORE_TEENSY)
#define TIMER1_A_PIN 25
#define TIMER1_B_PIN 26
#define TIMER1_C_PIN 27
#define TIMER1_ICP_PIN 4
#define TIMER1_CLK_PIN 6
#define TIMER3_A_PIN 16
#define TIMER3_B_PIN 15
#define TIMER3_C_PIN 14
#define TIMER3_ICP_PIN 17
#define TIMER3_CLK_PIN 13

// Teensy 3.0
#elif defined(__MK20DX128__)
#define TIMER1_A_PIN 3
#define TIMER1_B_PIN 4
#define TIMER1_ICP_PIN 4

// Teensy 3.1
#elif defined(__MK20DX256__)
#define TIMER1_A_PIN 3
#define TIMER1_B_PIN 4
#define TIMER1_ICP_PIN 4
#define TIMER3_A_PIN 32
#define TIMER3_B_PIN 25
#define TIMER3_ICP_PIN 32

// Arduino Mega
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
#define TIMER1_A_PIN 11
#define TIMER1_B_PIN 12
#define TIMER1_C_PIN 13
#define TIMER3_A_PIN 5
#define TIMER3_B_PIN 2
#define TIMER3_C_PIN 3
#define TIMER4_A_PIN 6
#define TIMER4_B_PIN 7
#define TIMER4_C_PIN 8
#define TIMER4_ICP_PIN 49
#define TIMER5_A_PIN 46
#define TIMER5_B_PIN 45
#define TIMER5_C_PIN 44
#define TIMER3_ICP_PIN 48
#define TIMER3_CLK_PIN 47

// Arduino Leonardo, Yun, etc
#elif defined(__AVR_ATmega32U4__)
#define TIMER1_A_PIN 9
#define TIMER1_B_PIN 10
#define TIMER1_C_PIN 11
#define TIMER1_ICP_PIN 4
#define TIMER1_CLK_PIN 12
#define TIMER3_A_PIN 5
#define TIMER3_ICP_PIN 13

//  Uno, Duemilanove, LilyPad, etc
#elif defined(__AVR_ATmega168__) || defined(__AVR_ATmega328P__)
#define TIMER1_A_PIN 9
#define TIMER1_B_PIN 10
#define TIMER1_ICP_PIN 8
#define TIMER1_CLK_PIN 5

// Sanguino
#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644__)
#define TIMER1_A_PIN 13
#define TIMER1_B_PIN 12
#define TIMER1_ICP_PIN 14
#define TIMER1_CLK_PIN 1

// Wildfire - Wicked Devices
#elif defined(__AVR_ATmega1284P__) && defined(WILDFIRE_VERSION) &&             \
    WILDFIRE_VERSION >= 3
#define TIMER1_A_PIN 5    // PD5
#define TIMER1_B_PIN 8    // PD4
#define TIMER1_ICP_PIN 6  // PD6
#define TIMER1_CLK_PIN 23 // PB1
#define TIMER3_A_PIN 12   // PB6
#define TIMER3_B_PIN 13   // PB7
#define TIMER3_ICP_PIN 9  // PB5
#define TIMER3_CLK_PIN 0  // PD0
#elif defined(__AVR_ATmega1284P__) && defined(WILDFIRE_VERSION) &&             \
    WILDFIRE_VERSION < 3
#define TIMER1_A_PIN 5    // PD5
#define TIMER1_B_PIN 4    // PD4
#define TIMER1_ICP_PIN 6  // PD6
#define TIMER1_CLK_PIN 15 // PB1
#define TIMER3_A_PIN 12   // PB6
#define TIMER3_B_PIN 13   // PB7
#define TIMER3_ICP_PIN 11 // PB5
#define TIMER3_CLK_PIN 0  // PD0

// Mighty-1284 - Maniacbug
#elif defined(__AVR_ATmega1284P__)
#define TIMER1_A_PIN 12   // PD5
#define TIMER1_B_PIN 13   // PD4
#define TIMER1_ICP_PIN 14 // PD6
#define TIMER1_CLK_PIN 1  // PB1
#define TIMER3_A_PIN 6    // PB6
#define TIMER3_B_PIN 7    // PB7
#define TIMER3_ICP_PIN 5  // PB5
#define TIMER3_CLK_PIN 8  // PD0

#endif

#endif


=== Файл: src\GyverTimers\GyverTimers.cpp ===

#include "GyverTimers.h"


// ========================== OUTPUT STATE ==========================
void Timer_0::outputState(uint8_t channel, bool state) {
	switch (channel) {
	case CHANNEL_A: TCCR0B = (TCCR0B & 0x7F) | (state << FOC0A); break;
	case CHANNEL_B: TCCR0B = (TCCR0B & 0xBF) | (state << FOC0B); break;
	}
}	

void Timer_1::outputState(uint8_t channel, bool state) {
	switch (channel) {
	case CHANNEL_A: TCCR1C = (TCCR1C & 0x7F) | (state << FOC1A); break;
	case CHANNEL_B: TCCR1C = (TCCR1C & 0xBF) | (state << FOC1B); break;
#if defined(__AVR_ATmega2560__)
	case CHANNEL_C: TCCR1C = (TCCR1C & 0xDF) | (state << FOC1C); break;
#endif
	}
}

void Timer_2::outputState(uint8_t channel, bool state) {
	switch (channel) {
	case CHANNEL_A: TCCR2B = (TCCR2B & 0x7F) | (state << FOC2A); break;
	case CHANNEL_B: TCCR2B = (TCCR2B & 0xBF) | (state << FOC2B); break;
	}
}

#if defined(__AVR_ATmega2560__)
void Timer_3::outputState(uint8_t channel, bool state) {
	switch (channel) {
	case CHANNEL_A: TCCR3C = (TCCR3C & 0x7F) | (state << FOC3A); break;
	case CHANNEL_B: TCCR3C = (TCCR3C & 0xBF) | (state << FOC3B); break;
	case CHANNEL_C: TCCR3C = (TCCR3C & 0xDF) | (state << FOC3C); break;
	}
}

void Timer_4::outputState(uint8_t channel,bool state){
	switch (channel) {
	case CHANNEL_A: TCCR4C = (TCCR4C & 0x7F) | (state << FOC4A); break;
	case CHANNEL_B: TCCR4C = (TCCR4C & 0xBF) | (state << FOC4B); break;
	case CHANNEL_C: TCCR4C = (TCCR4C & 0xDF) | (state << FOC4C); break;
	}	
}

void Timer_5::outputState(uint8_t channel,bool state){
	switch (channel) {
	case CHANNEL_A: TCCR5C = (TCCR5C & 0x7F) | (state << FOC5A); break;
	case CHANNEL_B: TCCR5C = (TCCR5C & 0xBF) | (state << FOC5B); break;
	case CHANNEL_C: TCCR5C = (TCCR5C & 0xDF) | (state << FOC5C); break;
	}		
}
#endif


// ========================== PAUSE ==========================
void Timer_0::pause(void) {
	TCCR0B = (TCCR0B & 0xF8);	// Clear timer clock bits
}

void Timer_1::pause(void) {
	TCCR1B = (TCCR1B & 0xF8);
}

void Timer_2::pause(void) {
	TCCR2B = (TCCR2B & 0xF8);
}

#if defined(__AVR_ATmega2560__)

void Timer_3::pause(void) {
	TCCR3B = (TCCR3B & 0xF8);
}

void Timer_4::pause(void) {
	TCCR4B = (TCCR4B & 0xF8);
}

void Timer_5::pause(void) {
	TCCR5B = (TCCR5B & 0xF8);
}

#endif

// ========================== RESUME ==========================
void Timer_0::resume(void) {
	TCCR0B = ((TCCR0B & 0xF8) |  _timer0_clock);  // Return clock timer settings
}

void Timer_1::resume(void) {
	TCCR1B = ((TCCR1B & 0xF8) |  _timer1_clock);
}

void Timer_2::resume(void) {
	TCCR2B = ((TCCR2B & 0xF8) |  _timer2_clock);
}

#if defined(__AVR_ATmega2560__)
void Timer_3::resume(void) {
	TCCR3B = ((TCCR3B & 0xF8) |  _timer3_clock);
}

void Timer_4::resume(void) {
	TCCR4B = ((TCCR4B & 0xF8) |  _timer4_clock);
}

void Timer_5::resume(void) {
	TCCR5B = ((TCCR5B & 0xF8) |  _timer5_clock);
}
#endif


// ========================== STOP ==========================
void Timer_0::stop(void) {
	Timer_0::pause();
	TCNT0 = 0x00;             // Clear timer counter
}

void Timer_1::stop(void) {
	Timer_1::pause();
	TCNT1 = 0x00;
}

void Timer_2::stop(void) {
	Timer_2::pause();
	TCNT2 = 0x00;
}

#if defined(__AVR_ATmega2560__)
void Timer_3::stop(void) {
	Timer_3::pause();
	TCNT3 = 0x00;
}

void Timer_4::stop(void) {
	Timer_4::pause();
	TCNT4 = 0x00;
}

void Timer_5::stop(void) {
	Timer_5::pause();
	TCNT5 = 0x00;
}
#endif


// ========================== RESTART ==========================
void Timer_0::restart(void) {
	Timer_0::resume();
	TCNT0 = 0x00;
}

void Timer_1::restart(void) {
	Timer_1::resume();
	TCNT1 = 0x00;
}

void Timer_2::restart(void) {
	Timer_2::resume();
	TCNT2 = 0x00;
}

#if defined(__AVR_ATmega2560__)
void Timer_3::restart(void) {
	Timer_3::resume();
	TCNT3 = 0x00;
}

void Timer_4::restart(void) {
	Timer_4::resume();
	TCNT4 = 0x00;
}

void Timer_5::restart(void) {
	Timer_5::resume();
	TCNT5 = 0x00;
}
#endif


// ========================== DISABLE ISR ==========================
void Timer_0::disableISR(uint8_t source) {
	TIMSK0 &= ~ (source ? (1 << OCIE0B) : (1 << OCIE0A));
}

void Timer_1::disableISR(uint8_t source) {
	switch (source) {
	case CHANNEL_A: TIMSK1 &= ~ (1 << OCIE1A); break;
	case CHANNEL_B: TIMSK1 &= ~ (1 << OCIE1B); break;
#if defined(__AVR_ATmega2560__)
	case CHANNEL_C: TIMSK1 &= ~ (1 << OCIE1C); break;
#endif
	}
}

void Timer_2::disableISR(uint8_t source) {
	TIMSK2 &= ~ (source ? (1 << OCIE2B) : (1 << OCIE2A));
}

#if defined(__AVR_ATmega2560__)
void Timer_3::disableISR(uint8_t source) {
	switch (source) {
	case CHANNEL_A: TIMSK3 &= ~ (1 << OCIE3A); break;
	case CHANNEL_B: TIMSK3 &= ~ (1 << OCIE3B); break;
	case CHANNEL_C: TIMSK3 &= ~ (1 << OCIE3C); break;
	}
}

void Timer_4::disableISR(uint8_t source) {
	switch (source) {
	case CHANNEL_A: TIMSK4 &= ~ (1 << OCIE4A); break;
	case CHANNEL_B: TIMSK4 &= ~ (1 << OCIE4B); break;
	case CHANNEL_C: TIMSK4 &= ~ (1 << OCIE4C); break;
	}
}

void Timer_5::disableISR(uint8_t source) { 
	switch (source) {
	case CHANNEL_A: TIMSK5 &= ~ (1 << OCIE5A); break;
	case CHANNEL_B: TIMSK5 &= ~ (1 << OCIE5B); break;
	case CHANNEL_C: TIMSK5 &= ~ (1 << OCIE5C); break;
	}
}
#endif

// ========================== DEFAULT ==========================
void Timer_0::setDefault(void) {
	TCCR0A = 0x03;  // Fast PWM , 8 bit
	TCCR0B = 0x03;  // Prescaler /64
	OCR0B = 0x00;   // Clear COMPA
	OCR0A = 0x00;   // Clear COMPB
	TCNT0 = 0x00;   // Clear counter
}

void Timer_1::setDefault(void) {
	TCCR1A = 0x01;  // Phasecorrect PWM , 8 bit
	TCCR1B = 0x0B;  // Prescaler /64
	OCR1B = 0x00;   // Clear COMPA
	OCR1A = 0x00;   // Clear COMPB
	TCNT1 = 0x00;   // Clear counter
}

void Timer_2::setDefault(void) {
	TCCR2A = 0x01;  // Phasecorrect PWM , 8 bit
	TCCR2B = 0x04;  // Prescaler /64
	OCR2B = 0x00;   // Clear COMPA
	OCR2A = 0x00;   // Clear COMPB
	TCNT2 = 0x00;   // Clear counter
}


#if defined(__AVR_ATmega2560__)
void Timer_3::setDefault(void) {
	TCCR3A = 0x01;  // Phasecorrect PWM , 8 bit
	TCCR3B = 0x0B;  // Prescaler /64
	OCR3B = 0x00;   // Clear COMPA
	OCR3A = 0x00;   // Clear COMPB
	TCNT3 = 0x00;   // Clear counter
}

void Timer_4::setDefault(void) {
	TCCR4A = 0x01;  // Phasecorrect PWM , 8 bit
	TCCR4B = 0x0B;  // Prescaler /64
	OCR4B = 0x00;   // Clear COMPA
	OCR4A = 0x00;   // Clear COMPB
	TCNT4 = 0x00;   // Clear counter
}

void Timer_5::setDefault(void) {
	TCCR5A = 0x01;  // Phasecorrect PWM , 8 bit
	TCCR5B = 0x0B;  // Prescaler /64
	OCR5B = 0x00;   // Clear COMPA
	OCR5A = 0x00;   // Clear COMPB
	TCNT5 = 0x00;   // Clear counter
}
#endif

// ========================== PHASE SHIFT ==========================
void Timer_0::phaseShift(uint8_t source, uint16_t phase) {
	if (source)	OCR0B = map(phase, 0, 360,  0, OCR0A);
}

void Timer_1::phaseShift(uint8_t source, uint16_t phase) {
	switch (source) {
	case CHANNEL_A: OCR1A = map(phase, 0, 360, 0, ICR1); break;
	case CHANNEL_B: OCR1B = map(phase, 0, 360, 0, ICR1); break;
#if defined(__AVR_ATmega2560__)
	case CHANNEL_C: OCR1C = map(phase, 0, 360, 0, ICR1); break;
#endif
	}
}

void Timer_2::phaseShift(uint8_t source, uint16_t phase) {
	if (source)	OCR2B = map(phase, 0, 360, 0, OCR2A);
}

#if defined(__AVR_ATmega2560__)

void Timer_3::phaseShift(uint8_t source, uint16_t phase) {
	switch (source) {
	case CHANNEL_A: OCR3A = map(phase, 0, 360, 0, ICR3); break;
	case CHANNEL_B: OCR3B = map(phase, 0, 360, 0, ICR3); break;
	case CHANNEL_C: OCR3C = map(phase, 0, 360, 0, ICR3); break;
	}
}

void Timer_4::phaseShift(uint8_t source, uint16_t phase) {
	switch (source) {
	case CHANNEL_A: OCR4A = map(phase, 0, 360, 0, ICR4); break;
	case CHANNEL_B: OCR4B = map(phase, 0, 360, 0, ICR4); break;
	case CHANNEL_C: OCR4C = map(phase, 0, 360, 0, ICR4); break;
	}
}

void Timer_5::phaseShift(uint8_t source, uint16_t phase) {
	switch (source) {
	case CHANNEL_A: OCR5A = map(phase, 0, 360, 0, ICR5); break;
	case CHANNEL_B: OCR5B = map(phase, 0, 360, 0, ICR5); break;
	case CHANNEL_C: OCR5C = map(phase, 0, 360, 0, ICR5); break;
	}
}
#endif


// ========================== ENABLE ISR ==========================
void Timer_0::enableISR(uint8_t source) {
	if (!source) TIMSK0 |= (1 << OCIE0A);
	else TIMSK0 |= (1 << OCIE0B);
}

void Timer_1::enableISR(uint8_t source) {
	switch (source) {
	case CHANNEL_A: TIMSK1 |= (1 << OCIE1A); break;
	case CHANNEL_B: TIMSK1 |= (1 << OCIE1B); break;
#if defined(__AVR_ATmega2560__)
	case CHANNEL_C: TIMSK1 |= (1 << OCIE1C); break;
#endif
	}
}

void Timer_2::enableISR(uint8_t source) {
	if (!source) TIMSK2 |= (1 << OCIE2A);
	else TIMSK2 |= (1 << OCIE2B);
}

#if defined(__AVR_ATmega2560__)

void Timer_3::enableISR(uint8_t source) {
	switch (source) {
	case CHANNEL_A: TIMSK3 |= (1 << OCIE3A); break;
	case CHANNEL_B: TIMSK3 |= (1 << OCIE3B); break;
	case CHANNEL_C: TIMSK3 |= (1 << OCIE3C); break;
	}
}

void Timer_4::enableISR(uint8_t source) {
	switch (source) {
	case CHANNEL_A: TIMSK4 |= (1 << OCIE4A); break;
	case CHANNEL_B: TIMSK4 |= (1 << OCIE4B); break;
	case CHANNEL_C: TIMSK4 |= (1 << OCIE4C); break;
	}
}

void Timer_5::enableISR(uint8_t source) {
	switch (source) {
	case CHANNEL_A: TIMSK5 |= (1 << OCIE5A); break;
	case CHANNEL_B: TIMSK5 |= (1 << OCIE5B); break;
	case CHANNEL_C: TIMSK5 |= (1 << OCIE5C); break;
	}
}
#endif

// ========================== SET FREQUENCY ==========================
uint32_t Timer_0::setFrequency(uint32_t _timer0_frequency) {
	return 1000000UL / (Timer_0::setPeriod(1000000UL / _timer0_frequency));
}

uint32_t Timer_1::setFrequency(uint32_t _timer1_frequency) {
	return 1000000UL / (Timer_1::setPeriod(1000000UL / _timer1_frequency));
}

uint32_t Timer_2::setFrequency(uint32_t _timer2_frequency) {
	return 1000000UL / (Timer_2::setPeriod(1000000UL / _timer2_frequency));
}

#if defined(__AVR_ATmega2560__)

uint32_t Timer_3::setFrequency(uint32_t _timer3_frequency) {
	return 1000000UL / (Timer_3::setPeriod(1000000UL / _timer3_frequency));
}

uint32_t Timer_4::setFrequency(uint32_t _timer4_frequency) {
	return 1000000UL / (Timer_4::setPeriod(1000000UL / _timer4_frequency));
}

uint32_t Timer_5::setFrequency(uint32_t _timer5_frequency) {
	return 1000000UL / (Timer_5::setPeriod(1000000UL / _timer5_frequency));
}

#endif


// ========================== SET FREQUENCY FLOAT ==========================
float Timer_0::setFrequencyFloat(float _timer0_frequency) {
	return 1000000.0F / (Timer_0::setPeriod(1000000.0F / _timer0_frequency));
}

float Timer_1::setFrequencyFloat(float _timer1_frequency) {
	return 1000000.0F / (Timer_1::setPeriod(1000000.0F / _timer1_frequency));
}

float Timer_2::setFrequencyFloat(float _timer2_frequency) {
	return 1000000.0F / (Timer_2::setPeriod(1000000.0F / _timer2_frequency));
}

#if defined(__AVR_ATmega2560__)

float Timer_3::setFrequencyFloat(float _timer3_frequency) {
	return 1000000.0F / (Timer_3::setPeriod(1000000.0F / _timer3_frequency));
}

float Timer_4::setFrequencyFloat(float _timer4_frequency) {
	return 1000000.0F / (Timer_4::setPeriod(1000000.0F / _timer4_frequency));
}

float Timer_5::setFrequencyFloat(float _timer5_frequency) {
	return 1000000.0F / (Timer_5::setPeriod(1000000.0F / _timer5_frequency));
}

#endif

// ========================== OUTPUT ENABLE ==========================
void Timer_0::outputEnable(uint8_t channel, uint8_t mode) {
	switch (channel) {
	case CHANNEL_A: TCCR0A = (TCCR0A & 0x3F) | (mode << 6); break;
	case CHANNEL_B: TCCR0A = (TCCR0A & 0xCF) | (mode << 4); break;
	}
}

void Timer_1::outputEnable(uint8_t channel, uint8_t mode) {
	switch (channel) {
	case CHANNEL_A: TCCR1A = (TCCR1A & 0x3F) | (mode << 6); break;
	case CHANNEL_B: TCCR1A = (TCCR1A & 0xCF) | (mode << 4); break;
#if defined(__AVR_ATmega2560__)
	case CHANNEL_C: TCCR1A = (TCCR1A & 0xF3) | (mode << 2); break;
#endif
	}
}

void Timer_2::outputEnable(uint8_t channel, uint8_t mode) {
	switch (channel) {
	case CHANNEL_A: TCCR2A = (TCCR2A & 0x3F) | (mode << 6); break;
	case CHANNEL_B: TCCR2A = (TCCR2A & 0xCF) | (mode << 4); break;
	}
}

#if defined(__AVR_ATmega2560__)
void Timer_3::outputEnable(uint8_t channel, uint8_t mode) {
	switch (channel) {
	case CHANNEL_A: TCCR3A = (TCCR3A & 0x3F) | (mode << 6); break;
	case CHANNEL_B: TCCR3A = (TCCR3A & 0xCF) | (mode << 4); break;
	case CHANNEL_C: TCCR3A = (TCCR3A & 0xF3) | (mode << 2); break;
	}
}

void Timer_4::outputEnable(uint8_t channel, uint8_t mode) {
	switch (channel) {
	case CHANNEL_A: TCCR4A = (TCCR4A & 0x3F) | (mode << 6); break;
	case CHANNEL_B: TCCR4A = (TCCR4A & 0xCF) | (mode << 4); break;
	case CHANNEL_C: TCCR4A = (TCCR4A & 0xF3) | (mode << 2); break;
	}
}

void Timer_5::outputEnable(uint8_t channel, uint8_t mode) {
	switch (channel) {
	case CHANNEL_A: TCCR5A = (TCCR5A & 0x3F) | (mode << 6); break;
	case CHANNEL_B: TCCR5A = (TCCR5A & 0xCF) | (mode << 4); break;
	case CHANNEL_C: TCCR5A = (TCCR5A & 0xF3) | (mode << 2); break;
	}
}
#endif


// ========================== OUTPUT DISABLE ==========================
void Timer_0::outputDisable(uint8_t channel) {
	switch (channel) {
	case CHANNEL_A: TCCR0A = (TCCR0A & 0x3F); break;
	case CHANNEL_B: TCCR0A = (TCCR0A & 0xCF); break;
	}
}

void Timer_1::outputDisable(uint8_t channel) {
	switch (channel) {
	case CHANNEL_A: TCCR1A = (TCCR1A & 0x3F); break;
	case CHANNEL_B: TCCR1A = (TCCR1A & 0xCF); break;
#if defined(__AVR_ATmega2560__)
	case CHANNEL_C: TCCR1A = (TCCR1A & 0xF3); break;
#endif
	}
}

void Timer_2::outputDisable(uint8_t channel) {
	switch (channel) {
	case CHANNEL_A: TCCR2A = (TCCR2A & 0x3F); break;
	case CHANNEL_B: TCCR2A = (TCCR2A & 0xCF); break;
	}
}

#if defined(__AVR_ATmega2560__)
void Timer_3::outputDisable(uint8_t channel) {
	switch (channel) {
	case CHANNEL_A: TCCR3A = (TCCR3A & 0x3F); break;
	case CHANNEL_B: TCCR3A = (TCCR3A & 0xCF); break;
	case CHANNEL_C: TCCR3A = (TCCR3A & 0xF3); break;
	}
}

void Timer_4::outputDisable(uint8_t channel) {
	switch (channel) {
	case CHANNEL_A: TCCR4A = (TCCR4A & 0x3F); break;
	case CHANNEL_B: TCCR4A = (TCCR4A & 0xCF); break;
	case CHANNEL_C: TCCR4A = (TCCR4A & 0xF3); break;
	}
}

void Timer_5::outputDisable(uint8_t channel) {
	switch (channel) {
	case CHANNEL_A: TCCR5A = (TCCR5A & 0x3F); break;
	case CHANNEL_B: TCCR5A = (TCCR5A & 0xCF); break;
	case CHANNEL_C: TCCR5A = (TCCR5A & 0xF3); break;
	}
}
#endif



// ========================== SET PERIOD ==========================
uint32_t Timer_0::setPeriod(uint32_t _timer0_period)  {	
	_timer0_period = constrain(_timer0_period, 1, MAX_PERIOD_8);

	uint32_t _timer0_cycles = F_CPU / 1000000 * _timer0_period;  // Calculation of the number of timer cycles per period
	uint8_t _timer0_prescaler = 0x00;
	uint16_t _timer0_divider = 0x00;

	if (_timer0_cycles < 256UL) {   // Сhoose optimal divider for the timer
		_timer0_prescaler = 0x01;
		_timer0_divider = 1UL;
	} else if (_timer0_cycles < 256UL * 8) {
		_timer0_prescaler = 0x02;
		_timer0_divider = 8UL;
	} else if (_timer0_cycles < 256UL * 64) {
		_timer0_prescaler = 0x03;
		_timer0_divider = 64UL;
	} else if (_timer0_cycles < 256UL * 256) {
		_timer0_prescaler = 0x04;
		_timer0_divider = 256UL;
	} else {
		_timer0_prescaler = 0x05;
		_timer0_divider = 1024UL;
	}

	uint8_t _timer0_top = (_timer0_cycles < 256UL * 1024 ? (_timer0_cycles / _timer0_divider) : 256UL) ;

	TCCR0A = (TCCR0A & 0xF0)|(1 << WGM21);	// CTC - mode
	TCCR0B = _timer0_prescaler;   			// Set timer prescaler
	OCR0A = _timer0_top - 1;      			// Set timer top
	_timer0_clock = (TCCR0B & 0x07);    	// Save timer clock settings
	
	return (1000000UL / ((F_CPU / _timer0_divider) / _timer0_top));   // Return real timer period
}

uint32_t Timer_1::setPeriod(uint32_t _timer1_period)  {	
	_timer1_period = constrain(_timer1_period, 1, MAX_PERIOD_16);
	
	uint32_t _timer1_cycles = F_CPU / 1000000 * _timer1_period;  // Calculation of the number of timer cycles per period
	uint8_t _timer1_prescaler = 0x00;
	uint16_t _timer1_divider = 0x00;

	if (_timer1_cycles < 65536UL) {   // Сhoose optimal divider for the timer
		_timer1_prescaler = 0x01;
		_timer1_divider = 1UL;
	} else if (_timer1_cycles < 65536UL * 8) {
		_timer1_prescaler = 0x02;
		_timer1_divider = 8UL;
	} else if (_timer1_cycles < 65536UL * 64) {
		_timer1_prescaler = 0x03;
		_timer1_divider = 64UL;
	} else if (_timer1_cycles < 65536UL * 256) {
		_timer1_prescaler = 0x04;
		_timer1_divider = 256UL;
	} else {
		_timer1_prescaler = 0x05;
		_timer1_divider = 1024UL;
	}

	uint16_t _timer1_top = (_timer1_cycles < 65536UL * 1024 ? (_timer1_cycles / _timer1_divider) : 65536UL) ;
#if defined(__AVR_ATmega2560__)
	TCCR1A = (TCCR1A & 0xFC);
#else
	TCCR1A = (TCCR1A & 0xF0);
#endif
	TCCR1B = ((1 << WGM13) | (1 << WGM12) | _timer1_prescaler);   // CTC mode + set prescaler
	ICR1 = _timer1_top - 1;             // Set timer top
	_timer1_clock = (TCCR1B & 0x07);    // Save timer clock settings
	return (1000000UL / ((F_CPU / _timer1_divider) / _timer1_top));   // Return real timer period
}

uint32_t Timer_2::setPeriod(uint32_t _timer2_period)  {	
	_timer2_period = constrain(_timer2_period, 1, MAX_PERIOD_8);
	
	uint32_t _timer2_cycles = F_CPU / 1000000 * _timer2_period;  // Calculation of the number of timer cycles per period
	uint8_t _timer2_prescaler = 0x00;
	uint16_t _timer2_divider = 0x00;

	if (_timer2_cycles < 256UL) {   // Сhoose optimal divider for the timer
		_timer2_prescaler = 0x01;
		_timer2_divider = 1UL;
	} else if (_timer2_cycles < 256UL * 8) {
		_timer2_prescaler = 0x02;
		_timer2_divider = 8UL;
	} else if (_timer2_cycles < 256UL * 32) {
		_timer2_prescaler = 0x03;
		_timer2_divider = 32UL;
	} else if (_timer2_cycles < 256UL * 64) {
		_timer2_prescaler = 0x04;
		_timer2_divider = 64UL;
	} else if (_timer2_cycles < 256UL * 128) {
		_timer2_prescaler = 0x05;
		_timer2_divider = 128UL;
	} else if (_timer2_cycles < 256UL * 256) {
		_timer2_prescaler = 0x06;
		_timer2_divider = 256UL;
	} else {
		_timer2_prescaler = 0x07;
		_timer2_divider = 1024UL;
	}

	uint8_t _timer2_top = (_timer2_cycles < 256UL * 1024 ? (_timer2_cycles / _timer2_divider) : 256UL);

	TCCR2A = (TCCR2A & 0xF0)|(1 << WGM21);      // CTC - mode
	TCCR2B = _timer2_prescaler;   		// Set timer prescaler
	OCR2A = _timer2_top - 1;      		// Set timer top
	_timer2_clock = (TCCR2B & 0x07);    // Save timer clock settings
	
	return (1000000UL / ((F_CPU / _timer2_divider) / _timer2_top));   // Return real timer period
}

#if defined(__AVR_ATmega2560__)

uint32_t Timer_3::setPeriod(uint32_t _timer3_period)  {	
	_timer3_period = constrain(_timer3_period, 1, MAX_PERIOD_16);
	
	uint32_t _timer3_cycles = F_CPU / 1000000 * _timer3_period;  // Calculation of the number of timer cycles per period
	uint8_t _timer3_prescaler = 0x00;
	uint16_t _timer3_divider = 0x00;

	if (_timer3_cycles < 65536UL) {   // Сhoose optimal divider for the timer
		_timer3_prescaler = 0x01;
		_timer3_divider = 1UL;
	} else if (_timer3_cycles < 65536UL * 8) {
		_timer3_prescaler = 0x02;
		_timer3_divider = 8UL;
	} else if (_timer3_cycles < 65536UL * 64) {
		_timer3_prescaler = 0x03;
		_timer3_divider = 64UL;
	} else if (_timer3_cycles < 65536UL * 256) {
		_timer3_prescaler = 0x04;
		_timer3_divider = 256UL;
	} else {
		_timer3_prescaler = 0x05;
		_timer3_divider = 1024UL;
	}

	uint16_t _timer3_top = (_timer3_cycles < 65536UL * 1024 ? (_timer3_cycles / _timer3_divider) : 65536UL) ;

	TCCR3A = (TCCR3A & 0xFC);
	TCCR3B = ((1 << WGM33) | (1 << WGM32) | _timer3_prescaler);   // CTC mode + set prescaler
	ICR3 = _timer3_top - 1;             // Set timer top
	_timer3_clock = (TCCR3B & 0x07);    // Save timer clock settings
	
	return (1000000UL / ((F_CPU / _timer3_divider) / _timer3_top));   // Return real timer period
}

uint32_t Timer_4::setPeriod(uint32_t _timer4_period)  {	
	_timer4_period = constrain(_timer4_period, 1, MAX_PERIOD_16);
	
	uint32_t _timer4_cycles = F_CPU / 1000000 * _timer4_period;  // Calculation of the number of timer cycles per period
	uint8_t _timer4_prescaler = 0x00;
	uint16_t _timer4_divider = 0x00;

	if (_timer4_cycles < 65536UL) {   // Сhoose optimal divider for the timer
		_timer4_prescaler = 0x01;
		_timer4_divider = 1UL;
	} else if (_timer4_cycles < 65536UL * 8) {
		_timer4_prescaler = 0x02;
		_timer4_divider = 8UL;
	} else if (_timer4_cycles < 65536UL * 64) {
		_timer4_prescaler = 0x03;
		_timer4_divider = 64UL;
	} else if (_timer4_cycles < 65536UL * 256) {
		_timer4_prescaler = 0x04;
		_timer4_divider = 256UL;
	} else {
		_timer4_prescaler = 0x05;
		_timer4_divider = 1024UL;
	}

	uint16_t _timer4_top = (_timer4_cycles < 65536UL * 1024 ? (_timer4_cycles / _timer4_divider) : 65536UL) ;

	TCCR4A = (TCCR4A & 0xFC);
	TCCR4B = ((1 << WGM43) | (1 << WGM42) | _timer4_prescaler);   // CTC mode + set prescaler
	ICR4 = _timer4_top - 1;             // Set timer top
	_timer4_clock = (TCCR4B & 0x07);    // Save timer clock settings
	
	return (1000000UL / ((F_CPU / _timer4_divider) / _timer4_top));   // Return real timer period
}

uint32_t Timer_5::setPeriod(uint32_t _timer5_period)  {	
	_timer5_period = constrain(_timer5_period, 1, MAX_PERIOD_16);
	
	uint32_t _timer5_cycles = F_CPU / 1000000 * _timer5_period;  // Calculation of the number of timer cycles per period
	uint8_t _timer5_prescaler = 0x00;
	uint16_t _timer5_divider = 0x00;

	if (_timer5_cycles < 65536UL) {   // Сhoose optimal divider for the timer
		_timer5_prescaler = 0x01;
		_timer5_divider = 1UL;
	} else if (_timer5_cycles < 65536UL * 8) {
		_timer5_prescaler = 0x02;
		_timer5_divider = 8UL;
	} else if (_timer5_cycles < 65536UL * 64) {
		_timer5_prescaler = 0x03;
		_timer5_divider = 64UL;
	} else if (_timer5_cycles < 65536UL * 256) {
		_timer5_prescaler = 0x04;
		_timer5_divider = 256UL;
	} else {
		_timer5_prescaler = 0x05;
		_timer5_divider = 1024UL;
	}

	uint16_t _timer5_top = (_timer5_cycles < 65536UL * 1024 ? (_timer5_cycles / _timer5_divider) : 65536UL) ;

	TCCR5A = (TCCR5A & 0xFC);
	TCCR5B = ((1 << WGM53) | (1 << WGM52) | _timer5_prescaler);   // CTC mode + set prescaler
	ICR5 = _timer5_top - 1;             // Set timer top
	_timer5_clock = (TCCR5B & 0x07);    // Save timer clock settings
	
	return (1000000UL / ((F_CPU / _timer5_divider) / _timer5_top));   // Return real timer period
}

#endif


Timer_0 Timer0 = Timer_0();
Timer_1 Timer1 = Timer_1();
Timer_2 Timer2 = Timer_2();

#if defined(__AVR_ATmega2560__)
Timer_3 Timer3 = Timer_3();
Timer_4 Timer4 = Timer_4();
Timer_5 Timer5 = Timer_5();
#endif

=== Файл: src\GyverTimers\GyverTimers.h ===

/*************************************************************************************
* Developed for AlexGyver https://github.com/AlexGyver/  by Egor 'Nich1con' Zaharov  *
* Library for generating interrupts on hardware timers ATmega328p					 *
* Distributed under a free license indicating the source							 *
* Supported MCU's : ATmega328p, ATmega2560											 *
* v1.0 from 18.02.2020 (Release)													 *
* v1.1 - исправлена ошибка в расчёте периодов									 	 *
* v1.2 - код разбит на h и cpp								 						 *
* v1.3 - поправлен незначительный баг												 *
* v1.4 - исправлена таблица частот и периодов										 *
* v1.5 - исправлен restart и resume			 										 *
* v1.6 - phase shift вынесен отдельным методом 										 *
* v1.7 - поправлена документация			 										 *
* v1.8 - исправлен баг с макс периодом			 									 *
* v1.9 - исправлен баг с возвращаемым 2х периодом			 						 *
*************************************************************************************/

/*
	Настройка и контроль прерываний по аппаратным таймерам
	Документация: https://alexgyver.ru/gyvertimers/
	- Поддерживаются все три таймера на ATmega328 и шесть таймеров на ATmega2560;		
	- Настройка периода (мкс) и частоты (Гц) прерываний:
		- 8 бит таймеры: 61 Гц - 1 МГц (16 384 мкс.. 1 мкс);
		- 16 бит таймеры: 0.24 Гц - 1 МГц (4 200 000 мкс.. 1 мкс);
	- Автоматическая корректировка настройки периода от частоты тактирования (F_CPU);
	- Функция возвращает точный установившийся период/частоту для отладки (частота ограничена разрешением таймера);
	- Поддержка многоканального режима работы: один таймер вызывает 2 (ATmega328) или
	3 (ATmega2560, таймеры 1, 3, 4, 5) прерывания с настраиваемым сдвигом по фазе 0-360 градусов;
	- Настраиваемое действие аппаратного вывода таймера по прерыванию: высокий сигнал, низкий сигнал, переключение. 
	Позволяет генерировать меандр (одно- и двухтактный);
	- Контроль работы таймера: старт/стоп/пауза/продолжить/инициализация;
*/

/*
-------------------------------- Arduino NANO 16 МГц (ATmega328) ------------------------------------
Таймер	| Разрядность	| Частоты			| Периоды			| Выходы	| Пин Arduino	| Пин МК|
--------|---------------|-------------------|-------------------|-----------|---------------|-------|
Timer0	| 8 бит			| 61 Гц - 1 МГц		| 16 384.. 1 мкс	| CHANNEL_A	| D6			| PD6	|
		| 				| 					| 					| CHANNEL_B	| D5			| PD5	|
--------|---------------|-------------------|-------------------|-----------|---------------|-------|
Timer1	| 16 бит		| 0.24 Гц - 1 МГц	| 4 200 000.. 1 мкс	| CHANNEL_A	| D9			| PB1	|
		| 				| 					| 					| CHANNEL_B	| D10			| PB2	|
--------|---------------|-------------------|-------------------|-----------|---------------|-------|
Timer2	| 8 бит			| 61 Гц - 1 МГц		| 16 384.. 1 мкс	| CHANNEL_A	| D11			| PB3	|
		| 				| 					| 					| CHANNEL_B	| D3			| PD3	|
----------------------------------------------------------------------------------------------------
						
------------------------------ Arduino MEGA 16 МГц (ATmega2560) -------------------------------------
Таймер	| Разрядность	| Частоты			| Периоды			| Выходы	| Пин Arduino	| Пин МК|
--------|---------------|-------------------|-------------------|-----------|---------------|-------|
Timer0	| 8 бит			| 61 Гц - 1 МГц		| 16 384.. 1 мкс	| CHANNEL_A	| 13			| PB7	|
		| 				| 					| 					| CHANNEL_B	| 4				| PG5	|
--------|---------------|-------------------|-------------------|-----------|---------------|-------|
Timer1	| 16 бит		| 0.24 Гц - 1 МГц	| 4 200 000.. 1 мкс	| CHANNEL_A	| 11			| PB5	|
		| 				| 					| 					| CHANNEL_B	| 12			| PB6	|
		| 				| 					| 					| CHANNEL_C	| 13			| PB7	|
--------|---------------|-------------------|-------------------|-----------|---------------|-------|
Timer2	| 8 бит			| 61 Гц - 1 МГц		| 16 384.. 1 мкс	| CHANNEL_A	| 10			| PB4	|
		| 				| 					| 					| CHANNEL_B	| 9				| PH6	|
--------|---------------|-------------------|-------------------|-----------|---------------|-------|
Timer3	| 16 бит		| 0.24 Гц - 1 МГц	| 4 200 000.. 1 мкс	| CHANNEL_A	| 5				| PE3	|
		| 				| 					| 					| CHANNEL_B	| 2				| PE4	|
		| 				| 					| 					| CHANNEL_C	| 3				| PE5	|
--------|---------------|-------------------|-------------------|-----------|---------------|-------|
Timer4	| 16 бит		| 0.24 Гц - 1 МГц	| 4 200 000.. 1 мкс	| CHANNEL_A	| 6				| PH3	|
		| 				| 					| 					| CHANNEL_B	| 7				| PH4	|
		| 				| 					| 					| CHANNEL_C	| 8				| PH5	|
--------|---------------|-------------------|-------------------|-----------|---------------|-------|
Timer5	| 16 бит		| 0.24 Гц - 1 МГц	| 4 200 000.. 1 мкс	| CHANNEL_A	| 46			| PL3	|
		| 				| 					| 					| CHANNEL_B	| 45			| PL4	|
		| 				| 					| 					| CHANNEL_C	| 44			| PL5	|
----------------------------------------------------------------------------------------------------
*/

/*
	setPeriod(период) - установка периода в микросекундах и запуск таймера. Возвращает реальный период (точность ограничена разрешением таймера).
	setFrequency(частота) - установка частоты в Герцах и запуск таймера. Возвращает реальную частоту (точность ограничена разрешением таймера).
	setFrequencyFloat(частота float) - установка частоты в Герцах и запуск таймера, разрешены десятичные дроби. Возвращает реальную частоту (точность ограничена разрешением таймера).
	enableISR(источник) - включить прерывания, канал прерываний CHANNEL_A или CHANNEL_B (+ CHANNEL_C у Mega2560)
	disableISR(источник) - выключить прерывания, канал CHANNEL_A или CHANNEL_B. Счёт таймера не останавливается (без указания параметров будет выключен канал А).
	pause() - приостановить счёт таймера, не сбрасывая счётчик
	resume() - продолжить счёт после паузы
	stop() - остановить счёт и сбросить счётчик
	restart() - перезапустить таймер (сбросить счётчик)
	setDefault() - установить параметры таймера по умолчанию ("Ардуино-умолчания")
	outputEnable(канал, режим) - канал: включить выход таймера CHANNEL_A или CHANNEL_B (+ CHANNEL_C у Mega2560). Режим: TOGGLE_PIN, CLEAR_PIN, SET_PIN (переключить/выключить/включить пин по прерыванию)
	outputDisable(канал) - отключить выход таймера CHANNEL_A или CHANNEL_B (+ CHANNEL_C у Mega2560, см. такблицу таймеров)
	outputState(канал, состояние) - сменить состояние канала: HIGH / LOW
	phaseShift(источник, фаза) - сдвинуть фазу канала на 0-360 градусов (у 8 бит таймеров двигается только канал B)
*/

#define MAX_PERIOD_8 (1000000UL * 1024UL / F_CPU * 256UL)		// 16384 (61 Гц) на 16 МГц
#define MAX_PERIOD_16 (1000000UL * 1024UL / F_CPU * 65536UL)	// 4194304 (0.24 Гц) на 16 МГц

#ifndef GyverTimers_h
#define GyverTimers_h
#include <Arduino.h>

/* ==========  Константы ========== */
#define CHANNEL_A 0x00
#define CHANNEL_B 0x01
#define CHANNEL_C 0x02

#define TOGGLE_PIN 0x01
#define CLEAR_PIN 0x02
#define SET_PIN 0x03

#define TIMER0_A  TIMER0_COMPA_vect
#define TIMER0_B  TIMER0_COMPB_vect
#define TIMER1_A  TIMER1_COMPA_vect
#define TIMER1_B  TIMER1_COMPB_vect
#define TIMER2_A  TIMER2_COMPA_vect
#define TIMER2_B  TIMER2_COMPB_vect

#if defined(__AVR_ATmega2560__)
#define TIMER1_C  TIMER1_COMPC_vect
#define TIMER3_A  TIMER3_COMPA_vect
#define TIMER3_B  TIMER3_COMPB_vect
#define TIMER3_C  TIMER3_COMPC_vect
#define TIMER4_A  TIMER4_COMPA_vect
#define TIMER4_B  TIMER4_COMPB_vect
#define TIMER4_C  TIMER4_COMPC_vect
#define TIMER5_A  TIMER5_COMPA_vect
#define TIMER5_B  TIMER5_COMPB_vect
#define TIMER5_C  TIMER5_COMPC_vect
#endif

#define GYVERTIMERS_INLINE
/*inline __attribute__((always_inline))*/

/* ================ Сlasses of timers ================ */
class Timer_0 {                       					  // Timer 0
public:
	uint32_t setPeriod(uint32_t _timer0_period);          // Set timer period [us]
	uint32_t setFrequency(uint32_t _timer0_frequency);    // Set timer frequency [Hz]
	float setFrequencyFloat(float _timer0_frequency);  	  // Set timer float frequency [Hz]
	
	GYVERTIMERS_INLINE
	void enableISR(uint8_t source = CHANNEL_A);           // Enable timer interrupt , channel A or B 
	
	GYVERTIMERS_INLINE
	void disableISR(uint8_t source = CHANNEL_A);          // Disable timer interrupt , channel A or B
	
	GYVERTIMERS_INLINE
	void pause(void);                   				  // Disable timer clock , not cleaning the counter
	
	GYVERTIMERS_INLINE
	void resume(void);                 				      // Return clock timer settings
	
	GYVERTIMERS_INLINE
	void stop(void);                   					  // Disable timer clock , and cleaning the counter
	
	GYVERTIMERS_INLINE
	void restart(void);                  				  // Return clock timer settings & reset counter
	
	GYVERTIMERS_INLINE
	void setDefault(void);               			      // Set default timer settings
	
	GYVERTIMERS_INLINE
	void outputEnable(uint8_t channel, uint8_t mode);	  // Enable and configurate timer hardware output
	
	GYVERTIMERS_INLINE
	void outputDisable(uint8_t channel);				  // Disable timer hardware output
	
	GYVERTIMERS_INLINE
	void outputState(uint8_t channel,bool state);		  // Set High / Low on the timer output 
	
	GYVERTIMERS_INLINE
	void phaseShift(uint8_t source, uint16_t phase);
	
private:
	uint8_t _timer0_clock = 0x00;           			  // Variable to store timer clock settings
};

class Timer_1 {                      					  // Timer 1
public:
	uint32_t setPeriod(uint32_t _timer1_period);      	  // Set timer period [Hz]
	uint32_t setFrequency(uint32_t _timer1_frequency);    // Set timer frequency [Hz]
	float setFrequencyFloat(float _timer1_frequency);     // Set timer float frequency [Hz]
	
	GYVERTIMERS_INLINE
	void enableISR(uint8_t source = CHANNEL_A);       	  // Enable timer interrupt , channel A or B 
	
	GYVERTIMERS_INLINE
	void disableISR(uint8_t source = CHANNEL_A);          // Disable timer interrupt , channel A or B
	
	GYVERTIMERS_INLINE
	void pause(void);                   				  // Disable timer clock , not cleaning the counter
	
	GYVERTIMERS_INLINE
	void resume(void);                    				  // Return clock timer settings
	
	GYVERTIMERS_INLINE
	void stop(void);                    				  // Disable timer clock , and cleaning the counter	
	
	GYVERTIMERS_INLINE
	void restart(void);                   				  // Return clock timer settings & reset counter
	
	GYVERTIMERS_INLINE
	void setDefault(void);                  			  // Set default timer settings
	
	GYVERTIMERS_INLINE
	void outputEnable(uint8_t channel, uint8_t mode);	  // Enable and configurate timer hardware output
	
	GYVERTIMERS_INLINE
	void outputDisable(uint8_t channel);				  // Disable timer hardware output
	
	GYVERTIMERS_INLINE
	void outputState(uint8_t channel,bool state);		  // Set High / Low on the timer output  
	
	GYVERTIMERS_INLINE
	void phaseShift(uint8_t source, uint16_t phase);
	
private:
	uint8_t _timer1_clock = 0x00;             			  // Variable to store timer clock settings
};

class Timer_2 {                       					  // Timer 2
public:
	uint32_t setPeriod(uint32_t _timer2_period);      	  // Set timer period [Hz]
	uint32_t setFrequency(uint32_t _timer2_frequency);    // Set timer frequency [Hz]
	float setFrequencyFloat(float _timer2_frequency);     // Set timer float frequency [Hz]
	
	GYVERTIMERS_INLINE
	void enableISR(uint8_t source = CHANNEL_A);      	  // Enable timer interrupt , channel A or B 
	
	GYVERTIMERS_INLINE
	void disableISR(uint8_t source = CHANNEL_A);          // Disable timer interrupt , channel A or B
	
	GYVERTIMERS_INLINE
	void pause(void);                   				  // Disable timer clock , not cleaning the counter
	
	GYVERTIMERS_INLINE
	void resume(void);                 				      // Return clock timer settings
	
	GYVERTIMERS_INLINE
	void stop(void);                    				  // Disable timer clock , and cleaning the counter
	
	GYVERTIMERS_INLINE
	void restart(void);                  				  // Return clock timer settings & reset counter
	
	GYVERTIMERS_INLINE
	void setDefault(void);                  			  // Set default timer settings
	
	GYVERTIMERS_INLINE
	void outputEnable(uint8_t channel, uint8_t mode);	  // Enable and configurate timer hardware output
	
	GYVERTIMERS_INLINE
	void outputDisable(uint8_t channel);				  // Disable timer hardware output
	
	GYVERTIMERS_INLINE
	void outputState(uint8_t channel,bool state);		  // Set High / Low on the timer output  
	
	GYVERTIMERS_INLINE
	void phaseShift(uint8_t source, uint16_t phase);
	
private:
	uint8_t _timer2_clock = 0x00;             			  // Variable to store timer clock settings	
};

#if defined(__AVR_ATmega2560__)
class Timer_3 {                       					  // Timer 3
public:
	uint32_t setPeriod(uint32_t _timer3_period);     	  // Set timer period [Hz]
	uint32_t setFrequency(uint32_t _timer3_frequency);    // Set timer frequency [Hz]
	float setFrequencyFloat(float _timer3_frequency);     // Set timer float frequency [Hz]
	
	GYVERTIMERS_INLINE
	void enableISR(uint8_t source = CHANNEL_A);       	  // Enable timer interrupt , channel A or B
	
	GYVERTIMERS_INLINE
	void disableISR(uint8_t source = CHANNEL_A);          // Disable timer interrupt , channel A or B
	
	GYVERTIMERS_INLINE
	void pause(void);                  					  // Disable timer clock , not cleaning the counter
	
	GYVERTIMERS_INLINE
	void resume(void);                   				  // Return clock timer settings
	
	GYVERTIMERS_INLINE
	void stop(void);                    				  // Disable timer clock , and cleaning the counter
	
	GYVERTIMERS_INLINE
	void restart(void);                   				  // Return clock timer settings & reset counter
	
	GYVERTIMERS_INLINE
	void setDefault(void);                				  // Set default timer settings
	
	GYVERTIMERS_INLINE
	void outputEnable(uint8_t channel, uint8_t mode);	  // Enable and configurate timer hardware output
	
	GYVERTIMERS_INLINE
	void outputDisable(uint8_t channel);				  // Disable timer hardware output
	
	GYVERTIMERS_INLINE
	void outputState(uint8_t channel,bool state);		  // Set High / Low on the timer output 
	
	GYVERTIMERS_INLINE
	void phaseShift(uint8_t source, uint16_t phase);
	
private:
	uint8_t _timer3_clock = 0x00;             			  // Variable to store timer clock settings
};

class Timer_4 {                      					  // Timer 4
public:
	uint32_t setPeriod(uint32_t _timer4_period);      	  // Set timer period [Hz]
	uint32_t setFrequency(uint32_t _timer4_frequency);    // Set timer frequency [Hz]
	float setFrequencyFloat(float _timer4_frequency);     // Set timer float frequency [Hz]
	
	GYVERTIMERS_INLINE
	void enableISR(uint8_t source = CHANNEL_A);       	  // Enable timer interrupt , channel A or B
	
	GYVERTIMERS_INLINE
	void disableISR(uint8_t source = CHANNEL_A);          // Disable timer interrupt , channel A or B
	
	GYVERTIMERS_INLINE
	void pause(void);                  					  // Disable timer clock , not cleaning the counter
	
	GYVERTIMERS_INLINE
	void resume(void);                    				  // Return clock timer settings
	
	GYVERTIMERS_INLINE
	void stop(void);                   				      // Disable timer clock , and cleaning the counter
	
	GYVERTIMERS_INLINE
	void restart(void);                        			  // Return clock timer settings & reset counter
	
	GYVERTIMERS_INLINE
	void setDefault(void);                  			  // Set default timer settings
	
	GYVERTIMERS_INLINE
	void outputEnable(uint8_t channel, uint8_t mode);	  // Enable and configurate timer hardware output
	
	GYVERTIMERS_INLINE
	void outputDisable(uint8_t channel);				  // Disable timer hardware output
	
	GYVERTIMERS_INLINE
	void outputState(uint8_t channel,bool state);		  // Set High / Low on the timer output 
	
	GYVERTIMERS_INLINE
	void phaseShift(uint8_t source, uint16_t phase);
	
private:
	uint8_t _timer4_clock = 0x00;            			  // Variable to store timer clock settings
};

class Timer_5 {                     					  // Timer 5
public:
	uint32_t setPeriod(uint32_t _timer5_period);          // Set timer period [Hz]
	uint32_t setFrequency(uint32_t _timer5_frequency);    // Set timer frequency [Hz]
	float setFrequencyFloat(float _timer5_frequency);     // Set timer float frequency [Hz]
	
	GYVERTIMERS_INLINE
	void enableISR(uint8_t source = CHANNEL_A);       	  // Enable timer interrupt , channel A or B
	
	GYVERTIMERS_INLINE
	void disableISR(uint8_t source = CHANNEL_A);          // Disable timer interrupt , channel A or B
	
	GYVERTIMERS_INLINE
	void pause(void);                  					  // Disable timer clock , not cleaning the counter
	
	GYVERTIMERS_INLINE
	void resume(void);                    				  // Return clock timer settings
	
	GYVERTIMERS_INLINE
	void stop(void);                    				  // Disable timer clock , and cleaning the counter
	
	GYVERTIMERS_INLINE
	void restart(void);                  				  // Return clock timer settings & reset counter
	
	GYVERTIMERS_INLINE
	void setDefault(void);                 				  // Set default timer settings
	
	GYVERTIMERS_INLINE
	void outputEnable(uint8_t channel, uint8_t mode);	  // Enable and configurate timer hardware output
	
	GYVERTIMERS_INLINE
	void outputDisable(uint8_t channel);				  // Disable timer hardware output
	
	GYVERTIMERS_INLINE
	void outputState(uint8_t channel,bool state);		  // Set High / Low on the timer output 
	
	GYVERTIMERS_INLINE
	void phaseShift(uint8_t source, uint16_t phase);
	
private:
	uint8_t _timer5_clock = 0x00;                		  // Variable to store timer clock settings
};

#endif

extern Timer_0 Timer0;
extern Timer_1 Timer1;
extern Timer_2 Timer2;

#if defined(__AVR_ATmega2560__)
extern Timer_3 Timer3;
extern Timer_4 Timer4;
extern Timer_5 Timer5;
#endif

#endif

=== Файл: src\GyverTimers\keywords.txt ===

#######################################
# Syntax Coloring Map For GyverTimers
#######################################

#######################################
# Datatypes (KEYWORD1)
#######################################
GyverTimers	KEYWORD1

Timer0	KEYWORD1
Timer1	KEYWORD1
Timer2	KEYWORD1
Timer3	KEYWORD1
Timer4	KEYWORD1
Timer5	KEYWORD1

#######################################
# Methods and Functions (KEYWORD2)
#######################################
ISR	KEYWORD2

setPeriod	KEYWORD2
setFrequency	KEYWORD2
setFrequencyFloat	KEYWORD2
enableISR	KEYWORD2
disableISR	KEYWORD2
pause	KEYWORD2
resume	KEYWORD2
stop	KEYWORD2
restart	KEYWORD2
setDefault	KEYWORD2
outputEnable	KEYWORD2
outputDisable	KEYWORD2
outputState	KEYWORD2
phaseShift	KEYWORD2

#######################################
# Constants (LITERAL1)
#######################################
TIMER0_A	LITERAL1
TIMER0_B	LITERAL1
TIMER1_A	LITERAL1
TIMER1_B	LITERAL1
TIMER1_C	LITERAL1
TIMER2_A	LITERAL1
TIMER2_B	LITERAL1
TIMER3_A	LITERAL1
TIMER3_B	LITERAL1
TIMER3_C	LITERAL1
TIMER4_A	LITERAL1
TIMER4_B	LITERAL1
TIMER4_C	LITERAL1
TIMER5_A	LITERAL1
TIMER5_B	LITERAL1
TIMER5_C	LITERAL1

CHANNEL_A	LITERAL1
CHANNEL_B	LITERAL1
CHANNEL_C	LITERAL1

TOGGLE_PIN	LITERAL1
CLEAR_PIN	LITERAL1
SET_PIN	LITERAL1

=== Файл: src\GyverTimers\examples\all_functions\all_functions.ino ===

// Демонстрация всех функций библиотеки

#include <GyverTimers.h>

void setup() {
  // Перенастроить таймер и задать ему период или частоту
  // Все функции возвращают реальный период / частоту, которые могут отличаться от введенных
  Timer2.setPeriod(1000);           // Задать конкретный период 1000 мкс (~ 1000 гц), вернет реальный период в мкс
  Timer0.setFrequency(250);         // Задать частоту прерываний таймера в Гц, вернет реальную частоту в герцах
  Timer1.setFrequencyFloat(50.20);  // Задать частоту более точно, в дробных числах, актуально для низких частот и таймера 1
  // С этого момента таймер уже перенастроен и гоняет с выьранной частотой / периодом

  // Подключить прерывание таймера, с этого момента прерывания начнут вызываться
  Timer0.enableISR();               // Подключить стандартное прерывание, канал А, без сдига фаз
  Timer2.enableISR(CHANNEL_B); // Подключить прерывание таймера 2, канал B
  Timer1.enableISR(CHANNEL_A);  // Подключить прерывание канала А
  Timer1.enableISR(CHANNEL_B); // Подключить второе прерывание таймера 1
  // Прерывание уже начнет вызываться

  // Если вдруг прерывание нужно отключить, не останавливая таймер
  Timer1.disableISR(CHANNEL_B);
  // С этого момента прерывание B больше не будет вызываться

  // Если нужно приостановить таймер ПОЛНОСТЬЮ, аппаратно
  Timer2.pause();
  // С этого момента таймер стоит на месте, содержимое счетчика остается нетронутым

  // Теперь таймер можно вернуть в строй
  Timer2.resume();
  // Таймер продолжил считать с того же места

  // Если нужно полностью остановить таймер и сбросить содержимое счетчика
  Timer1.stop();
  // Таймер стоит, счетчик сброшен

  // Возвращаем таймер в строй
  Timer1.restart();
  // Таймер перезапущен, начал считать с начала

  // Если нужно вернуть стандартные Arduino - настройки таймера
  Timer0.setDefault();
  // Теперь таймер работает в станлартном режиме
}

// векторы прерываний
ISR(TIMER1_A) {

}

ISR(TIMER1_B) {

}

ISR(TIMER2_B) {

}

ISR(TIMER0_A) {

}

void loop() {

}


=== Файл: src\GyverTimers\examples\double_interrupts\double_interrupts.ino ===

// Пример генерации двухканальных прерываний на таймере с РАВНЫМ периодом, но сдвинутых по фазе
// два потока прерываний с сдвигом 180 градусов (полная инверсия)

#include <GyverTimers.h>

void setup() {
  Serial.begin(9600);

  Serial.print("Real timer frequency is : ");        // Выведем реальную частоту, реальная может отличаться от заданой (ограничено разрешением таймера)
  Serial.println(Timer1.setFrequencyFloat(2.50));    // Частота прерываний - 2.5 гц , используй .setFrequency(...) для целых чисел
  delay(1000);
  Timer1.enableISR(CHANNEL_A);        // Первый канал - А
  Timer1.enableISR(CHANNEL_B);        // Второй канал - B  
  Timer1.phaseShift(CHANNEL_B, 180);  // сдвинем фазу относительно первого
}

void loop() {}

// два прерывания на одном таймере
ISR(TIMER1_A) {
  Serial.println(" Channel A interrupt !");   // Прерывание А
}

ISR(TIMER1_B) {
  Serial.println(" Channel B interrupt !");   // Прерывание B
}


=== Файл: src\GyverTimers\examples\encoder_mode\encoder_mode.ino ===

// Пример генерации двухтактного меандра на таймере 2 (пины D3 и D11)
#include <GyverTimers.h>

void setup() {
  pinMode(3, OUTPUT);                           // настроить пин как выход
  pinMode(11, OUTPUT);                          // настроить пин как выход

  // из-за особенности генерации меандра таймером
  // частоту нужно указывать в два раза больше нужной!
  Timer2.setFrequency(15000 * 2);               // настроить частоту в Гц и запустить таймер. Меандр на 15 кГц
  Timer2.outputEnable(CHANNEL_A, TOGGLE_PIN);   // в момент срабатывания таймера пин будет переключаться
  Timer2.outputEnable(CHANNEL_B, TOGGLE_PIN);   // в момент срабатывания таймера пин будет переключаться

  // задаём фазовый сдвиг 0-360 (для всех каналов кроме A на 8 бит таймерах)
  Timer2.phaseShift(CHANNEL_B, 180);
}

void loop() {
}


=== Файл: src\GyverTimers\examples\meandr_2tact\meandr_2tact.ino ===

// Пример генерации двухтактного меандра на таймере 2 (пины D3 и D11)
#include <GyverTimers.h>

void setup() {
  pinMode(3, OUTPUT);                           // настроить пин как выход
  pinMode(11, OUTPUT);                          // настроить пин как выход

  // из-за особенности генерации меандра таймером
  // частоту нужно указывать в два раза больше нужной!
  Timer2.setFrequency(15000 * 2);               // настроить частоту в Гц и запустить таймер. Меандр на 15 кГц
  Timer2.outputEnable(CHANNEL_A, TOGGLE_PIN);   // в момент срабатывания таймера пин будет переключаться
  Timer2.outputEnable(CHANNEL_B, TOGGLE_PIN);   // в момент срабатывания таймера пин будет переключаться
  Timer2.outputState(CHANNEL_A, HIGH);          // задаём начальное состояние пина 11
  Timer2.outputState(CHANNEL_B, LOW);           // задаём начальное состояние пина 3
}

void loop() {
}

=== Файл: src\GyverTimers\examples\meandr_test\meandr_test.ino ===

//Пример генерации меандра на таймере 2 , канале B (D3 на Arduino UNO)
#include <GyverTimers.h>

void setup() {
  pinMode(3, OUTPUT);                           // настроить пин как выход

  // из-за особенности генерации меандра таймером
  // частоту нужно указывать в два раза больше нужной!
  Timer2.setFrequency(500 * 2);                 // настроить частоту таймера в Гц
  Timer2.outputEnable(CHANNEL_B, TOGGLE_PIN);   // в момент срабатывания таймера пин будет переключаться
}

void loop() {
}

=== Файл: src\GyverTimers\examples\simple\simple.ino ===

// Пример простой генерации прерываний аппаратным таймером
#include <GyverTimers.h>

void setup() {
  Serial.begin(9600);
  Timer1.setFrequency(3);               // Высокоточный таймер 1 для первого прерывания, частота - 3 Герца
  //Timer1.setPeriod(333333);           // то же самое! Частота 3 Гц это период 333 333 микросекунд
  //Timer1.setFrequencyFloat(4.22);     // Если нужна дробная частота в Гц  
  Timer1.enableISR();                   // Запускаем прерывание (по умолч. канал А)

  // запустим второй таймер
  Timer2.setPeriod(20000);     // Устанавливаем период таймера 20000 мкс -> 50 гц
  Timer2.enableISR(CHANNEL_A);   // Или просто .enableISR(), запускаем прерывание на канале А таймера 2
  pinMode(13, OUTPUT);           // будем мигать
}

void loop() {}

// Прерывание А таймера 1
ISR(TIMER1_A) {  // пишем  в сериал
  Serial.println("timer1");
}

// Прерывание А таймера 2
ISR(TIMER2_A) {
  // генерируем меандр 25 гц (в два раза меньше частоты), мигаем
  digitalWrite(13, !digitalRead(13));
  //Serial.println("timer2");
}


=== Файл: src\GyverTM1637\GyverTM1637.cpp ===

#include "GyverTM1637.h"
#include <Arduino.h>
const uint8_t digitHEX[] = {0x3f, 0x06, 0x5b, 0x4f,
	0x66, 0x6d, 0x7d, 0x07,
	0x7f, 0x6f, 0x00, 0x40
};//0~9, ,-

GyverTM1637::GyverTM1637(uint8_t clk, uint8_t dio)
{
	Clkpin = clk;
	Datapin = dio;
	pinMode(Clkpin, OUTPUT);
	pinMode(Datapin, OUTPUT);
}

uint8_t digToHEX(uint8_t digit) {
	return digitHEX[digit];
}

int GyverTM1637::writeByte(int8_t wr_data)
{
	for (byte i = 0; i < 8; i++) //sent 8bit data
	{
		digitalWrite(Clkpin, LOW);
		if (wr_data & 0x01)digitalWrite(Datapin, HIGH); //LSB first
		else digitalWrite(Datapin, LOW);
		wr_data >>= 1;
		digitalWrite(Clkpin, HIGH);

	}
	digitalWrite(Clkpin, LOW); //wait for the ACK
	digitalWrite(Datapin, HIGH);
	digitalWrite(Clkpin, HIGH);
	pinMode(Datapin, INPUT);

	delayMicroseconds(50);
	uint8_t ack = digitalRead(Datapin);
	if (ack == 0)
	{
		pinMode(Datapin, OUTPUT);
		digitalWrite(Datapin, LOW);
	}
	delayMicroseconds(50);
	pinMode(Datapin, OUTPUT);
	delayMicroseconds(50);

	return ack;
}
//send start signal to GyverTM1637
void GyverTM1637::start(void)
{
	digitalWrite(Clkpin, HIGH); //send start signal to GyverTM1637
	digitalWrite(Datapin, HIGH);
	digitalWrite(Datapin, LOW);
	digitalWrite(Clkpin, LOW);
}
//End of transmission
void GyverTM1637::stop(void)
{
	digitalWrite(Clkpin, LOW);
	digitalWrite(Datapin, LOW);
	digitalWrite(Clkpin, HIGH);
	digitalWrite(Datapin, HIGH);
}

// ************************** ФОРМИРУЕМ ДАННЫЕ *****************************
void GyverTM1637::display(uint8_t DispData[])
{
	uint8_t SegData[4];
	for (byte i = 0; i < 4; i ++) {
		//if (DispData[i] == 0x7f) SegData[i] = 0x00;
		//else 
		//{
		lastData[i] = digitHEX[DispData[i]];
		SegData[i] = digitHEX[DispData[i]] + PointData;
		//}
	}
	sendArray(SegData);
}
void GyverTM1637::displayByte(uint8_t DispData[])
{
	uint8_t SegData[4];
	for (byte i = 0; i < 4; i ++) {
		//if (DispData[i] == 0x7f) SegData[i] = 0x00;
		//else SegData[i] = DispData[i];
		//{
		lastData[i] = DispData[i];
		SegData[i] = DispData[i] + PointData;
		//}	
	}
	sendArray(SegData);
}

void GyverTM1637::display(uint8_t BitAddr, uint8_t DispData)
{ 
	uint8_t SegData;
	//if (DispData == 0x7f) SegData = 0x00;
	//else
	//{  
	lastData[BitAddr] = digitHEX[DispData];
	SegData = digitHEX[DispData] + PointData;
	//}  
	sendByte(BitAddr, SegData);
}

void GyverTM1637::displayByte(uint8_t BitAddr, uint8_t DispData)
{
	uint8_t SegData;
	//if (DispData == 0x7f) SegData = 0x00;
	//else
	//{  
	lastData[BitAddr] = DispData;
	SegData = DispData + PointData;
	//}  
	sendByte(BitAddr, SegData);
}

// ************************** ОТПРАВКА НА ДИСПЛЕЙ *****************************
void GyverTM1637::sendByte(uint8_t BitAddr, int8_t sendData) {
	start();          //start signal sent to GyverTM1637 from MCU
	writeByte(ADDR_FIXED);//
	stop();           //
	start();          //
	writeByte(BitAddr | 0xc0); //
	writeByte(sendData);//
	stop();            //
	start();          //
	writeByte(Cmd_DispCtrl);//
	stop();           //
}

void GyverTM1637::sendArray(uint8_t sendData[]) {
	start();          //start signal sent to GyverTM1637 from MCU
	writeByte(ADDR_AUTO);//
	stop();           //
	start();          //
	writeByte(Cmd_SetAddr);//
	for (byte i = 0; i < 4; i ++) {
		writeByte(sendData[i]);        //
	}
	stop();           //
	start();          //
	writeByte(Cmd_DispCtrl);//
	stop();           //
}
// ******************************************
void GyverTM1637::displayByte(uint8_t bit0, uint8_t bit1, uint8_t bit2, uint8_t bit3) {
	uint8_t dispArray[] = {bit0, bit1, bit2, bit3};	
	displayByte(dispArray);
}
void GyverTM1637::display(uint8_t bit0, uint8_t bit1, uint8_t bit2, uint8_t bit3) {
	uint8_t dispArray[] = {bit0, bit1, bit2, bit3};	
	display(dispArray);
}

void GyverTM1637::clear(void)
{
	display(0x00, 0x7f);
	display(0x01, 0x7f);
	display(0x02, 0x7f);
	display(0x03, 0x7f);
	lastData[0] = 0x00;
	lastData[1] = 0x00;
	lastData[2] = 0x00;
	lastData[3] = 0x00;
}
void GyverTM1637::update(void)
{
	displayByte(lastData);
}

void GyverTM1637::brightness(uint8_t brightness, uint8_t SetData, uint8_t SetAddr)
{
	Cmd_SetData = SetData;
	Cmd_SetAddr = SetAddr;
	Cmd_DispCtrl = 0x88 + brightness;//Set the brightness and it takes effect the next time it displays.
	update();
}


void GyverTM1637::point(boolean PointFlag)
{
	if (PointFlag) PointData = 0x80;
	else PointData = 0;
	update();
}

// ************************** ВСЯКИЕ ФУНКЦИИ *****************************
void GyverTM1637::displayClock(uint8_t hrs, uint8_t mins) {
	if (hrs > 99 || mins > 99) return;
	uint8_t disp_time[4];	
	if ((hrs / 10) == 0) disp_time[0] = 10;
	else disp_time[0] = (hrs / 10);
	disp_time[1] = hrs % 10;
	disp_time[2] = mins / 10;
	disp_time[3] = mins % 10;
	GyverTM1637::display(disp_time);
}
void GyverTM1637::displayClockScroll(uint8_t hrs, uint8_t mins, int delayms) {
	if (hrs > 99 || mins > 99) return;
	uint8_t disp_time[4];	
	if ((hrs / 10) == 0) disp_time[0] = 10;
	else disp_time[0] = (hrs / 10);
	disp_time[1] = hrs % 10;
	disp_time[2] = mins / 10;
	disp_time[3] = mins % 10;
	scroll(disp_time, delayms);
}
void GyverTM1637::displayClockTwist(uint8_t hrs, uint8_t mins, int delayms) {
	if (hrs > 99 || mins > 99) return;
	uint8_t disp_time[4];	
	if ((hrs / 10) == 0) disp_time[0] = 10;
	else disp_time[0] = (hrs / 10);
	disp_time[1] = hrs % 10;
	disp_time[2] = mins / 10;
	disp_time[3] = mins % 10;
	twist(disp_time, delayms);	
}

void GyverTM1637::displayInt(int value) {
	if (value > 9999 || value < -999) return;
	boolean negative = false;
	byte digits[4];
	if (value < 0) negative = true;	
	value = abs(value);	
	digits[0] = (int)value / 1000;      	// количесто тысяч в числе
	uint16_t b = (int)digits[0] * 1000; 	// вспомогательная переменная
	digits[1] = ((int)value - b) / 100; 	// получем количество сотен
	b += digits[1] * 100;               	// суммируем сотни и тысячи
	digits[2] = (int)(value - b) / 10;  	// получем десятки
	b += digits[2] * 10;                	// сумма тысяч, сотен и десятков
	digits[3] = value - b;              	// получаем количество единиц
	
	if (!negative) {
		for (byte i = 0; i < 3; i++) {
			if (digits[i] == 0) digits[i] = 10;
			else break;
		}
	} else {
		for (byte i = 0; i < 3; i++) {
			if (digits[i] == 0) {
				if (digits[i + 1] == 0){
					digits[i] = 10;
				} else {
					digits[i] = 11;
					break;
				}
			}			
		}
	}
	GyverTM1637::display(digits);
}

void GyverTM1637::runningString(uint8_t DispData[], byte amount, int delayMs) {
	uint8_t segm_data[amount + 8];    // оставляем место для 4х пустых слотов в начале и в конце
	for (byte i = 0; i < 4; i++) {  // делаем первые 4 символа пустыми
		segm_data[i] = 0x00;
	}
	for (byte i = 0; i < amount; i++) {  // далее забиваем тем что на входе (сам текст строки)
		segm_data[i + 4] = DispData[i];
	}
	for (byte i = amount + 4; i < amount + 8; i++) {  // и последние 4 тоже забиваем пустыми символами
		segm_data[i] = 0x00;
	}
	for (byte i = 0; i <= amount + 4; i++) {   // выводим
		displayByte(segm_data[i], segm_data[i + 1], segm_data[i + 2], segm_data[i + 3]);
		delay(delayMs);
	}
}


void GyverTM1637::scroll(uint8_t DispData[], int delayms) {
	byte DispDataByte[4];
	for (byte i = 0; i < 4; i++) {
		DispDataByte[i] = digitHEX[DispData[i]];
	}
	scrollByte(DispDataByte, delayms);
}

void GyverTM1637::scroll(uint8_t bit0, uint8_t bit1, uint8_t bit2, uint8_t bit3, int delayms) {
	byte DispData[] = {digitHEX[bit0], digitHEX[bit1], digitHEX[bit2], digitHEX[bit3]};
	GyverTM1637::scrollByte(DispData, delayms);
}

void GyverTM1637::scroll(uint8_t BitAddr, uint8_t DispData, int delayms) {
	byte DispDataByte = digitHEX[DispData];
	scrollByte(BitAddr, DispDataByte, delayms);
}

void GyverTM1637::scrollByte(uint8_t bit0, uint8_t bit1, uint8_t bit2, uint8_t bit3, int delayms) {
	byte DispData[] = {bit0, bit1, bit2, bit3};
	GyverTM1637::scrollByte(DispData, delayms);
}

void GyverTM1637::scrollByte(uint8_t DispData[], int delayms) {
	byte lastBytes[4];
	byte step;
	byte stepArray[4];
	boolean changeByte[4] = {0, 0, 0, 0};
	
	for (byte i = 0; i < 4; i++) {
		if (DispData[i] != lastData[i]) changeByte[i] = 1;	
		lastBytes[i] = 	lastData[i];	
	}
	
	for (byte i = 0; i < 4; i++) {
		byte lastByte = lastData[i];
		stepArray[i] = lastByte;		
		
		if (changeByte[i]) {
			step = 0;
			swapBytes(&step, lastByte, 6, 0);
			swapBytes(&step, lastByte, 2, 1);
			swapBytes(&step, lastByte, 4, 5);
			swapBytes(&step, lastByte, 3, 6);
			stepArray[i] = step;			
		}		
	}	
	displayByte(stepArray);
	delay(delayms);
	
	for (byte i = 0; i < 4; i++) {
		byte lastByte = lastBytes[i];
		stepArray[i] = lastByte;
		
		if (changeByte[i]) {
			step = 0;
			swapBytes(&step, lastByte, 3, 0);
			stepArray[i] = step;
		}
	}
	displayByte(stepArray);
	delay(delayms);
	
	for (byte i = 0; i < 4; i++) {
		if (changeByte[i]) {
			stepArray[i] = 0;
		}
	}
	displayByte(stepArray);
	delay(delayms);
	
	for (byte i = 0; i < 4; i++) {
		byte lastByte = lastBytes[i];
		byte newByte = DispData[i];
		stepArray[i] = lastByte;
		
		if (changeByte[i]) {
			step = 0;
			swapBytes(&step, newByte, 0, 3);	
			stepArray[i] = step;
		}
	}
	displayByte(stepArray);
	delay(delayms);
	
	for (byte i = 0; i < 4; i++) {
		byte newByte = DispData[i];
		stepArray[i] = lastBytes[i];
		
		if (changeByte[i]) {	
			step = 0;
			swapBytes(&step, newByte, 0, 6);
			swapBytes(&step, newByte, 1, 2);
			swapBytes(&step, newByte, 5, 4);
			swapBytes(&step, newByte, 6, 3);	
			stepArray[i] = step;
		}
	}
	displayByte(stepArray);
	delay(delayms);
	
	for (byte i = 0; i < 4; i++) {
		displayByte(DispData);
	}
}

void GyverTM1637::scrollByte(uint8_t BitAddr, uint8_t DispData, int delayms) {
	byte oldByte = lastData[BitAddr];
	byte newByte = DispData;
	byte step;
	
	step = 0;
	swapBytes(&step, oldByte, 6, 0);
	swapBytes(&step, oldByte, 2, 1);
	swapBytes(&step, oldByte, 4, 5);
	swapBytes(&step, oldByte, 3, 6);	
	displayByte(BitAddr, step);
	delay(delayms);
	
	step = 0;
	swapBytes(&step, oldByte, 3, 0);
	swapBytes(&step, newByte, 0, 3);	
	displayByte(BitAddr, step);
	delay(delayms);
	
	step = 0;
	swapBytes(&step, newByte, 0, 6);
	swapBytes(&step, newByte, 1, 2);
	swapBytes(&step, newByte, 5, 4);
	swapBytes(&step, newByte, 6, 3);	
	displayByte(BitAddr, step);
	delay(delayms);
	
	displayByte(BitAddr, newByte);
}

void swapBytes(byte* newByte, byte oldByte, byte newP, byte oldP) {
	byte newBit = 0;
	if (oldByte & (1 << oldP)) newBit = 1;
	else newBit = 0;
	*newByte = *newByte | (newBit << newP);
}

void GyverTM1637::twist(uint8_t BitAddr, uint8_t DispData, int delayms) {
	twistByte(BitAddr, digitHEX[DispData], delayms);
}

void GyverTM1637::twist(uint8_t DispData[], int delayms) {
	byte newData[4];
	for (byte i = 0; i < 4; i++) {
		newData[i] = digitHEX[DispData[i]];
	}
	twistByte(newData, delayms);
}

void GyverTM1637::twist(uint8_t bit0, uint8_t bit1, uint8_t bit2, uint8_t bit3, int delayms) {
	byte DispData[] = {digitHEX[bit0], digitHEX[bit1], digitHEX[bit2], digitHEX[bit3]};
	GyverTM1637::twistByte(DispData, delayms);
}

void GyverTM1637::twistByte(uint8_t bit0, uint8_t bit1, uint8_t bit2, uint8_t bit3, int delayms) {
	byte DispData[] = {bit0, bit1, bit2, bit3};
	GyverTM1637::twistByte(DispData, delayms);
}

void GyverTM1637::twistByte(uint8_t DispData[], int delayms) {
	byte step = 0;
	byte stepArray[4];
	boolean changeByte[4] = {0, 0, 0, 0};
	
	for (byte i = 0; i < 4; i++) {
		if (DispData[i] != lastData[i]) changeByte[i] = 1;
		stepArray[i] = DispData[i];
	}	
	
	step = step & 0b00111111;			// выкл центральную
	for (byte i = 0; i < 5; i++) {
		step |= (1 << i);				// зажигаем по одной
		for (byte k = 0; k < 4; k++) {
			if (changeByte[k])
			stepArray[k] = step;
		}		
		displayByte(stepArray);
		delay(delayms);
	}
	//for (byte r = 0; r < 1; r++) {
	for (byte i = 0; i < 6; i++) {
		step = 0b11000000;
		step = ~(step | (1 << i) | (1 << (i + 1)));	// бегает дырка
		for (byte k = 0; k < 4; k++) {	
			if (changeByte[k]) stepArray[k] = step;
		}
		displayByte(stepArray);
		delay(delayms);
	}
	//}
	step = 0b11000000;
	for (byte i = 0; i < 6; i++) {
		step |= (1 << i);		
		for (byte k = 0; k < 4; k++) {
			if (changeByte[k])
			stepArray[k] = ~step;
		}
		displayByte(stepArray);		
		delay(delayms);
	}
	for (byte k = 0; k < 4; k++) {
		if (changeByte[k])
		stepArray[k] = 0b0000000;
	}
	for (byte i = 0; i < 7; i++) {				
		for (byte k = 0; k < 4; k++) {
			if (changeByte[k]) {
				byte newBit = 0;
				if (DispData[k] & (1 << i)) newBit = 1;
				else newBit = 0;
				stepArray[k] |= (newBit << i);
			}			
		}
		displayByte(stepArray);
		delay(delayms);
	}
}

void GyverTM1637::twistByte(uint8_t BitAddr, uint8_t DispData, int delayms) {
	byte oldByte = lastData[BitAddr];
	byte newByte = DispData;
	byte step = oldByte;
	
	step = step & 0b0111111;		// выкл центральную
	
	for (byte i = 0; i < 5; i++) {
		step |= (1 << i);				// зажигаем по одной
		displayByte(BitAddr, step);
		delay(delayms);
	}
	//for (byte r = 0; r < 1; r++) {
	for (byte i = 0; i < 6; i++) {
		step = 0b1000000;
		step = ~(step | (1 << i) | (1 << (i + 1)));	// бегает дырка

		displayByte(BitAddr, step);			
		delay(delayms);
	}
	//}	
	step = 0b1000000;
	for (byte i = 0; i < 6; i++) {
		step |= (1 << i);	
		displayByte(BitAddr, ~step);
		delay(delayms);
	}
	step = 0;
	for (byte i = 0; i < 7; i++) {
		byte newBit = 0;
		if (newByte & (1 << i)) newBit = 1;
		else newBit = 0;
		step |= (newBit << i);	
		displayByte(BitAddr, step);
		delay(delayms);
	}
	displayByte(BitAddr, newByte);
}

=== Файл: src\GyverTM1637\GyverTM1637.h ===

#pragma once
#include <inttypes.h>
#include <Arduino.h>

/*	
	GyverTM1637 - бибилотека для 7 сегментного дисплея на чипе TM1637 с кучей приколюх
	- Вывод цифр массивом или прицельно
	- Вывод букв из списка доступных (листай ниже) массивом или прицельно
	- Отдельная функция вывода часов и минут (часы без нуля слева, минуты с нулём)
	- Вывод числа от -999 до 9999 с учётом знака
	- Готовая функция бегущей строки
	- Функции смены яркости и состояния двоеточия автоматически обновляют дисплей
	- Функция обновления значения с эффектом вертикальной прокрутки
	- Функция обновления значения с эффектом скручивания (лучше один раз увидеть)
	
	Основано на оригинальной библиотеке "Grove_4Digital_Display" от Frankie.Chu
	https://github.com/Seeed-Studio/Grove_4Digital_Display
	
	Текущая версия: 1.4 от 02.11.2019
	- Поправлены типы данных и ошибки
	- Добавлена совместимость с ESP
*/

class GyverTM1637
{
public:
	
	GyverTM1637(uint8_t clk, uint8_t dio);									// объявление и инициализация
	
	void display(uint8_t DispData[]);										// выводит цифры массивом по ячейкам. От 0 до 9 (byte values[] = {3, 5, 9, 0}; )
	void display(uint8_t BitAddr, uint8_t DispData);							// выводит цифру DispData в указанную ячейку дисплея BitAddr
	void display(uint8_t bit0, uint8_t bit1, uint8_t bit2, uint8_t bit3);	// если лень создавать массив, выводит цифры в ячейки
	
	void displayByte(uint8_t DispData[]);									// выводит байт вида 0xe6 и буквы-константы вида _a , _b .... массивом
	void displayByte(uint8_t BitAddr, uint8_t DispData);						// выводит байт вида 0xe6 и буквы-константы вида _a , _b .... в ячейку
	void displayByte(uint8_t bit0, uint8_t bit1, uint8_t bit2, uint8_t bit3);	// если лень создавать массив, выводит байты в ячейки
	
	void displayClock(uint8_t hrs, uint8_t mins);							// выводит часы и минуты
	void displayClockScroll(uint8_t hrs, uint8_t mins, int delayms);		// выводит часы и минуты с эффектом прокрутки
	void displayClockTwist(uint8_t hrs, uint8_t mins, int delayms);			// выводит часы и минуты с эффектом скрутки
	
	void displayInt(int value);												// выводит число от -999 до 9999 (да, со знаком минус)
	
	void runningString(uint8_t DispData[], byte amount, int delayMs);  		// бегущая строка (array, sizeof(array), задержка в мс)
	
	void clear(void);														// очистить дисплей
	
	void point(boolean PointFlag);											// вкл / выкл точку (POINT_ON / POINT_OFF)

	void brightness(uint8_t bright, uint8_t = 0x40, uint8_t = 0xc0);		// яркость 0 - 7	
	
	void scroll(uint8_t BitAddr, uint8_t DispData, int delayms);				// обновить значение прокруткой (адрес, ЦИФРА, задержка в мс)
	void scroll(uint8_t DispData[], int delayms);							// обновить значение прокруткой (массив ЦИФР, задержка в мс)
	void scroll(uint8_t bit0, uint8_t bit1, uint8_t bit2, uint8_t bit3, int delayms);	// прокрутка посимвольно
	void scrollByte(uint8_t BitAddr, uint8_t DispData, int delayms);			// обновить значение прокруткой (адрес, БАЙТ, задержка в мс)
	void scrollByte(uint8_t DispData[], int delayms);						// обновить значение прокруткой (массив БАЙТ, задержка в мс)
	void scrollByte(uint8_t bit0, uint8_t bit1, uint8_t bit2, uint8_t bit3, int delayms);	// прокрутка посимвольно
	
	void twist(uint8_t BitAddr, uint8_t DispData, int delayms);				// обновить значение скручиванием (адрес, ЦИФРА, задержка в мс)
	void twist(uint8_t DispData[], int delayms);								// обновить значение скручиванием (массив ЦИФР, задержка в мс)
	void twist(uint8_t bit0, uint8_t bit1, uint8_t bit2, uint8_t bit3, int delayms);	// скрутка посимвольно
	void twistByte(uint8_t BitAddr, uint8_t DispData, int delayms);			// обновить значение скручиванием (адрес, БАЙТ, задержка в мс)
	void twistByte(uint8_t DispData[], int delayms);							// обновить значение скручиванием (массив БАЙТ, задержка в мс)
	void twistByte(uint8_t bit0, uint8_t bit1, uint8_t bit2, uint8_t bit3, int delayms);	// скрутка посимвольно
	
private:
	uint8_t lastData[4];
	void update();
	int  writeByte(int8_t wr_data);
	void start(void);
	void stop(void);
	
	void sendByte(uint8_t BitAddr, int8_t sendData);
	void sendArray(uint8_t sendData[]);

	uint8_t Cmd_SetData;
	uint8_t Cmd_SetAddr;
	uint8_t Cmd_DispCtrl;
	uint8_t PointData;

	uint8_t Clkpin;
	uint8_t Datapin;	
};

void swapBytes(byte* newByte, byte oldByte, byte oldP, byte newP);
uint8_t digToHEX(uint8_t digit);		// вернёт код цифры для displayByte

//************definitions for TM1637*********************
#define ADDR_AUTO  0x40
#define ADDR_FIXED 0x44
#define STARTADDR  0xc0

/**** definitions for the clock point of the digit tube *******/
#define POINT_ON   1
#define POINT_OFF  0

/**************definitions for brightness***********************/
#define  BRIGHT_DARKEST 0
#define  BRIGHT_TYPICAL 2
#define  BRIGHTEST      7

/************** БУКВЫ И СИМВОЛЫ *****************/

#if defined(ESP8266)
#define _A 0x77
#define _B 0x7f
#define _C 0x39
#define _D 0x3f
#define _E 0x79
#define _F 0x71
#define _G 0x3d
#define _H 0x76
#define _J 0x1e
#define _L 0x38
#define _N 0x37
#define _O 0x3f
#define _P 0x73
#define _S 0x6d
#define _U 0x3e
#define _Y 0x6e
#define _a 0x5f
#define _b 0x7c
#define _c 0x58
#define _d 0x5e
#define _e 0x7b
#define _f 0x71
#define _h 0x74
#define _i 0x10
#define _j 0x0e
#define _l 0x06
#define _n 0x54
#define _o 0x5c
#define _q 0x67
#define _r 0x50
#define _t 0x78
#define _u 0x1c
#define _y 0x6e
#define _dash 0x40
#define _under 0x08
#define _equal 0x48
#define _empty 0x00
#define _degree 0x63

#define _0 0x3f
#define _1 0x06
#define _2 0x5b
#define _3 0x4f
#define _4 0x66
#define _5 0x6d
#define _6 0x7d
#define _7 0x07
#define _8 0x7f
#define _9 0x6f

#else
	
enum TM1637_letters {
	_A = 0x77,
	_B = 0x7f,
	_C = 0x39,
	_D = 0x3f,
	_E = 0x79,
	_F = 0x71,
	_G = 0x3d,
	_H = 0x76,
	_J = 0x1e,
	_L = 0x38,
	_N = 0x37,
	_O = 0x3f,
	_P = 0x73,
	_S = 0x6d,
	_U = 0x3e,
	_Y = 0x6e,
	_a = 0x5f,
	_b = 0x7c,
	_c = 0x58,
	_d = 0x5e,
	_e = 0x7b,
	_f = 0x71,
	_h = 0x74,
	_i = 0x10,
	_j = 0x0e,
	_l = 0x06,
	_n = 0x54,
	_o = 0x5c,
	_q = 0x67,
	_r = 0x50,
	_t = 0x78,
	_u = 0x1c,
	_y = 0x6e,
	_dash = 0x40,
	_under = 0x08,
	_equal = 0x48,
	_empty = 0x00,
	_degree = 0x63,

	_0 = 0x3f,
	_1 = 0x06,
	_2 = 0x5b,
	_3 = 0x4f,
	_4 = 0x66,
	_5 = 0x6d,
	_6 = 0x7d,
	_7 = 0x07,
	_8 = 0x7f,
	_9 = 0x6f,
};
#endif

=== Файл: src\GyverTM1637\keywords.txt ===

  
#######################################
# Syntax Coloring Map For GyverTM1637
#######################################

#######################################
# Datatypes (KEYWORD1)
#######################################

GyverTM1637	KEYWORD1

#######################################
# Methods and Functions (KEYWORD2)
#######################################

display	KEYWORD2
displayByte	KEYWORD2
displayInt	KEYWORD2

displayClock	KEYWORD2
displayClockTwist	KEYWORD2
displayClockScroll	KEYWORD2

runningString	KEYWORD2
scroll		KEYWORD2
scrollByte	KEYWORD2
twist		KEYWORD2
twistByte	KEYWORD2

clear		KEYWORD2
point		KEYWORD2
brightness	KEYWORD2
digToHEX	KEYWORD2

#######################################
# Constants (LITERAL1)
#######################################

POINT_ON	LITERAL1
POINT_OFF	LITERAL1

_A	LITERAL1
_B	LITERAL1
_C	LITERAL1
_D	LITERAL1
_E	LITERAL1
_F	LITERAL1
_G	LITERAL1
_H	LITERAL1
_J	LITERAL1
_L	LITERAL1
_N	LITERAL1
_O	LITERAL1
_P	LITERAL1
_S	LITERAL1
_U	LITERAL1
_Y	LITERAL1
_a	LITERAL1
_b	LITERAL1
_c	LITERAL1
_d	LITERAL1
_e	LITERAL1
_f	LITERAL1
_h	LITERAL1
_i	LITERAL1
_j	LITERAL1
_l	LITERAL1
_n	LITERAL1
_o	LITERAL1
_q	LITERAL1
_r	LITERAL1
_t	LITERAL1
_u	LITERAL1
_y	LITERAL1

_dash	LITERAL1
_under	LITERAL1
_equal	LITERAL1
_empty	LITERAL1
_degree	LITERAL1

_0	LITERAL1
_1	LITERAL1
_2	LITERAL1
_3	LITERAL1
_4	LITERAL1
_5	LITERAL1
_6	LITERAL1
_7	LITERAL1
_8	LITERAL1
_9	LITERAL1

=== Файл: src\microLED\keywords.txt ===

#######################################
# Syntax Coloring Map For microLED
#######################################
microLED	KEYWORD1
LEDdata	KEYWORD1

# функции цвета
mRGB	KEYWORD1
mWHEEL	KEYWORD1
mHEX	KEYWORD1
mHSV	KEYWORD1
mCOLOR	KEYWORD1

# лента
setRGB	KEYWORD2
setHSV	KEYWORD2
setHEX	KEYWORD2
setColor	KEYWORD2
colorWheel	KEYWORD2
setBrightness	KEYWORD2
fill	KEYWORD2
setLED	KEYWORD2
clear	KEYWORD2
show	KEYWORD2
getColor	KEYWORD2
getColorHEX	KEYWORD2
fade	KEYWORD2
setVoltage	KEYWORD2
setMaxCurrent	KEYWORD2

# матрица
setPix	KEYWORD2
getPixNumber	KEYWORD2
fadePix	KEYWORD2
ZIGZAG	LITERAL1
PARALLEL	LITERAL1
LEFT_BOTTOM	LITERAL1
LEFT_TOP	LITERAL1
RIGHT_TOP	LITERAL1
RIGHT_BOTTOM	LITERAL1
DIR_RIGHT	LITERAL1
DIR_UP	LITERAL1
DIR_LEFT	LITERAL1
DIR_DOWN	LITERAL1

# настройки
COLOR_DEBTH	LITERAL1
ORDER_GRB	LITERAL1
ORDER_RGB	LITERAL1
ORDER_BRG	LITERAL1
REPLACE_FASTLED	LITERAL1
MAX_DATA_SPEED	LITERAL1
MICROLED_ALLOW_INTERRUPTS	LITERAL1

# цвета
WHITE	LITERAL1
SILVER	LITERAL1
GRAY	LITERAL1
BLACK	LITERAL1
RED	LITERAL1
MAROON	LITERAL1
ORANGE	LITERAL1
YELLOW	LITERAL1
OLIVE	LITERAL1
LIME	LITERAL1
GREEN	LITERAL1
AQUA	LITERAL1
TEAL	LITERAL1
BLUE	LITERAL1
NAVY	LITERAL1
MAGENTA	LITERAL1
PURPLE	LITERAL1

=== Файл: src\microLED\microLED.h ===

/*
	microLED - ультра-лёгкая библиотека для работы с адресной лентой/матрицей
	Основная фишка: сжатие цвета, код занимает в разы меньше места в SRAM по сравнению с аналогами (FastLED, NeoPixel и др.)
	- Поддержка сжатия цвета: 8, 16 и 24 бита
	- Поддержка порядка цветов: RGB, GRB, BRG
	- Работа с цветом:
		- RGB
		- HSV
		- HEX цвета
		- "Цветовое колесо" (1500 самых ярких оттенков)
		- 16 встроенных цветов
	- Возможность чтения сжатого цвета в HEX 0xRRGGBB
	- Поддержка работы с адресными матрицами (см. пример)	
	- Поддержка чипов: 2811/2812/2813/2815
	- Частичная совместимость со скетчами для FastLED (смотри пример fastToMicro)	
	- Режим MAX_DATA_SPEED - скорость вывода увеличивается на 40%
	
	by AlexGyver & Egor 'Nich1con' Zaharov 07.10.2019
	
	Версия 1.1
	- Поправлена инициализация
	- Добавлен оранжевый цвет
	
	Версия 2.0
	- Переписан и сильно ускорен алгоритм вывода
	- Добавлено ограничение тока
	
	Версия 2.1
	- Поправлена ошибка с матрицей
	
	Версия 2.2
	- Цвет PINK заменён на MAGENTA
	
	Версия 2.3
	- Добавлена дефайн настройка MICROLED_ALLOW_INTERRUPTS
	- Исправлены мелкие ошибки, улучшена стабильность
*/

#pragma once
#include "ws2812_send.h"


#ifndef COLOR_DEBTH
#define COLOR_DEBTH 2	// по умолчанию 16 бита
#endif

#ifdef REPLACE_FASTLED
#define CRGB mRGB
#define CHSV mHSV
#endif

// ================ ДАТА =================
#if (COLOR_DEBTH == 1)
typedef uint8_t LEDdata;
#elif (COLOR_DEBTH == 2)
typedef uint16_t LEDdata;
#elif (COLOR_DEBTH == 3)
struct LEDdata {
	byte r, g, b;
	// default values are UNINITIALIZED
	inline LEDdata() __attribute__((always_inline))
	{
	}
	
	// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
	inline LEDdata(uint32_t colorcode)  __attribute__((always_inline))
	: r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
	{
	}
	
	inline LEDdata& operator= (const uint32_t colorcode) __attribute__((always_inline))
	{
		r = (colorcode >> 16) & 0xFF;
		g = (colorcode >>  8) & 0xFF;
		b = (colorcode >>  0) & 0xFF;
		return *this;
	}
};
inline __attribute__((always_inline)) bool operator== (const LEDdata& lhs, const LEDdata& rhs) {
	return (lhs.r == rhs.r) && (lhs.g == rhs.g) && (lhs.b == rhs.b);
}
#endif

/*
// ========== ПОДКЛЮЧЕНИЕ МАТРИЦЫ ==========
enum M_type {
	ZIGZAG,
	PARALLEL,
};
enum M_connection {
	LEFT_BOTTOM,
	LEFT_TOP,
	RIGHT_TOP,
	RIGHT_BOTTOM,
};
enum M_dir {
	DIR_RIGHT,
	DIR_UP,
	DIR_LEFT,
	DIR_DOWN,
};

// ========== ИНСТРУМЕНТЫ ЦВЕТА ==========
// Стандартные цвета
enum COLORS {
	WHITE =		0xFFFFFF,	// белый
	SILVER =	0xC0C0C0,	// серебро
	GRAY =		0x808080,	// серый
	BLACK =		0x000000,	// чёрный	
	RED =		0xFF0000,	// красный
	MAROON =	0x800000,	// бордовый
	ORANGE =	0xFF3000,	// оранжевый
	YELLOW =	0xFF8000,	// жёлтый
	OLIVE =		0x808000,	// олива
	LIME =		0x00FF00,	// лайм
	GREEN =		0x008000,	// зелёный
	AQUA =		0x00FFFF,	// аква
	TEAL =		0x008080,	// цвет головы утки чирка
	BLUE =		0x0000FF,	// голубой
	NAVY =		0x000080,	// тёмно-синий
	MAGENTA =	0xFF00FF,	// розовый
	PURPLE =	0x800080,	// пурпурный
};
*/

// Функции
LEDdata mRGB(byte r, byte g, byte b);	// RGB 255, 255, 255
//LEDdata mWHEEL(int color);				// цвета 0-1530
//LEDdata mHEX(uint32_t color);			// HEX цвет
LEDdata mHSV(byte h, byte s, byte v);	// HSV 255, 255, 255
//LEDdata mCOLOR(COLORS color);			// цвет

// =================== КЛАСС ===================
class microLED {
public:
	// ЛЕНТА: имя буфера, количество ледов, пин
	microLED(LEDdata *LEDarray, int LEDamount, byte pin);
	
	// МАТРИЦА: имя буфера, пин, ширина матрицы, высота матрицы, тип матрицы, угол подключения, направление	(см. ПОДКЛЮЧЕНИЕ МАТРИЦЫ)
	//microLED(LEDdata *LEDarray, byte pin, byte width, byte height, M_type type, M_connection conn, M_dir dir);
	
	// лента и матрица
	//void setRGB(int num, byte r, byte g, byte b);	// RGB
	//void setHSV(int num, byte h, byte s, byte v); 	// HSV
	//void setHEX(int num, uint32_t color);			// HEX
	//void setColor(int num, COLORS color);			// стандартный цвет (см. "Стандартные цвета")
	//void colorWheel(int num, int color);			// цвет 0-1530	
	//void fill(LEDdata color);						// заливка цветом (mRGB, mWHEEL, mHEX, mHSV)
	void setLED(int n, LEDdata color);				// ставим цвет светодиода (mRGB, mWHEEL, mHEX, mHSV)	
	//uint32_t getColorHEX(int num);					// получить HEX цвет диода (для сравнения и т.п.)
	//LEDdata getColor(int num);						// получить цвет диода в LEDdata
	//void fade(int num, byte val);					// уменьшить яркость на val
	
	void setBrightness(byte newBright);				// яркость 0-255
	void clear();									// очистка
	void show();									// отправка
	
	/*
	// матрица
	void setPix(int x, int y, LEDdata color);		// ставим цвет пикселя x y в LEDdata (mRGB, mWHEEL, mHEX, mHSV)
	uint32_t getColorHEX(int x, int y);				// получить цвет пикселя в HEX
	LEDdata getColor(int x, int y);					// получить цвет пикселя в LEDdata
	void fadePix(int x, int y, byte val);			// уменьшить яркость пикселя на val
	uint16_t getPixNumber(int x, int y);			// получить номер пикселя в ленте по координатам
	
	void setVoltage(int mv);						// установить напряжение питания в мв, по умолч. 5000 (для расчёта тока)
	void setMaxCurrent(int ma);						// установить максимальный ток (автокоррекция яркости). 0 - выключено
	*/

private:
	// void setCurrentSettings();
	// byte correctBright();
	// void getColorPtr(int num, byte *ptr);
	int _numLEDs;
	LEDdata *LEDbuffer;
	byte _bright = 0;
	// byte _matrixConfig = 0;
	// byte _matrixType = 0;
	// byte _matrixW;
	// byte _width, _height;
	// int _maxCurrent = 0;
	// int _voltage = 5000;
	// int _idleCurrent = 0;
	// byte _oneLedCurrent = 0;
	
	const volatile uint8_t *ws2812_port;
	volatile uint8_t *ws2812_port_reg;
	uint8_t pinMask;
};

// ================== МЕТОДЫ ==================
microLED::microLED(LEDdata *LEDarray, int LEDamount, byte pin) {
	_numLEDs = LEDamount;
	LEDbuffer = LEDarray;
	
	pinMask = digitalPinToBitMask(pin);
	ws2812_port = portOutputRegister(digitalPinToPort(pin));
	ws2812_port_reg = portModeRegister(digitalPinToPort(pin));
}

/*
microLED::microLED(LEDdata *LEDarray, byte pin, byte width, byte height, M_type type, M_connection conn, M_dir dir) {
	_numLEDs = width * height;
	LEDbuffer = LEDarray;
	
	pinMask = digitalPinToBitMask(pin);
	ws2812_port = portOutputRegister(digitalPinToPort(pin));
	ws2812_port_reg = portModeRegister(digitalPinToPort(pin));
	
	_width = width;
	_height = height;
	
	_matrixConfig = (byte)conn | ((byte)dir << 2);
	_matrixType = (byte)type;
	
	if (_matrixConfig == 4 || _matrixConfig == 13 || _matrixConfig == 14 || _matrixConfig == 7)
	_matrixW = height;
	else
	_matrixW = width;	
}
*/

// void microLED::setRGB(int num, byte r, byte g, byte b) {
// 	LEDbuffer[num] = mRGB(r, g, b);
// }

// void microLED::setHSV(int num, byte h, byte s, byte v) {
// 	LEDbuffer[num] = mHSV(h, s, v);
// }

// void microLED::setHEX(int num, uint32_t color) {
// 	LEDbuffer[num] = mHEX(color);
// }

// void microLED::colorWheel(int num, int color) {
// 	LEDbuffer[num] = mWHEEL(color);
// }

// void microLED::setColor(int num, COLORS color) {
// 	LEDbuffer[num] = mCOLOR(color);
// }

void microLED::setBrightness(byte newBright) {
#if (COLOR_DEBTH == 1)
	_bright = (255 - newBright) >> 5;
#else
	_bright = newBright;
#endif
}

void microLED::clear() {
	for (int i = 0; i < _numLEDs; i++) {
#if (COLOR_DEBTH == 1)
		LEDbuffer[i] = 0;
#elif (COLOR_DEBTH == 2)
		LEDbuffer[i] = 0;
#elif (COLOR_DEBTH == 3)
		LEDbuffer[i].r = 0;
		LEDbuffer[i].g = 0;
		LEDbuffer[i].b = 0;
#endif
	}
}

void microLED::setLED(int n, LEDdata color)
{
	LEDbuffer[n] = color;
}

/*
void microLED::fill(LEDdata color) {
	for (int i = 0; i < _numLEDs; i++) {
		LEDbuffer[i] = color;
	}
}

uint32_t microLED::getColorHEX(int num) {
	byte thisData[3];
	getColorPtr(num, thisData);
	return (((uint32_t)thisData[0] << 16) | ((uint32_t)thisData[1] << 8 ) | (uint32_t)thisData[2]);
}

LEDdata microLED::getColor(int num) {
	return LEDbuffer[num];
}

void microLED::getColorPtr(int num, byte *ptr) {
#if (COLOR_DEBTH == 1)
	ptr[0] = (LEDbuffer[num] & 0b11000000);
	ptr[1] = ((LEDbuffer[num] & 0b00111000) << 2);
	ptr[2] = ((LEDbuffer[num] & 0b00000111) << 5);
#elif (COLOR_DEBTH == 2)
	ptr[0] = (((LEDbuffer[num] & 0b1111100000000000) >> 8));
	ptr[1] = (((LEDbuffer[num] & 0b0000011111100000) >> 3));
	ptr[2] = (((LEDbuffer[num] & 0b0000000000011111) << 3));
#elif (COLOR_DEBTH == 3)	
	ptr[0] = LEDbuffer[num].r;
	ptr[1] = LEDbuffer[num].g;
	ptr[2] = LEDbuffer[num].b;
#endif
}

void microLED::fade(int num, byte val) {
	if (LEDbuffer[num] == LEDdata(0)) return;
	byte rgb[3];
	getColorPtr(num, rgb);

	byte maximum = max(max(rgb[0], rgb[1]), rgb[2]);
	float coef = 0;

	if (maximum >= val) {
		coef = (float)(maximum - val) / maximum;
	} else {
		LEDbuffer[num] = 0;
		return;
	}

	for (byte i = 0; i < 3; i++) {
		rgb[i] *= coef;
	}
	LEDbuffer[num] = mRGB(rgb[0], rgb[1], rgb[2]);
}

void microLED::fadePix(int x, int y, byte val) {
	fade(getPixNumber(x, y), val);
}

// ====================== МАТРИЦА ======================
uint16_t microLED::getPixNumber(int x, int y) {
	int thisX = 0, thisY = 0;
	switch(_matrixConfig) {
	case 0:
		thisX = x;
		thisY = y;
		break;
	case 4:
		thisX = y;
		thisY = x;
		break;
	case 1:
		thisX = x;
		thisY = (_height - y - 1);
		break;
	case 13:
		thisX = (_height - y - 1);
		thisY = x;
		break;
	case 10:
		thisX = (_width - x - 1);
		thisY = (_height - y - 1);
		break;
	case 14:
		thisX = (_height - y - 1);
		thisY = (_width - x - 1);
		break;
	case 11:
		thisX = (_width - x - 1);
		thisY = y;
		break;
	case 7:
		thisX = y;
		thisY = (_width - x - 1);
		break;
	}
	
	if (_matrixType || !(thisY % 2)) {               // если чётная строка
		return (thisY * _matrixW + thisX);
	} else {                                              // если нечётная строка
		return (thisY * _matrixW + _matrixW - thisX - 1);
	}
}

void microLED::setPix(int x, int y, LEDdata color) {
	LEDbuffer[getPixNumber(x, y)] = color;
}

uint32_t microLED::getColorHEX(int x, int y) {
	return getColorHEX(getPixNumber(x, y));
}

LEDdata microLED::getColor(int x, int y) {
	return LEDbuffer[getPixNumber(x, y)];
}
*/

// ======================УТИЛИТЫ =====================
#if (COLOR_DEBTH == 2)
#define PTR_TYPE uint16_t*
#else
#define PTR_TYPE uint8_t*
#endif

/*
void microLED::setVoltage(int mv) {
	_voltage = mv;
	setCurrentSettings();
}
void microLED::setMaxCurrent(int ma) {
	_maxCurrent = ma;
	setCurrentSettings();
}

void microLED::setCurrentSettings() {
	_idleCurrent = (float)_numLEDs * map(_voltage, 3000, 6000, 184, 934) / 1000L;
	_oneLedCurrent = map(_voltage, 3000, 6000, 9, 12);
}

byte microLED::correctBright() {
	if (_maxCurrent == 0) return _bright;
	else {
		long sum = 0;
		for (int i = 0; i < _numLEDs; i++) {
#if (COLOR_DEBTH == 1)
			// 8 бит
			sum += (LEDbuffer[i] & 0b11000000) >> _bright;
			sum += ((LEDbuffer[i] & 0b00111000) << 2) >> _bright;
			sum += ((LEDbuffer[i] & 0b00000111) << 5) >> _bright;
#elif (COLOR_DEBTH == 2)
			// 16 бит
			sum += (((LEDbuffer[i] & 0b1111100000000000) >> 8) * _bright) >> 8;
			sum += (((LEDbuffer[i] & 0b0000011111100000) >> 3) * _bright) >> 8;
			sum += (((LEDbuffer[i] & 0b0000000000011111) << 3) * _bright) >> 8;
#elif (COLOR_DEBTH == 3)
			// 32 бит		
			sum += ((long)LEDbuffer[i].r * _bright) >> 8;
			sum += ((long)LEDbuffer[i].g * _bright) >> 8;
			sum += ((long)LEDbuffer[i].b * _bright) >> 8;
#endif
		}		
		sum = (float)sum / 255 * _oneLedCurrent;		// текущий ток (* макс ток одного канала от напряжения)
		int realMax = _maxCurrent - _idleCurrent;		// макс. ток - минус холостой ток (от напряжения)
		if (sum < realMax) return _bright;
		else return ((float)realMax / sum * _bright);		
	}
}
*/

// ====================== ВЫВОД ======================
void microLED::show() {
	*ws2812_port_reg |= pinMask; // Enable DDR
	//WS2812B_sendData((PTR_TYPE)LEDbuffer, (int16_t)COLOR_DEBTH * _numLEDs, pinMask, (uint8_t*) ws2812_port, correctBright());
	WS2812B_sendData((PTR_TYPE)LEDbuffer, (int16_t)COLOR_DEBTH * _numLEDs, pinMask, (uint8_t *)ws2812_port, _bright);
}

// ================== COLOR UTILITY ===================
LEDdata mRGB(byte r, byte g, byte b) {
#if (COLOR_DEBTH == 1)
	return ( (r & 0b11000000) | ((g & 0b11100000) >> 2) | (b & 0b11100000) >> 5);
#elif (COLOR_DEBTH == 2)
	return ((r & 0b11111000) << 8) | ((g & 0b11111100) << 3) | ((b & 0b11111000) >> 3);
#elif (COLOR_DEBTH == 3)
	LEDdata bufferData;
	bufferData.r = r;
	bufferData.g = g;
	bufferData.b = b;
	return bufferData;
#endif
}

LEDdata mHSV(byte h, byte s, byte v) {	
#if (COLOR_DEBTH == 1)
	// быстрый HSV
	byte r, g, b;
	byte value = ((24 * h / 17) / 60) % 6;
	byte vmin = (long)v - v * s / 255;
	byte a = (long)v * s / 255 * (h * 24 / 17 % 60) / 60;
	byte vinc = vmin + a;
	byte vdec = v - a;
	switch (value) {
	case 0: r = v; g = vinc; b = vmin; break;
	case 1: r = vdec; g = v; b = vmin; break;
	case 2: r = vmin; g = v; b = vinc; break;
	case 3: r = vmin; g = vdec; b = v; break;
	case 4: r = vinc; g = vmin; b = v; break;
	case 5: r = v; g = vmin; b = vdec; break;
	}
	return mRGB(r, g, b);
#else
	// обычный HSV
	float r = 0, g = 0, b = 0;
	
	float H = (float)h / 255;
	float S = (float)s / 255;
	float V = (float)v / 255;

	int i = int(H * 6);
	float f = H * 6 - i;
	float p = V * (1 - S);
	float q = V * (1 - f * S);
	float t = V * (1 - (1 - f) * S);

	switch (i % 6) {
	case 0: r = V, g = t, b = p; break;
	case 1: r = q, g = V, b = p; break;
	case 2: r = p, g = V, b = t; break;
	case 3: r = p, g = q, b = V; break;
	case 4: r = t, g = p, b = V; break;
	case 5: r = V, g = p, b = q; break;	
	}
	return mRGB(r * 255, g * 255, b * 255);
#endif
}

// LEDdata mHEX(uint32_t color) {
// 	return mRGB( (color >> 16) & 0xFF, (color >> 8) & 0xFF, color & 0xFF );
// }

// LEDdata mWHEEL(int color) {
// 	byte _r = 0, _g = 0, _b = 0;
// 	if (color <= 255) {           // красный макс, зелёный растёт
// 		_r = 255;
// 		_g = color;
// 		_b = 0;
// 	}
// 	else if (color > 255 && color <= 510) {   // зелёный макс, падает красный
// 		_r = 510 - color;
// 		_g = 255;
// 		_b = 0;
// 	}
// 	else if (color > 510 && color <= 765) {   // зелёный макс, растёт синий
// 		_r = 0;
// 		_g = 255;
// 		_b = color - 510;
// 	}
// 	else if (color > 765 && color <= 1020) {  // синий макс, падает зелёный
// 		_r = 0;
// 		_g = 1020 - color;
// 		_b = 255;
// 	}
// 	else if (color > 1020 && color <= 1275) {   // синий макс, растёт красный
// 		_r = color - 1020;
// 		_g = 0;
// 		_b = 255;
// 	}
// 	else if (color > 1275 && color <= 1530) { // красный макс, падает синий
// 		_r = 255;
// 		_g = 0;
// 		_b = 1530 - color;
// 	}
// 	return mRGB(_r, _g, _b);
// }

// LEDdata mCOLOR(COLORS color) {
// 	return mHEX(color);
// }

=== Файл: src\microLED\ws2812_send.h ===

#pragma once

// =================== ВЫВОД ===================
#define NOP1 "nop \n\t" 
#define NOP2 "rjmp .+0	\n\t"

#if F_CPU == 8000000
#define _DELAY_ 
#define MAX_DATA_SPEED
#elif F_CPU == 12000000
#define _DELAY_   
#elif F_CPU == 16000000
#define _DELAY_ NOP2             
#elif F_CPU == 20000000 
#define _DELAY_ NOP2 NOP2 NOP1
#endif

#if defined(ORDER_GRB)
#define ORDER0	1
#define ORDER1	0
#define ORDER2	2
#elif defined(ORDER_RGB)
#define ORDER0	0
#define ORDER1	1
#define ORDER2	2
#elif defined(ORDER_BRG)
#define ORDER0	2
#define ORDER1	0
#define ORDER2	1
#else
#define ORDER0	1
#define ORDER1	0
#define ORDER2	2
#endif

#ifndef COLOR_DEBTH
#define COLOR_DEBTH 3
#endif

#if (COLOR_DEBTH == 2)
#define PTR_TYPE uint16_t*
#else
#define PTR_TYPE uint8_t*
#endif


void WS2812B_sendData (PTR_TYPE data, int16_t datlen, uint8_t maskhi, uint8_t *port, uint8_t bright) {
	uint8_t ctr,masklo;
	uint8_t loopData[3];
	uint8_t *data_ptr = loopData;	

	masklo = ~maskhi & *port;
	maskhi |= *port;
#ifndef MICROLED_ALLOW_INTERRUPTS
	uint8_t sreg_prev;
	sreg_prev=SREG;
	cli();  
#endif

	while (datlen) {
		data_ptr = loopData;
#if (COLOR_DEBTH == 1)
		// 8 бит
		loopData[ORDER0] = (*data & 0b11000000) >> bright;
		loopData[ORDER1] = ((*data & 0b00111000) << 2) >> bright;
		loopData[ORDER2] = ((*data & 0b00000111) << 5) >> bright;
		*data++;
		datlen--;
#elif (COLOR_DEBTH == 2)
		// 16 бит
		loopData[ORDER0] = (((*data & 0b1111100000000000) >> 8) * bright) >> 8;
		loopData[ORDER1] = (((*data & 0b0000011111100000) >> 3) * bright) >> 8;
		loopData[ORDER2] = (((*data & 0b0000000000011111) << 3) * bright) >> 8;
		
		//*data++;
		datlen -= 2;
#elif (COLOR_DEBTH == 3)
		// 32 бит		
		loopData[ORDER0] = (*(data++) * bright) >> 8;
		loopData[ORDER1] = (*(data++) * bright) >> 8;
		loopData[ORDER2] = (*(data++) * bright) >> 8;
		datlen -= 3;
#endif
		int8_t sendCounter = 3;
		while(sendCounter--) {
			asm volatile(
			// [clocks] - (action)
			"ldi   %[counter] ,8  \n\t"     // закинуть 8 в счетчик циклов 
			
			"loop:           	  \n\t"     // начало цикла отправки
			"st X, %[set_hi]      \n\t"     // установить high на пине 
			"sbrs	%[data], 7    \n\t"   	// если нужно отправить '1' , пропустить след команду 
			"st	X, %[set_lo] 	  \n\t"   	// сбросить пин в low
			"lsl  %[data]    	  \n\t"     // сдвинуть данные влево на 1
			"dec   %[counter]     \n\t"     // отнять от счетчика 1 
			#ifndef MAX_DATA_SPEED				// выключение доп задержки
			"rjmp .+0	          \n\t"	    // доп задержка из 2х тактов
			"rjmp .+0	          \n\t"	    // доп задержка из 2х тактов
			"rjmp .+0	          \n\t"	    // доп задержка из 2х тактов
			"rjmp .+0	          \n\t"	    // доп задержка из 2х тактов
			"rjmp .+0	          \n\t"	    // доп задержка из 2х тактов
			#endif
			"brcc to_end 		  \n\t"  	// перейти если уже вывели low
			_DELAY_		                    // основная задержка
			"st  X,%[set_lo]      \n\t"     // сбросить пин в low
			"to_end:              \n\t"     // точка куда переходим при пропуске				
			"brne  loop		      \n\t"     // вернуться в начало цикла
			
			:	[counter] "=&d" (ctr)
			:	[data] "r" (*data_ptr++), "x" (port), [set_hi] "r" (maskhi), [set_lo] "r" (masklo)
			);
		}
	}
#ifndef MICROLED_ALLOW_INTERRUPTS
	SREG=sreg_prev;
#endif
}

=== Файл: src\microWire\keywords.txt ===

#######################################
# Syntax Coloring Map For microWire
#######################################
#######################################
# Datatypes (KEYWORD1)
#######################################
microWire	KEYWORD1
#######################################
# Methods and Functions (KEYWORD2)
#######################################
begin	KEYWORD2
setClock	KEYWORD2
beginTransmission	KEYWORD2
endTransmission	KEYWORD2
write	KEYWORD2
read	KEYWORD2
requestFrom	KEYWORD2
available	KEYWORD2
#######################################
# Constants (LITERAL1)
#######################################



=== Файл: src\microWire\microWire.cpp ===

#include "microWire.h"

void TwoWire::begin() 
{	  												// Инициализация шины в роли master
	pinMode(SDA, INPUT_PULLUP); 					// Подтяжка шины 
	pinMode(SCL, INPUT_PULLUP);						// Подтяжка шины 
	TWBR = 72;										// Стандартная скорость - 100kHz
	TWSR = 0;										// Делитель - /1 , статус - 0;
}

void TwoWire::setClock(uint32_t clock) 
{ 													// Функция установки частоты шины 31-900 kHz (в герцах)
	TWBR = (((long)F_CPU / clock) - 16) / 2; 		// Расчет baudrate - регистра
}

void TwoWire::beginTransmission(uint8_t address) 
{ 													// Начать передачу (для записи данных)
	TwoWire::start();                        		// Старт
	TwoWire::write(address << 1);            		// Отправка slave - устройству адреса с битом "write"
}

uint8_t TwoWire::endTransmission(void)
{ 													// Завершить передачу и отпустить шину
  return TwoWire::endTransmission(true);
}

uint8_t TwoWire::endTransmission(bool stop) 
{													// Завершить передачу (после записи данных)
  if (stop) TwoWire::stop();                    	// Если задано stop или аргумент пуст - отпустить шину
  else TwoWire::start();                      		// Иначе - restart (другой master на шине не сможет влезть между сообщениями)
  if (_address_nack) {               				// Если нет ответа при передаче адреса
    _address_nack = false;            				// Обнуляем оба флага
    _data_nack = false;               				// Обнуляем оба флага
    return 2;                   					// Возвращаем '2'
  } if (_data_nack) {               				// Если нет ответа при передаче данных
    _address_nack = false;             				// Обнуляем оба флага
    _data_nack = false;              				// Обнуляем оба флага
    return 3;                   					// Возвращаем '2'
  } return 0;										// Если все ОК - возвращаем '0'
}

void TwoWire::write(uint8_t data)
{													// Прямая отправка байта на шину
	TWDR = data;									// Записать данные в data - регистр
	TWCR = _BV(TWEN) | _BV(TWINT);				    // Запустить передачу
	while (!(TWCR & _BV(TWINT)));					// Дождаться окончания
	uint8_t _bus_status = TWSR & 0xF8;				// Чтение статуса шины
	if(_bus_status == 0x20) _address_nack = true;	// SLA + W + NACK ? - нет ответа при передаче адреса
	if(_bus_status == 0x30) _data_nack = true;		// BYTE + NACK ? - нет ответа при передаче данных
}

uint8_t TwoWire::available() 
{													// Вернуть оставшееся количество запрошенных для чтения байт
	return _requested_bytes;						// Это содержимое этой переменной
}

uint8_t TwoWire::read()
{						  							// Прямое чтение байта из шины после запроса
	if (--_requested_bytes) {					    // Если байт не последний 						
		TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWEA);	// Запустить чтение шины (с подтверждением "ACK")
		while (!(TWCR & _BV(TWINT)));				// Дождаться окончания приема данных
		return TWDR;								// Вернуть принятые данные , это содержимое data - регистра 
	}
	_requested_bytes = 0; 							// Если читаем последний байт
	TWCR = _BV(TWEN) | _BV(TWINT);					// Запустить чтение шины (БЕЗ подтверждения "NACK")
	while (!(TWCR & _BV(TWINT)));					// Дождаться окончания приема данных
	if (_stop_after_request) TwoWire::stop();  		// Если в requestFrom не задан аргумент stop , или stop задан как true - отпустить шину
	else TwoWire::start();							// Иначе - restart (другой master на шине не сможет влезть между сообщениями)
	return TWDR;									// Вернуть принятый ранее байт из data - регистра
}

void TwoWire::requestFrom(uint8_t address , uint8_t length) 
{  													// Запрос n-го кол-ва байт от ведомого устройства и отпускание шины
	TwoWire::requestFrom(address , length , true); 
}

void TwoWire::requestFrom(uint8_t address , uint8_t length , bool stop) 
{  													// Запрос n-го кол-ва байт от ведомого устройства (Читайте все байты сразу!!!)
	_stop_after_request = stop; 					// stop или restart после чтения последнего байта
	_requested_bytes = length;						// Записать в переменную количество запрошенных байт
	TwoWire::start();								// Начать работу на шине
	TwoWire::write((address << 1) | 0x1);			// Отправить устройству адрес + бит "read" 
}

void TwoWire::start()
{													// сервисная функция с нее начинается любая работа с шиной
	TWCR = _BV(TWSTA) | _BV(TWEN) | _BV(TWINT); 	// start + TwoWire enable + установка флага "выполнить задачу"
	while (!(TWCR & _BV(TWINT)));					// Ожидание завершения 
}

void TwoWire::stop() 
{													// сервисная функция ей заканчивается работа с шиной
	TWCR = _BV(TWSTO) | _BV(TWEN) | _BV(TWINT);		// stop + TwoWire enable + установка флага "выполнить задачу"
}

TwoWire Wire = TwoWire();

=== Файл: src\microWire\microWire.h ===

/*
	Лёгкая библиотека со стандартным набором инструментов для работы с аппаратным I2C.
	Реализована поддержка всех стандартных функций в роли master.
	Облегчайте свой код простой заменой Wire.h  на microWire.h
	Не все библиотеки на Wire смогут работать с microWire , подробный список поддерживаемых библиотек уточняйте на сайте.
	Поддержка контроллеров : ATmega168/328p (nano,uno,mini), ATmega32u4 (leonardo,micro) , ATmega2560 (mega)
	Версия 2.1 by Egor 'Nich1con' Zaharov от 02.03.2020
*/

/*
	ВНИМАНИЕ!!!
	Для экономии места и возможности запроса большого кол-ва байта (например чтение пакетов EEPROM) , буферов на чтение и запись НЕТ!!!
	Функция write сразу отправляет байт на шину , не дожидаясь endTransmission , очереди на отправку нет , отправка занимает некоторое время.
	Функция read напрямую читает байт из шины, специфика работы с шиной требует читать последний байт в особом порядке , читайте сразу ВСЕ запрошенные байты.
	Пока не будет прочитан последний байт , шина будет занята. Для чтения всех байт воспользуйтесь конструкцией " for(unt8_t i = 0; Wire.available() ,i++){ data[i] = Wire.read } ".
*/

#ifndef microWire_h
#define microWire_h
#include <Arduino.h>
#include "pins_arduino.h"

class TwoWire {
public:
	void begin(void);            				// инициализация шины
	void setClock(uint32_t clock);       		// ручная установка частоты шины 31-900 kHz (в герцах)
	void beginTransmission(uint8_t address); 	// открыть соединение (для записи данных)
	uint8_t endTransmission(bool stop);  		// закрыть соединение , произвести stop или restart (по умолчанию - stop)
	uint8_t endTransmission(void);  			// закрыть соединение , произвести stop
	void write(uint8_t data);                	// отправить в шину байт данных , отправка производится сразу , формат - byte "unsigned char"
	void requestFrom(uint8_t address , uint8_t length , bool stop); //открыть соединение и запросить данные от устройства, отпустить или удержать шину
	void requestFrom(uint8_t address , uint8_t length);  			//открыть соединение и запросить данные от устройства, отпустить шину
	uint8_t read(void);                      	// прочитать байт , БУФЕРА НЕТ!!! , читайте сразу все запрошенные байты , stop или restart после чтения последнего байта, настраивается в requestFrom
	uint8_t available(void);                 	// вернет количество оставшихся для чтения байт
private:
	uint8_t _requested_bytes = 0;            	// переменная хранит количество запрошенных и непрочитанных байт
	bool _address_nack = false;					// Флаг для отслеживания ошибки при передаче адреса
	bool _data_nack = false;					// Флаг для отслеживания ошибки при передаче данных
	bool _stop_after_request = true;         	// stop или restart после чтения последнего байта
	void start(void);                        	// сервисная функция с нее начинается любая работа с шиной
	void stop(void);                         	// сервисная функция ей заканчивается работа с шиной
};
extern TwoWire Wire;
#endif

=== Файл: src\SSD1306Ascii\src\SSD1306Ascii.cpp ===

/* Arduino SSD1306Ascii Library
 * Copyright (C) 2015 by William Greiman
 *
 * This file is part of the Arduino SSD1306Ascii Library
 *
 * This Library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Arduino SSD1306Ascii Library.  If not, see
 * <http://www.gnu.org/licenses/>.
 */
#include "SSD1306Ascii.h"
//------------------------------------------------------------------------------
uint8_t SSD1306Ascii::charWidth(uint8_t c) const {
  if (!m_font) {
    return 0;
  }
  uint8_t first = readFontByte(m_font + FONT_FIRST_CHAR);
  uint8_t count = readFontByte(m_font + FONT_CHAR_COUNT);
  if (c < first || c >= (first + count)) {
    return 0;
  }
  if (fontSize() > 1) {
    // Proportional font.
    return m_magFactor*readFontByte(m_font + FONT_WIDTH_TABLE + c - first);
  }
  // Fixed width font.
  return m_magFactor*readFontByte(m_font + FONT_WIDTH);
}
//------------------------------------------------------------------------------
void SSD1306Ascii::clear() {
#if INCLUDE_SCROLLING
  m_pageOffset = 0;
  setStartLine(0);
#endif  // INCLUDE_SCROLLING
  clear(0, displayWidth() - 1, 0 , displayRows() - 1);
}
//------------------------------------------------------------------------------
void SSD1306Ascii::clear(uint8_t c0, uint8_t c1, uint8_t r0, uint8_t r1) {
  // Cancel skip character pixels.
  m_skip = 0;

  // Insure only rows on display will be cleared.
  if (r1 >= displayRows()) r1 = displayRows() - 1;

  for (uint8_t r = r0; r <= r1; r++) {
    setCursor(c0, r);
    for (uint8_t c = c0; c <= c1; c++) {
      // Insure clear() writes zero. result is (m_invertMask^m_invertMask).
      ssd1306WriteRamBuf(m_invertMask);
    }
  }
  setCursor(c0, r0);
}
//------------------------------------------------------------------------------
void SSD1306Ascii::clearToEOL() {
  clear(m_col, displayWidth() -1, m_row, m_row + fontRows() - 1);
}
//------------------------------------------------------------------------------
void SSD1306Ascii::clearField(uint8_t col, uint8_t row, uint8_t n) {
  clear(col, col + fieldWidth(n) - 1, row, row + fontRows() - 1);
}
//------------------------------------------------------------------------------
void SSD1306Ascii::displayRemap(bool mode) {
  ssd1306WriteCmd(mode ? SSD1306_SEGREMAP : SSD1306_SEGREMAP | 1);
  ssd1306WriteCmd(mode ? SSD1306_COMSCANINC : SSD1306_COMSCANDEC);
}
//------------------------------------------------------------------------------
size_t SSD1306Ascii::fieldWidth(uint8_t n) {
  return n*(fontWidth() + letterSpacing());
}
//------------------------------------------------------------------------------
uint8_t SSD1306Ascii::fontCharCount() const {
  return m_font ? readFontByte(m_font + FONT_CHAR_COUNT) : 0;
}
//------------------------------------------------------------------------------
char SSD1306Ascii::fontFirstChar() const {
  return m_font ? readFontByte(m_font + FONT_FIRST_CHAR) : 0;
}
//------------------------------------------------------------------------------
uint8_t SSD1306Ascii::fontHeight() const {
  return m_font ? m_magFactor*readFontByte(m_font + FONT_HEIGHT) : 0;
}
//------------------------------------------------------------------------------
uint8_t SSD1306Ascii::fontRows() const {
  return m_font ? m_magFactor*((readFontByte(m_font + FONT_HEIGHT) + 7)/8) : 0;
}
//------------------------------------------------------------------------------
uint16_t SSD1306Ascii::fontSize() const {
  return (readFontByte(m_font) << 8) | readFontByte(m_font + 1);
}
//------------------------------------------------------------------------------
uint8_t SSD1306Ascii::fontWidth() const {
  return m_font ? m_magFactor*readFontByte(m_font + FONT_WIDTH) : 0;
}
//------------------------------------------------------------------------------
void SSD1306Ascii::init(const DevType* dev) {
  m_col = 0;
  m_row = 0;
#ifdef __AVR__
  const uint8_t* table = (const uint8_t*)pgm_read_word(&dev->initcmds);
#else  // __AVR__
  const uint8_t* table = dev->initcmds;
#endif  // __AVR
  uint8_t size = readFontByte(&dev->initSize);
  m_displayWidth = readFontByte(&dev->lcdWidth);
  m_displayHeight = readFontByte(&dev->lcdHeight);
  m_colOffset = readFontByte(&dev->colOffset);
  for (uint8_t i = 0; i < size; i++) {
    ssd1306WriteCmd(readFontByte(table + i));
  }
  clear();
}
//------------------------------------------------------------------------------
void SSD1306Ascii::invertDisplay(bool invert) {
  ssd1306WriteCmd(invert ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
}
//------------------------------------------------------------------------------
void SSD1306Ascii::setCol(uint8_t col) {
  if (col < m_displayWidth) {
    m_col = col;
    col += m_colOffset;
    ssd1306WriteCmd(SSD1306_SETLOWCOLUMN | (col & 0XF));
    ssd1306WriteCmd(SSD1306_SETHIGHCOLUMN | (col >> 4));
  }
}
//------------------------------------------------------------------------------
void SSD1306Ascii::setContrast(uint8_t value) {
  ssd1306WriteCmd(SSD1306_SETCONTRAST);
  ssd1306WriteCmd(value);
}
//------------------------------------------------------------------------------
void SSD1306Ascii::setCursor(uint8_t col, uint8_t row) {
  setCol(col);
  setRow(row);
}
//------------------------------------------------------------------------------
void SSD1306Ascii::setFont(const uint8_t* font) {
  m_font = font;
  if (font && fontSize() == 1) {
     m_letterSpacing = 0;
  } else {
    m_letterSpacing = 1;
  }
}
//------------------------------------------------------------------------------
void SSD1306Ascii::setRow(uint8_t row) {
  if (row < displayRows()) {
    m_row = row;
#if INCLUDE_SCROLLING
    ssd1306WriteCmd(SSD1306_SETSTARTPAGE | ((m_row + m_pageOffset) & 7));
#else  // INCLUDE_SCROLLING
    ssd1306WriteCmd(SSD1306_SETSTARTPAGE | m_row);
#endif  // INCLUDE_SCROLLING
  }
}
#if INCLUDE_SCROLLING
//------------------------------------------------------------------------------
void SSD1306Ascii::setPageOffset(uint8_t page) {
  m_pageOffset = page & 7;
  setRow(m_row);
}
//------------------------------------------------------------------------------
void SSD1306Ascii::setStartLine(uint8_t line) {
  m_startLine = line & 0X3F;
  ssd1306WriteCmd(SSD1306_SETSTARTLINE | m_startLine);
}
#endif   // INCLUDE_SCROLLING
//------------------------------------------------------------------------------
void SSD1306Ascii::ssd1306WriteRam(uint8_t c) {
  if (m_col < m_displayWidth) {
    writeDisplay(c^m_invertMask, SSD1306_MODE_RAM);
    m_col++;
  }
}
//------------------------------------------------------------------------------
void SSD1306Ascii::ssd1306WriteRamBuf(uint8_t c) {
  if (m_skip) {
    m_skip--;
  } else if (m_col < m_displayWidth) {
    writeDisplay(c^m_invertMask, SSD1306_MODE_RAM_BUF);
    m_col++;
  }
}
//------------------------------------------------------------------------------
GLCDFONTDECL(scaledNibble) = {
  0X00, 0X03, 0X0C, 0X0F,
  0X30, 0X33, 0X3C, 0X3F,
  0XC0, 0XC3, 0XCC, 0XCF,
  0XF0, 0XF3, 0XFC, 0XFF
};
//------------------------------------------------------------------------------
size_t SSD1306Ascii::strWidth(const char* str) const {
  size_t sw = 0;
  while (*str) {
    uint8_t cw = charWidth(*str++);
    if (cw == 0) {
      return 0;
    }
    sw += cw + letterSpacing();
  }
  return sw;
}
//------------------------------------------------------------------------------
void SSD1306Ascii::tickerInit(TickerState* state, const uint8_t* font,
       uint8_t row, bool mag2X, uint8_t bgnCol, uint8_t endCol) {
  state->font = font;
  state->row = row;
  state->mag2X = mag2X;
  state->bgnCol = bgnCol;
  state->endCol = endCol < m_displayWidth ? endCol : m_displayWidth - 1;
  state->nQueue = 0;
}
//------------------------------------------------------------------------------
bool SSD1306Ascii::tickerText(TickerState* state, const char* text) {
  if (!text) {
    state->nQueue = 0;
    return true;
  }
  if (state->nQueue >= TICKER_QUEUE_DIM) {
    return false;
  }
  if (state->nQueue == 0) {
    state->init = true;
  }
  state->queue[state->nQueue++] = text;
  return true;
}
//------------------------------------------------------------------------------
int8_t SSD1306Ascii::tickerTick(TickerState* state) {
  if (!state->font) {
    return -1;
  }
  if (!state->nQueue) {
    return 0;
  }
  setFont(state->font);
  m_magFactor = state->mag2X ? 2 : 1;
  if (state->init) {
    clear(state->bgnCol, state->endCol, state->row, state->row + fontRows() -1);
    state->col = state->endCol;
    state->skip = 0;
    state->init = false;
  }
  // Adjust display width to truncate pixels after endCol.  Find better way?
  uint8_t save = m_displayWidth;
  m_displayWidth = state->endCol + 1;

  // Skip pixels before bgnCol.
  skipColumns(state->skip);
  setCursor(state->col, state->row);
  for (uint8_t i = 0; i < state->nQueue; i++) {
    const char* str = state->queue[i];
    while (*str && m_col <= state->endCol) {
      write(*str++);
    }
    if (m_col > state->endCol) {
      break;
    }
  }
  if (m_col <= state->endCol) {
    clear(m_col, m_col, state->row, state->row + fontRows() - 1);
  }
  // Restore display width.
  m_displayWidth = save;

  if (state->nQueue == 1 && *state->queue[0] == 0) {
    state->nQueue = 0;
    return 0;
  }
  if (state->col > state->bgnCol) {
    state->col--;
  } else {
    state->skip++;
    if (state->skip >= charSpacing(*state->queue[0])) {
      state->skip = 0;
      state->queue[0]++;
      if (*state->queue[0] == 0 && state->nQueue > 1) {
        state->nQueue--;
        for (uint8_t i = 0; i < state->nQueue; i++) {
          state->queue[i] = state->queue[i + 1];
        }
      }
    }
  }
  return state->nQueue;
}
//------------------------------------------------------------------------------
size_t SSD1306Ascii::write(uint8_t ch) {
  if (!m_font) {
    return 0;
  }
  uint8_t w = readFontByte(m_font + FONT_WIDTH);
  uint8_t h = readFontByte(m_font + FONT_HEIGHT);
  uint8_t nr = (h + 7)/8;
  uint8_t first = readFontByte(m_font + FONT_FIRST_CHAR);
  uint8_t count = readFontByte(m_font + FONT_CHAR_COUNT);
  const uint8_t* base = m_font + FONT_WIDTH_TABLE;

  if (ch < first || ch >= (first + count)) {
    if (ch == '\r') {
      setCol(0);
      return 1;
    }
    if (ch == '\n') {
      setCol(0);
      uint8_t fr = m_magFactor*nr;
#if INCLUDE_SCROLLING
      uint8_t dr = displayRows();
      uint8_t tmpRow = m_row + fr;
      int8_t delta = tmpRow + fr - dr;
      if (m_scrollMode == SCROLL_MODE_OFF || delta <= 0) {
        setRow(tmpRow);
      } else {
        m_pageOffset = (m_pageOffset + delta) & 7;
        m_row  = dr - fr;
        // Cursor will be positioned by clearToEOL.
        clearToEOL();
        if (m_scrollMode == SCROLL_MODE_AUTO) {
          setStartLine(8*m_pageOffset);
        }
      }
#else  // INCLUDE_SCROLLING
      setRow(m_row + fr);
#endif  // INCLUDE_SCROLLING
      return 1;
    }
    return 0;
  }
  ch -= first;
  uint8_t s = letterSpacing();
  uint8_t thieleShift = 0;
  if (fontSize() < 2) {
    // Fixed width font.
    base += nr*w*ch;
  } else {
    if (h & 7) {
      thieleShift = 8 - (h & 7);
    }
    uint16_t index = 0;
    for (uint8_t i = 0; i < ch; i++) {
      index += readFontByte(base + i);
    }
    w = readFontByte(base + ch);
    base += nr*index + count;
  }
  uint8_t scol = m_col;
  uint8_t srow = m_row;
  uint8_t skip = m_skip;
  for (uint8_t r = 0; r < nr; r++) {
    for (uint8_t m = 0; m < m_magFactor; m++) {
      skipColumns(skip);
      if (r || m) {
        setCursor(scol, m_row + 1);
      }
      for (uint8_t c = 0; c < w; c++) {
        uint8_t b = readFontByte(base + c + r*w);
        if (thieleShift && (r + 1) == nr) {
          b >>= thieleShift;
        }
        if (m_magFactor == 2) {
           b = m ?  b >> 4 : b & 0XF;
           b = readFontByte(scaledNibble + b);
           ssd1306WriteRamBuf(b);
        }
        ssd1306WriteRamBuf(b);
      }
      for (uint8_t i = 0; i < s; i++) {
        ssd1306WriteRamBuf(0);
      }
    }
  }
  setRow(srow);
  return 1;
}


=== Файл: src\SSD1306Ascii\src\SSD1306Ascii.h ===

/* Arduino SSD1306Ascii Library
 * Copyright (C) 2015 by William Greiman
 *
 * This file is part of the Arduino SSD1306Ascii Library
 *
 * This Library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Arduino SSD1306Ascii Library.  If not, see
 * <http://www.gnu.org/licenses/>.
 */
/**
 * @file SSD1306Ascii.h
 * @brief Base class for ssd1306 displays.
 */
#ifndef SSD1306Ascii_h
#define SSD1306Ascii_h
#include "Arduino.h"
#include "SSD1306init.h"
#include "fonts/allFonts.h"

//------------------------------------------------------------------------------
/** SSD1306Ascii version */
#define SDD1306_ASCII_VERSION 1.3.0
//------------------------------------------------------------------------------
// Configuration options.
/** Set Scrolling mode for newline.
 *
 * If INCLUDE_SCROLLING is defined to be zero, newline will not scroll
 * the display and code for scrolling will not be included.  This option
 * will save some code space and three bytes of RAM.
 *
 * If INCLUDE_SCROLLING is nonzero, the scroll feature will included.
 */
#define INCLUDE_SCROLLING 0

/** Initial scroll mode, SCROLL_MODE_OFF,
    SCROLL_MODE_AUTO, or SCROLL_MODE_APP. */
#define INITIAL_SCROLL_MODE SCROLL_MODE_OFF

/** Dimension of TickerState pointer queue */
#define TICKER_QUEUE_DIM 6

/** Use larger faster I2C code. */
#define OPTIMIZE_I2C 1

/** If MULTIPLE_I2C_PORTS is nonzero,
    define a constructor with port selection. */
#ifdef __AVR__
// Save memory on AVR. Set nonzero to use alternate I2C or software I2c on AVR.
#define MULTIPLE_I2C_PORTS 0
#else  // __AVR__
#define MULTIPLE_I2C_PORTS 1
#endif  // __AVR__

/** AvrI2c uses 400 kHz fast mode if AVRI2C_FASTMODE is nonzero else 100 kHz. */
#define AVRI2C_FASTMODE 1
//------------------------------------------------------------------------------
// Values for setScrolMode(uint8_t mode)
/** Newline will not scroll the display or RAM window. */
#define SCROLL_MODE_OFF  0
/** Newline will scroll both the display and RAM windows. */
#define SCROLL_MODE_AUTO 1
/** Newline scrolls the RAM window. The app scrolls the display window. */
#define SCROLL_MODE_APP  2
//------------------------------------------------------------------------------
// Values for writeDisplay() mode parameter.
/** Write to Command register. */
#define SSD1306_MODE_CMD     0
/** Write one byte to display RAM. */
#define SSD1306_MODE_RAM     1
/** Write to display RAM with possible buffering. */
#define SSD1306_MODE_RAM_BUF 2
//------------------------------------------------------------------------------
/**
 * @brief Reset the display controller.
 *
 * @param[in] rst Reset pin number.
 */
inline void oledReset(uint8_t rst) {
  pinMode(rst, OUTPUT);
  digitalWrite(rst, LOW);
  delay(10);
  digitalWrite(rst, HIGH);
  delay(10);
}
//------------------------------------------------------------------------------
/**
 * @struct TickerState
 * @brief ticker status
 */

struct TickerState {
  const char* queue[TICKER_QUEUE_DIM];  ///< Queue of text pointers.
  uint8_t nQueue = 0;  ///< Count of pointers in queue.
  const uint8_t* font = nullptr;  ///< Font for ticker.
  bool mag2X;      ///< Use mag2X if true.
  uint8_t row;     ///< Row for ticker
  uint8_t bgnCol;  ///< Begin column of ticker.
  uint8_t endCol;  ///< End column of ticker.
  bool init;       ///< clear and initialize display area if true.
  uint8_t col;     ///< Column for start of displayed text.
  uint8_t skip;    ///< Number of pixels to skip in first character.
  /// @return Count of free queue slots.
  uint8_t queueFree() {return TICKER_QUEUE_DIM - nQueue;}
  /// @return Count of used queue slots.
  uint8_t queueUsed() {return nQueue;}
};

//------------------------------------------------------------------------------
/**
 * @class SSD1306Ascii
 * @brief SSD1306 base class
 */

class SSD1306Ascii{// : public Print {
 public:
  //using Print::write;
  SSD1306Ascii() {}
#if INCLUDE_SCROLLING
//------------------------------------------------------------------------------
  /**
   * @return the RAM page for top of the RAM window.
   */
  uint8_t pageOffset() const {return m_pageOffset;}
  /**
   * @return the display line for pageOffset.
   */
  uint8_t pageOffsetLine() const {return 8*m_pageOffset;}
  /**
   * @brief Scroll the Display window.
   *
   * @param[in] lines Number of lines to scroll the window.
   */
  void scrollDisplay(int8_t lines) {setStartLine(m_startLine + lines);}
  /**
   * @brief Scroll the RAM window.
   *
   * @param[in] rows Number of rows to scroll the window.
   */
  void scrollMemory(int8_t rows) {setPageOffset(m_pageOffset + rows);}
  /**
   * @return true if the first display line is equal to the
   *         start of the RAM window.
   */
  bool scrollIsSynced() const {return startLine() == pageOffsetLine();}
  /**
   * @brief Set page offset.
   *
   * @param[in] page the RAM page for start of the RAM window
   */
  void setPageOffset(uint8_t page);
  /**
   * @brief Enable or disable scroll mode. Deprecated use setScrollMode().
   *
   * @param[in] enable true enable scroll on newline false disable scroll.
   */
  void setScroll(bool enable) __attribute__((deprecated("use setScrollMode"))) {
    setScrollMode(enable ? SCROLL_MODE_AUTO : SCROLL_MODE_OFF);
  }
  /**
   * @brief Set scroll mode.
   *
   * @param[in] mode One of the following.
   *
   * SCROLL_MODE_OFF - newline will not scroll the display or RAM window.
   *
   * SCROLL_MODE_AUTO - newline will scroll both the display and RAM windows.
   *
   * SCROLL_MODE_APP - newline scrolls the RAM window.
   *                   The app scrolls the display window.
   */
  void setScrollMode(uint8_t mode) {m_scrollMode = mode;}
  /**
   * @brief Set the display start line register.
   *
   * @param[in] line RAM line to be mapped to first display line.
   */
  void setStartLine(uint8_t line);
  /**
   * @return the display startline.
   */
  uint8_t startLine() const {return m_startLine;}
#endif  // INCLUDE_SCROLLING
  //----------------------------------------------------------------------------
  /**
   * @brief Determine the spacing of a character. Spacing is width + space.
   *
   * @param[in] c Character code.
   * @return Spacing of the character in pixels.
   */
  uint8_t charSpacing(uint8_t c) {return charWidth(c) + letterSpacing();}
  /**
   * @brief Determine the width of a character.
   *
   * @param[in] c Character code.
   * @return Width of the character in pixels.
   */
  uint8_t charWidth(uint8_t c) const;
  /**
   * @brief Clear the display and set the cursor to (0, 0).
   */
  void clear();
  /**
   * @brief Clear a region of the display.
   *
   * @param[in] c0 Starting column.
   * @param[in] c1 Ending column.
   * @param[in] r0 Starting row;
   * @param[in] r1 Ending row;
   * @note The final cursor position will be (c0, r0).
   */
  void clear(uint8_t c0, uint8_t c1, uint8_t r0, uint8_t r1);
  /**
   * @brief Clear a field of n fieldWidth() characters.
   *
   * @param[in] col Field start column.
   *
   * @param[in] row Field start row.
   *
   * @param[in] n Number of characters in the field.
   *
   */
  void clearField(uint8_t col, uint8_t row, uint8_t n);
  /**
   * @brief Clear the display to the end of the current line.
   * @note The number of rows cleared will be determined by the height
   *       of the current font.
   * @note The cursor will be returned to the original position.
   */
  void clearToEOL();
  /**
   * @return The current column in pixels.
   */
  uint8_t col() const {return m_col;}
  /**
   * @return The display hight in pixels.
   */
  uint8_t displayHeight() const {return m_displayHeight;}
  /**
   * @brief Set display to normal or 180 degree remap mode.
   *
   * @param[in] mode true for normal mode, false for remap mode.
   *
   * @note Adafruit and many ebay displays use remap mode.
   *       Use normal mode to rotate these displays 180 degrees.
   */
  void displayRemap(bool mode);
  /**
   * @return The display height in rows with eight pixels to a row.
   */
  uint8_t displayRows() const {return m_displayHeight/8;}
  /**
   * @return The display width in pixels.
   */
  uint8_t displayWidth() const {return m_displayWidth;}
  /**
   * @brief Width of a field in pixels.
   *
   * @param[in] n Number of characters in the field.
   *
   * @return Width of the field.
   */
  size_t fieldWidth(uint8_t n);
  /**
   * @return The current font pointer.
   */
  const uint8_t* font() const {return m_font;}
  /**
   * @return The count of characters in a font.
   */
  uint8_t fontCharCount() const;
  /**
   * @return The first character in a font.
   */
  char fontFirstChar() const;
  /**
   * @return The current font height in pixels.
   */
  uint8_t fontHeight() const;
  /**
   * @return The number of eight pixel rows required to display a character
   *    in the current font.
   */
  uint8_t fontRows() const;
  /**
   * @return The maximum width of characters in the current font.
   */
  uint8_t fontWidth() const;
  /**
   * @brief Set the cursor position to (0, 0).
   */
  void home() {setCursor(0, 0);}
  /**
   * @brief Initialize the display controller.
   *
   * @param[in] dev A display initialization structure.
   */
  void init(const DevType* dev);
  /**
   * @brief Set pixel mode for for entire display.
   *
   * @param[in] invert Inverted display if true or normal display if false.
   */
  void invertDisplay(bool invert);
  /**
   * @return invert mode.
   */
  bool invertMode() const {return !!m_invertMask;}
  /**
   * @brief Set invert mode for write/print.
   *
   * @param[in] mode Invert pixels if true and use normal mode if false.
   */
  void setInvertMode(bool mode) {m_invertMask = mode ? 0XFF : 0;}
  /**
   * @return letter-spacing in pixels with magnification factor.
   */
  uint8_t letterSpacing() const {return m_magFactor*m_letterSpacing;}
  /**
   * @return The character magnification factor.
   */
  uint8_t magFactor() const {return m_magFactor;}
  /**
   * @return the current row number with eight pixels to a row.
   */
  uint8_t row() const {return m_row;}
  /**
   * @brief Set the character magnification factor to one.
   */
  void set1X() {m_magFactor = 1;}
  /**
   * @brief Set the character magnification factor to two.
   */
  void set2X() {m_magFactor = 2;}
  /**
   * @brief Set the current column number.
   *
   * @param[in] col The desired column number in pixels.
   */
  void setCol(uint8_t col);
  /**
   * @brief Set the display contrast.
   *
   * @param[in] value The contrast level in th range 0 to 255.
   */
  void setContrast(uint8_t value);
  /**
   * @brief Set the cursor position.
   *
   * @param[in] col The column number in pixels.
   * @param[in] row the row number in eight pixel rows.
   */
  void setCursor(uint8_t col, uint8_t row);
  /**
   * @brief Set the current font.
   *
   * @param[in] font Pointer to a font table.
   */
  void setFont(const uint8_t* font);
  /**
   * @brief Set letter-spacing.  setFont() will restore default letter-spacing.
   *
   * @param[in] pixels letter-spacing in pixels before magnification.
   */
  void setLetterSpacing(uint8_t pixels) {m_letterSpacing = pixels;}
  /**
   * @brief Set the current row number.
   *
   * @param[in] row the row number in eight pixel rows.
   */
  void setRow(uint8_t row);
  /**
   * @brief Write a command byte to the display controller.
   *
   * @param[in] c The command byte.
   * @note The byte will immediately be sent to the controller.
   */
  void ssd1306WriteCmd(uint8_t c) {writeDisplay(c, SSD1306_MODE_CMD);}
  /**
   * @brief Write a byte to RAM in the display controller.
   *
   * @param[in] c The data byte.
   * @note The byte will immediately be sent to the controller.
   */
  void ssd1306WriteRam(uint8_t c);
  /**
   * @brief Write a byte to RAM in the display controller.
   *
   * @param[in] c The data byte.
   * @note The byte may be buffered until a call to ssd1306WriteCmd
   *       or ssd1306WriteRam.
   */
  void ssd1306WriteRamBuf(uint8_t c);
  /**
   * @brief Skip leading pixels writing characters to display display RAM.
   *
   * @param[in] n Number of pixels to skip.
   */
  void skipColumns(uint8_t n) {m_skip = n;}
  /**
   * @brief Character width.
   *
   * @param[in] str The pointer to string.
   * @return the width of the string in pixels.
   */
  size_t strWidth(const char* str) const;
  /**
   * @brief Initialize TickerState struct and clear ticker field.
   *
   * @param[in,out] state Ticker state.
   * @param[in] font to be displayed.
   * @param[in] row Row for ticker.
   * @param[in] mag2X set magFactor to two if true.
   * @param[in] bgnCol First column of ticker. Default is zero.
   * @param[in] endCol Last column of ticker. Default is last column of display.
   */
  void tickerInit(TickerState* state, const uint8_t* font, uint8_t row,
       bool mag2X = false, uint8_t bgnCol = 0, uint8_t endCol = 255);
  /**
   *  @brief Add text pointer to display queue.
   *
   * @param[in,out] state Ticker state.
   * @param[in] str Pointer to String object. Clear queue if nullptr.
   * @return false if queue is full else true.
   */
  bool tickerText(TickerState* state, const String &str) {
    return tickerText(state, str ? str.c_str() : nullptr);
  }
  /**
   *  @brief Add text pointer to display queue.
   *
   * @param[in,out] state Ticker state.
   * @param[in] text Pointer to C string.  Clear queue if nullptr.
   * @return false if queue is full else true.
   */
  bool tickerText(TickerState* state, const char* text);
  /**
   * @brief Advance ticker by one pixel.
   *
   * @param[in,out] state Ticker state.
   *
   * @return Number of entries in text pointer queue.
   */
  int8_t tickerTick(TickerState* state);
  /**
   * @brief Display a character.
   *
   * @param[in] c The character to display.
   * @return one for success else zero.
   */
  size_t write(uint8_t c);

 protected:
  uint16_t fontSize() const;
  virtual void writeDisplay(uint8_t b, uint8_t mode) = 0;
  uint8_t m_col;            // Cursor column.
  uint8_t m_row;            // Cursor RAM row.
  uint8_t m_displayWidth;   // Display width.
  uint8_t m_displayHeight;  // Display height.
  uint8_t m_colOffset;      // Column offset RAM to SEG.
  uint8_t m_letterSpacing;  // Letter-spacing in pixels.
#if INCLUDE_SCROLLING
  uint8_t m_startLine;      // Top line of display
  uint8_t m_pageOffset;     // Top page of RAM window.
  uint8_t m_scrollMode = INITIAL_SCROLL_MODE;  // Scroll mode for newline.
#endif  // INCLUDE_SCROLLING
  uint8_t m_skip = 0;
  const uint8_t* m_font = nullptr;  // Current font.
  uint8_t m_invertMask = 0;  // font invert mask
  uint8_t m_magFactor = 1;   // Magnification factor.
};
#endif  // SSD1306Ascii_h


=== Файл: src\SSD1306Ascii\src\SSD1306AsciiAvrI2c.h ===

/* Arduino SSD1306Ascii Library
 * Copyright (C) 2015 by William Greiman
 *
 * This file is part of the Arduino SSD1306Ascii Library
 *
 * This Library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Arduino SSD1306Ascii Library.  If not, see
 * <http://www.gnu.org/licenses/>.
 */
/**
 * @file SSD1306AsciiAvrI2c.h
 * @brief Class for I2C displays using AvrI2c.
 */
#ifndef SSD1306AsciiAvrI2c_h
#define SSD1306AsciiAvrI2c_h
#include "utility/AvrI2c.h"
#include "SSD1306Ascii.h"
/**
 * @class SSD1306AsciiAvrI2c
 * @brief Class for I2C displays on AVR.
 *
 * Uses the AvrI2c class that is smaller and faster than the
 * Wire library.
 */
class SSD1306AsciiAvrI2c : public SSD1306Ascii {
 public:
  /**
   * @brief Initialize the display controller.
   *
   * @param[in] dev A device initialization structure.
   * @param[in] i2cAddr The I2C address of the display controller.
   */
  void begin(const DevType* dev, uint8_t i2cAddr) {
    m_nData = 0;
    m_i2cAddr = i2cAddr;

    m_i2c.begin(AVRI2C_FASTMODE);
    init(dev);
  }
  /**
   * @brief Initialize the display controller.
   *
   * @param[in] dev A device initialization structure.
   * @param[in] i2cAddr The I2C address of the display controller.
   * @param[in] rst The display controller reset pin.
   */
  void begin(const DevType* dev, uint8_t i2cAddr, uint8_t rst) {
    oledReset(rst);
    begin(dev, i2cAddr);
  }
  /**
   * @brief Set the I2C bit rate.
   *
   * @param[in] frequency Desired frequency in Hz.
   *            Valid range for a 16 MHz board is about 40 kHz to 444,000 kHz.
   */
  void setI2cClock(uint32_t frequency) {m_i2c.setClock(frequency);}

 protected:
  void writeDisplay(uint8_t b, uint8_t mode) {
    if ((m_nData && mode == SSD1306_MODE_CMD)) {
      m_i2c.stop();
      m_nData = 0;
    }
    if (m_nData == 0) {
      m_i2c.start((m_i2cAddr << 1) | I2C_WRITE);
      m_i2c.write(mode == SSD1306_MODE_CMD ? 0X00 : 0X40);
    }
    m_i2c.write(b);
    if (mode == SSD1306_MODE_RAM_BUF) {
      m_nData++;
    } else {
      m_i2c.stop();
      m_nData = 0;
    }
  }

 protected:
  AvrI2c m_i2c;
  uint8_t m_i2cAddr;
  uint8_t m_nData;
};
#endif  // SSD1306AsciiAvrI2c_h


=== Файл: src\SSD1306Ascii\src\SSD1306AsciiSoftSpi.h ===

/* Arduino SSD1306Ascii Library
 * Copyright (C) 2015 by William Greiman
 *
 * This file is part of the Arduino SSD1306Ascii Library
 *
 * This Library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Arduino SSD1306Ascii Library.  If not, see
 * <http://www.gnu.org/licenses/>.
 */
/**
 * @file SSD1306AsciiSoftSpi.h
 * @brief Class for software SPI displays.
 */
#ifndef SSD1306AsciiSoftSpi_h
#define SSD1306AsciiSoftSpi_h

#include "SSD1306Ascii.h"
#include "utility/DigitalOutput.h"
/**
 * @class SSD1306AsciiSoftSpi
 * @brief Class for SPI displays using software SPI.
 */
class SSD1306AsciiSoftSpi : public SSD1306Ascii {
 public:
  /**
   * @brief Initialize the display controller.
   *
   * @param[in] dev A device initialization structure.
   * @param[in] cs The display controller chip select pin.
   * @param[in] dc The display controller cdata/command pin.
   * @param[in] clk The SPI clock pin.
   * @param[in] data The SPI MOSI pin.
   */
  void begin(const DevType* dev, uint8_t dc, uint8_t clk, uint8_t data) {
    //m_csPin.begin(cs);
    m_dcPin.begin(dc);
    m_clkPin.begin(clk);
    m_dataPin.begin(data);
    init(dev);
  }
  /**
   * @brief Initialize the display controller.
   *
   * @param[in] dev A device initialization structure.
   * @param[in] cs The display controller chip select pin.
   * @param[in] dc The display controller cdata/command pin.
   * @param[in] clk The SPI clock pin.
   * @param[in] data The SPI MOSI pin.
   * @param[in] rst The display controller reset pin.
   */
  void begin(const DevType* dev, uint8_t dc, uint8_t clk, uint8_t data, uint8_t rst) {
    pinMode(rst, OUTPUT);
    digitalWrite(rst, LOW);
    delay(10);
    digitalWrite(rst, HIGH);
    delay(10);
    begin(dev, dc, clk, data);
  }

 protected:
  void writeDisplay(uint8_t b, uint8_t mode) {
    m_dcPin.write(mode != SSD1306_MODE_CMD);
    //m_csPin.write(LOW);
    for (uint8_t m = 0X80; m; m >>= 1) {
      m_clkPin.write(LOW);
      m_dataPin.write(m & b);
      m_clkPin.write(HIGH);
    }
    //m_csPin.write(HIGH);
  }

 protected:
  //DigitalOutput m_csPin;
  DigitalOutput m_dcPin;
  DigitalOutput m_clkPin;
  DigitalOutput m_dataPin;
};
#endif  // SSD1306AsciiSoftSpi_h


=== Файл: src\SSD1306Ascii\src\SSD1306AsciiSpi.h ===

/* Arduino SSD1306Ascii Library
 * Copyright (C) 2015 by William Greiman
 *
 * This file is part of the Arduino SSD1306Ascii Library
 *
 * This Library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Arduino SSD1306Ascii Library.  If not, see
 * <http://www.gnu.org/licenses/>.
 */
/**
 * @file SSD1306AsciiSpi.h
 * @brief Class for hardware SPI displays.
 */
#ifndef SSD1306AsciiSpi_h
#define SSD1306AsciiSpi_h
#include <SPI.h>
#include "SSD1306Ascii.h"
//------------------------------------------------------------------------------
/**
 * @class SSD1306AsciiSpi
 * @brief Class for SPI displays on the hardware SPI bus.
 */
class SSD1306AsciiSpi : public SSD1306Ascii {
 public:
  /**
   * @brief Initialize the display controller.
   *
   * @param[in] dev A device initialization structure.
   * @param[in] cs The display controller chip select pin.
   * @param[in] dc The display controller data/command pin.
   */
  void begin(const DevType* dev, uint8_t cs, uint8_t dc) {
    m_cs = cs;
    m_dc = dc;
    pinMode(m_cs, OUTPUT);
    pinMode(m_dc, OUTPUT);
    SPI.begin();
    init(dev);
  }
  /**
   * @brief Initialize the display controller.
   *
   * @param[in] dev A device initialization structure.
   * @param[in] cs The display controller chip select pin.
   * @param[in] dc The display controller cdata/command pin.
   * @param[in] rst The display controller reset pin.
   */
  void begin(const DevType* dev, uint8_t cs, uint8_t dc, uint8_t rst) {
    oledReset(rst);
    begin(dev, cs, dc);
  }

 protected:
  void writeDisplay(uint8_t b, uint8_t mode) {
    digitalWrite(m_dc, mode != SSD1306_MODE_CMD);
    SPI.beginTransaction(SPISettings(8000000, MSBFIRST, SPI_MODE0));
    digitalWrite(m_cs, LOW);
    SPI.transfer(b);
    digitalWrite(m_cs, HIGH);
    SPI.endTransaction();
  }

  int8_t m_cs;
  int8_t m_dc;
};
#endif  // SSD1306AsciiSpi_h


=== Файл: src\SSD1306Ascii\src\SSD1306AsciiWire.h ===

/* Arduino SSD1306Ascii Library
 * Copyright (C) 2015 by William Greiman
 *
 * This file is part of the Arduino SSD1306Ascii Library
 *
 * This Library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Arduino SSD1306Ascii Library.  If not, see
 * <http://www.gnu.org/licenses/>.
 */
/**
 * @file SSD1306AsciiWire.h
 * @brief Class for I2C displays using Wire.
 */
#ifndef SSD1306AsciiWire_h
#define SSD1306AsciiWire_h
//#include <Wire.h>
#include "SSD1306Ascii.h"
/**
 * @class SSD1306AsciiWire
 * @brief Class for I2C displays using Wire.
 */
class SSD1306AsciiWire : public SSD1306Ascii {
 public:
#if MULTIPLE_I2C_PORTS
  /**
   * @brief Initialize object on specific I2C bus.
   *
   * @param[in] bus The I2C bus to be used.
   */
  explicit SSD1306AsciiWire(decltype(Wire) &bus = Wire) : m_oledWire(bus) {}
#else  // MULTIPLE_I2C_PORTS
#define m_oledWire Wire
#endif  // MULTIPLE_I2C_PORTS
  /**
   * @brief Initialize the display controller.
   *
   * @param[in] dev A device initialization structure.
   * @param[in] i2cAddr The I2C address of the display controller.
   */
  void begin(const DevType* dev, uint8_t i2cAddr) {
#if OPTIMIZE_I2C
    m_nData = 0;
#endif  // OPTIMIZE_I2C
    m_i2cAddr = i2cAddr;
    init(dev);
  }
  /**
   * @brief Initialize the display controller.
   *
   * @param[in] dev A device initialization structure.
   * @param[in] i2cAddr The I2C address of the display controller.
   * @param[in] rst The display controller reset pin.
   */
  void begin(const DevType* dev, uint8_t i2cAddr, uint8_t rst) {
    oledReset(rst);
    begin(dev, i2cAddr);
  }
  /**
   * @brief Set the I2C clock rate to 400 kHz.
   * Deprecated use Wire.setClock(400000L)
   */
  // void set400kHz() __attribute__((deprecated("use Wire.setClock(400000L)"))) {
  //   m_oledWire.setClock(400000L);
  // }

 protected:
  void writeDisplay(uint8_t b, uint8_t mode) {
#if OPTIMIZE_I2C
    if (m_nData > 16 || (m_nData && mode == SSD1306_MODE_CMD)) {
      m_oledWire.endTransmission();
      m_nData = 0;
    }
    if (m_nData == 0) {
      m_oledWire.beginTransmission(m_i2cAddr);
      m_oledWire.write(mode == SSD1306_MODE_CMD ? 0X00 : 0X40);
    }
    m_oledWire.write(b);
    if (mode == SSD1306_MODE_RAM_BUF) {
      m_nData++;
    } else {
      m_oledWire.endTransmission();
      m_nData = 0;
    }
#else  // OPTIMIZE_I2C
    m_oledWire.beginTransmission(m_i2cAddr);
    m_oledWire.write(mode == SSD1306_MODE_CMD ? 0X00: 0X40);
    m_oledWire.write(b);
    m_oledWire.endTransmission();
#endif    // OPTIMIZE_I2C
  }

 protected:
#if MULTIPLE_I2C_PORTS
  decltype(Wire)& m_oledWire;
#endif  // MULTIPLE_I2C_PORTS
  uint8_t m_i2cAddr;
#if OPTIMIZE_I2C
  uint8_t m_nData;
#endif  // OPTIMIZE_I2C
};
#endif  // SSD1306AsciiWire_h


=== Файл: src\SSD1306Ascii\src\SSD1306init.h ===

/* Arduino SSD1306Ascii Library
 * Copyright (C) 2015 by William Greiman
 *
 * This file is part of the Arduino SSD1306Ascii Library
 *
 * This Library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Arduino SSD1306Ascii Library.  If not, see
 * <http://www.gnu.org/licenses/>.
 */
/**
 * @file SSD1306init.h
 * @brief Display controller initialization commands.
 */
#ifndef SSD1306init_h
#define SSD1306init_h
//------------------------------------------------------------------------------
#ifndef __AVR__
/** Handle AVR flash addressing. */
#define MEM_TYPE
#else  // __AVR__
#define MEM_TYPE __attribute__ ((progmem))
#endif  // __AVR__
//------------------------------------------------------------------------------
/** Set Lower Column Start Address for Page Addressing Mode. */
#define SSD1306_SETLOWCOLUMN 0x00
/** Set Higher Column Start Address for Page Addressing Mode. */
#define SSD1306_SETHIGHCOLUMN 0x10
/** Set Memory Addressing Mode. */
#define SSD1306_MEMORYMODE 0x20
/** Set display RAM display start line register from 0 - 63. */
#define SSD1306_SETSTARTLINE 0x40
/** Set Display Contrast to one of 256 steps. */
#define SSD1306_SETCONTRAST 0x81
/** Enable or disable charge pump.  Follow with 0X14 enable, 0X10 disable. */
#define SSD1306_CHARGEPUMP 0x8D
/** Set Segment Re-map between data column and the segment driver. */
#define SSD1306_SEGREMAP 0xA0
/** Resume display from GRAM content. */
#define SSD1306_DISPLAYALLON_RESUME 0xA4
/** Force display on regardless of GRAM content. */
#define SSD1306_DISPLAYALLON 0xA5
/** Set Normal Display. */
#define SSD1306_NORMALDISPLAY 0xA6
/** Set Inverse Display. */
#define SSD1306_INVERTDISPLAY 0xA7
/** Set Multiplex Ratio from 16 to 63. */
#define SSD1306_SETMULTIPLEX 0xA8
/** Set Display off. */
#define SSD1306_DISPLAYOFF 0xAE
/** Set Display on. */
#define SSD1306_DISPLAYON 0xAF
/**Set GDDRAM Page Start Address. */
#define SSD1306_SETSTARTPAGE 0xB0
/** Set COM output scan direction normal. */
#define SSD1306_COMSCANINC 0xC0
/** Set COM output scan direction reversed. */
#define SSD1306_COMSCANDEC 0xC8
/** Set Display Offset. */
#define SSD1306_SETDISPLAYOFFSET 0xD3
/** Sets COM signals pin configuration to match the OLED panel layout. */
#define SSD1306_SETCOMPINS 0xDA
/** This command adjusts the VCOMH regulator output. */
#define SSD1306_SETVCOMDETECT 0xDB
/** Set Display Clock Divide Ratio/ Oscillator Frequency. */
#define SSD1306_SETDISPLAYCLOCKDIV 0xD5
/** Set Pre-charge Period */
#define SSD1306_SETPRECHARGE 0xD9
/** Deactivate scroll */
#define SSD1306_DEACTIVATE_SCROLL 0x2E
/** No Operation Command. */
#define SSD1306_NOP 0xE3
//------------------------------------------------------------------------------
/** Set Pump voltage value: (30H~33H) 6.4, 7.4, 8.0 (POR), 9.0. */
#define SH1106_SET_PUMP_VOLTAGE 0x30
/** First byte of set charge pump mode */
#define SH1106_SET_PUMP_MODE 0xAD
/** Second byte charge pump on. */
#define SH1106_PUMP_ON 0x8B
/** Second byte charge pump off. */
#define SH1106_PUMP_OFF 0x8A
//------------------------------------------------------------------------------
/**
 * @struct DevType
 * @brief Device initialization structure.
 */
struct DevType {
  /**
   * Pointer to initialization command bytes.
   */
  const uint8_t* initcmds;
  /**
   * Number of initialization bytes.
   */
  const uint8_t initSize;
  /**
   * Width of the diaplay in pixels.
   */
  const uint8_t lcdWidth;
  /**
   * Height of the display in pixels.
   */
  const uint8_t lcdHeight;
  /**
   * Column offset RAM to display.  Used to pick start column of SH1106.
   */
  const uint8_t colOffset;
};
//------------------------------------------------------------------------------
/** Initialization commands for a 64x48 Micro OLED display (by r7) */
static const uint8_t MEM_TYPE MicroOLED64x48init[] = {
    // Init sequence for 64x48 Micro OLED module
    SSD1306_DISPLAYOFF,
    SSD1306_SETDISPLAYCLOCKDIV, 0x80,  // the suggested ratio 0x80
    SSD1306_SETMULTIPLEX, 0x2F,        //
    SSD1306_SETDISPLAYOFFSET, 0x0,     // no offset
    SSD1306_SETSTARTLINE | 0x0,        // line #0
    SSD1306_CHARGEPUMP, 0x14,          // internal vcc
    SSD1306_NORMALDISPLAY,
    SSD1306_DISPLAYALLON_RESUME,
    SSD1306_SEGREMAP | 0x1,            // column 127 mapped to SEG0
    SSD1306_COMSCANDEC,                // column scan direction reversed
    SSD1306_SETCOMPINS, 0x12,          // 0x12 if height > 32 else 0x02
    SSD1306_SETCONTRAST, 0x7F,         // contrast level 127
    SSD1306_SETPRECHARGE, 0xF1,        // pre-charge period (1, 15)
    SSD1306_SETVCOMDETECT, 0x40,       // vcomh regulator level
    SSD1306_DISPLAYON
};
/** Initialize a 64x48 Micro OLED display. */
static const DevType MEM_TYPE MicroOLED64x48 = {
  MicroOLED64x48init,
  sizeof(MicroOLED64x48init),
  64,
  48,
  32
};
//------------------------------------------------------------------------------
// this section is based on
// https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_d_ssd1306_96x16.c
/** Initialization commands for a 96x16 SSD1306 oled display. */
static const uint8_t MEM_TYPE SSD1306_96x16init[] = {
    // Init sequence for Generic 96x16 OLED module
    SSD1306_DISPLAYOFF,
    SSD1306_SETDISPLAYCLOCKDIV, 0x80,  // clock divide ratio and osc frequency
    SSD1306_SETMULTIPLEX, 0x0F,        // multiplex ratio
    SSD1306_SETDISPLAYOFFSET, 0x0,     // display offset zero
    SSD1306_SETSTARTLINE | 0x0,        // set display start line to 0
    SSD1306_CHARGEPUMP, 0x14,          // charge pump setting enable
    SSD1306_MEMORYMODE, 0x00,          // page addressing mode
    SSD1306_SEGREMAP | 0xA1,           // segment remap
    SSD1306_COMSCANDEC,                // scan dir reverse
    SSD1306_SETCOMPINS, 0x02,          // com pin HW config
    SSD1306_SETCONTRAST, 0xAF,         // set contrast level 0xaf
    SSD1306_SETPRECHARGE, 0xF1,        // pre-charge period 0x0f1
    SSD1306_SETVCOMDETECT, 0x20,       // vcomh deselect level
    SSD1306_DEACTIVATE_SCROLL,         //  Deactivate scroll
    SSD1306_DISPLAYALLON_RESUME,
    SSD1306_NORMALDISPLAY,
    SSD1306_DISPLAYON
};
/** Initialize a 96x16 SSD1306 oled display. */
static const DevType MEM_TYPE SSD1306_96x16 = {
  SSD1306_96x16init,
  sizeof(SSD1306_96x16init),
  96,
  16,
  0
};
//------------------------------------------------------------------------------
// this section is based on https://github.com/adafruit/Adafruit_SSD1306
/** Initialization commands for a 128x32 SSD1306 oled display. */
static const uint8_t MEM_TYPE Adafruit128x32init[] = {
    // Init sequence for Adafruit 128x32 OLED module
    SSD1306_DISPLAYOFF,
    SSD1306_SETDISPLAYCLOCKDIV, 0x80,  // the suggested ratio 0x80
    SSD1306_SETMULTIPLEX, 0x1F,        // ratio 32
    SSD1306_SETDISPLAYOFFSET, 0x0,     // no offset
    SSD1306_SETSTARTLINE | 0x0,        // line #0
    SSD1306_CHARGEPUMP, 0x14,          // internal vcc
    SSD1306_MEMORYMODE, 0x02,          // page mode
    SSD1306_SEGREMAP | 0x1,            // column 127 mapped to SEG0
    SSD1306_COMSCANDEC,                // column scan direction reversed
    SSD1306_SETCOMPINS, 0x02,          // sequential COM pins, disable remap
    SSD1306_SETCONTRAST, 0x7F,         // contrast level 127
    SSD1306_SETPRECHARGE, 0xF1,        // pre-charge period (1, 15)
    SSD1306_SETVCOMDETECT, 0x40,       // vcomh regulator level
    SSD1306_DISPLAYALLON_RESUME,
    SSD1306_NORMALDISPLAY,
    SSD1306_DISPLAYON
};
/** Initialize a 128x32 SSD1306 oled display. */
static const DevType MEM_TYPE Adafruit128x32 = {
  Adafruit128x32init,
  sizeof(Adafruit128x32init),
  128,
  32,
  0
};
//------------------------------------------------------------------------------
// This section is based on https://github.com/adafruit/Adafruit_SSD1306
/** Initialization commands for a 128x64 SSD1306 oled display. */
static const uint8_t MEM_TYPE Adafruit128x64init[] = {
    // Init sequence for Adafruit 128x64 OLED module
    SSD1306_DISPLAYOFF,
    SSD1306_SETDISPLAYCLOCKDIV, 0x80,  // the suggested ratio 0x80
    SSD1306_SETMULTIPLEX, 0x3F,        // ratio 64
    SSD1306_SETDISPLAYOFFSET, 0x0,     // no offset
    SSD1306_SETSTARTLINE | 0x0,        // line #0
    SSD1306_CHARGEPUMP, 0x14,          // internal vcc
    SSD1306_MEMORYMODE, 0x02,          // page mode
    SSD1306_SEGREMAP | 0x1,            // column 127 mapped to SEG0
    SSD1306_COMSCANDEC,                // column scan direction reversed
    SSD1306_SETCOMPINS, 0x12,          // alt COM pins, disable remap
    SSD1306_SETCONTRAST, 0x7F,         // contrast level 127
    SSD1306_SETPRECHARGE, 0xF1,        // pre-charge period (1, 15)
    SSD1306_SETVCOMDETECT, 0x40,       // vcomh regulator level
    SSD1306_DISPLAYALLON_RESUME,
    SSD1306_NORMALDISPLAY,
    SSD1306_DISPLAYON
};
/** Initialize a 128x64 oled display. */
static const DevType MEM_TYPE Adafruit128x64 = {
  Adafruit128x64init,
  sizeof(Adafruit128x64init),
  128,
  64,
  0
};
//------------------------------------------------------------------------------
// This section is based on https://github.com/stanleyhuangyc/MultiLCD
/** Initialization commands for a 128x64 SH1106 oled display. */
static const uint8_t MEM_TYPE SH1106_128x64init[] = {
    SSD1306_DISPLAYOFF,
    SSD1306_SETSTARTPAGE | 0X0,           // set page address
    SSD1306_SETCONTRAST, 0x80,            // 128
    SSD1306_SEGREMAP | 0X1,               // set segment remap
    SSD1306_NORMALDISPLAY,                // normal / reverse
    SSD1306_SETMULTIPLEX, 0x3F,           // ratio 64
    SH1106_SET_PUMP_MODE, SH1106_PUMP_ON, // set charge pump enable
    SH1106_SET_PUMP_VOLTAGE | 0X2,        // 8.0 volts
    SSD1306_COMSCANDEC,                   // Com scan direction
    SSD1306_SETDISPLAYOFFSET, 0X00,       // set display offset
    SSD1306_SETDISPLAYCLOCKDIV, 0X80,     // set osc division
    SSD1306_SETPRECHARGE, 0X1F,           // set pre-charge period
    SSD1306_SETCOMPINS, 0X12,             // set COM pins
    SSD1306_SETVCOMDETECT, 0x40,          // set vcomh
    SSD1306_DISPLAYON
    };
/** Initialize a 128x64 oled SH1106 display. */
static const DevType MEM_TYPE SH1106_128x64 = {
    // SH1106_128x64init,
    // sizeof(SH1106_128x64init),
    Adafruit128x64init,
    sizeof(Adafruit128x64init),
    128,
    64,
    2 // SH1106 is a 132x64 controller.  Use middle 128 columns.
};
#endif  // SSD1306init_h


=== Файл: src\SSD1306Ascii\src\fonts\Adafruit5x7.h ===

#ifndef Adafruit5x7_h
#define Adafruit5x7_h

// standard ascii 5x7 font
// Restrict to 96 characters
#define ADAFRUIT_ASCII96 0
GLCDFONTDECL(Adafruit5x7) = {
  0x0, 0x0, // size of zero indicates fixed width font,
  0x05, // width
  0x07, // height
#if ADAFRUIT_ASCII96
  0x20, // first char
  0x60, // char count
#else   // ADAFRUIT_ASCII96
  0x00, // first char
  0xFF, // char count
  0x00, 0x00, 0x00, 0x00, 0x00,
	0x3E, 0x5B, 0x4F, 0x5B, 0x3E,
	0x3E, 0x6B, 0x4F, 0x6B, 0x3E,
	0x1C, 0x3E, 0x7C, 0x3E, 0x1C,
	0x18, 0x3C, 0x7E, 0x3C, 0x18,
	0x1C, 0x57, 0x7D, 0x57, 0x1C,
	0x1C, 0x5E, 0x7F, 0x5E, 0x1C,
	0x00, 0x18, 0x3C, 0x18, 0x00,
	0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
	0x00, 0x18, 0x24, 0x18, 0x00,
	0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
	0x30, 0x48, 0x3A, 0x06, 0x0E,
	0x26, 0x29, 0x79, 0x29, 0x26,
	0x40, 0x7F, 0x05, 0x05, 0x07,
	0x40, 0x7F, 0x05, 0x25, 0x3F,
	0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
	0x7F, 0x3E, 0x1C, 0x1C, 0x08,
	0x08, 0x1C, 0x1C, 0x3E, 0x7F,
	0x14, 0x22, 0x7F, 0x22, 0x14,
	0x5F, 0x5F, 0x00, 0x5F, 0x5F,
	0x06, 0x09, 0x7F, 0x01, 0x7F,
	0x00, 0x66, 0x89, 0x95, 0x6A,
	0x60, 0x60, 0x60, 0x60, 0x60,
	0x94, 0xA2, 0xFF, 0xA2, 0x94,
	0x08, 0x04, 0x7E, 0x04, 0x08,
	0x10, 0x20, 0x7E, 0x20, 0x10,
	0x08, 0x08, 0x2A, 0x1C, 0x08,
	0x08, 0x1C, 0x2A, 0x08, 0x08,
	0x1E, 0x10, 0x10, 0x10, 0x10,
	0x0C, 0x1E, 0x0C, 0x1E, 0x0C,
	0x30, 0x38, 0x3E, 0x38, 0x30,
	0x06, 0x0E, 0x3E, 0x0E, 0x06,
#endif  // ADAFRUIT_ASCII96
	0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x5F, 0x00, 0x00,
	0x00, 0x07, 0x00, 0x07, 0x00,
	0x14, 0x7F, 0x14, 0x7F, 0x14,
	0x24, 0x2A, 0x7F, 0x2A, 0x12,
	0x23, 0x13, 0x08, 0x64, 0x62,
	0x36, 0x49, 0x56, 0x20, 0x50,
	0x00, 0x08, 0x07, 0x03, 0x00,
	0x00, 0x1C, 0x22, 0x41, 0x00,
	0x00, 0x41, 0x22, 0x1C, 0x00,
	0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
	0x08, 0x08, 0x3E, 0x08, 0x08,
	0x00, 0x80, 0x70, 0x30, 0x00,
	0x08, 0x08, 0x08, 0x08, 0x08,
	0x00, 0x00, 0x60, 0x60, 0x00,
	0x20, 0x10, 0x08, 0x04, 0x02,
	0x3E, 0x51, 0x49, 0x45, 0x3E,
	0x00, 0x42, 0x7F, 0x40, 0x00,
	0x72, 0x49, 0x49, 0x49, 0x46,
	0x21, 0x41, 0x49, 0x4D, 0x33,
	0x18, 0x14, 0x12, 0x7F, 0x10,
	0x27, 0x45, 0x45, 0x45, 0x39,
	0x3C, 0x4A, 0x49, 0x49, 0x31,
	0x41, 0x21, 0x11, 0x09, 0x07,
	0x36, 0x49, 0x49, 0x49, 0x36,
	0x46, 0x49, 0x49, 0x29, 0x1E,
	0x00, 0x00, 0x14, 0x00, 0x00,
	0x00, 0x40, 0x34, 0x00, 0x00,
	0x00, 0x08, 0x14, 0x22, 0x41,
	0x14, 0x14, 0x14, 0x14, 0x14,
	0x00, 0x41, 0x22, 0x14, 0x08,
	0x02, 0x01, 0x59, 0x09, 0x06,
	0x3E, 0x41, 0x5D, 0x59, 0x4E,
	0x7C, 0x12, 0x11, 0x12, 0x7C,
	0x7F, 0x49, 0x49, 0x49, 0x36,
	0x3E, 0x41, 0x41, 0x41, 0x22,
	0x7F, 0x41, 0x41, 0x41, 0x3E,
	0x7F, 0x49, 0x49, 0x49, 0x41,
	0x7F, 0x09, 0x09, 0x09, 0x01,
	0x3E, 0x41, 0x41, 0x51, 0x73,
	0x7F, 0x08, 0x08, 0x08, 0x7F,
	0x00, 0x41, 0x7F, 0x41, 0x00,
	0x20, 0x40, 0x41, 0x3F, 0x01,
	0x7F, 0x08, 0x14, 0x22, 0x41,
	0x7F, 0x40, 0x40, 0x40, 0x40,
	0x7F, 0x02, 0x1C, 0x02, 0x7F,
	0x7F, 0x04, 0x08, 0x10, 0x7F,
	0x3E, 0x41, 0x41, 0x41, 0x3E,
	0x7F, 0x09, 0x09, 0x09, 0x06,
	0x3E, 0x41, 0x51, 0x21, 0x5E,
	0x7F, 0x09, 0x19, 0x29, 0x46,
	0x26, 0x49, 0x49, 0x49, 0x32,
	0x03, 0x01, 0x7F, 0x01, 0x03,
	0x3F, 0x40, 0x40, 0x40, 0x3F,
	0x1F, 0x20, 0x40, 0x20, 0x1F,
	0x3F, 0x40, 0x38, 0x40, 0x3F,
	0x63, 0x14, 0x08, 0x14, 0x63,
	0x03, 0x04, 0x78, 0x04, 0x03,
	0x61, 0x59, 0x49, 0x4D, 0x43,
	0x00, 0x7F, 0x41, 0x41, 0x41,
	0x02, 0x04, 0x08, 0x10, 0x20,
	0x00, 0x41, 0x41, 0x41, 0x7F,
	0x04, 0x02, 0x01, 0x02, 0x04,
	0x40, 0x40, 0x40, 0x40, 0x40,
	0x00, 0x03, 0x07, 0x08, 0x00,
	0x20, 0x54, 0x54, 0x78, 0x40,
	0x7F, 0x28, 0x44, 0x44, 0x38,
	0x38, 0x44, 0x44, 0x44, 0x28,
	0x38, 0x44, 0x44, 0x28, 0x7F,
	0x38, 0x54, 0x54, 0x54, 0x18,
	0x00, 0x08, 0x7E, 0x09, 0x02,
	0x18, 0xA4, 0xA4, 0x9C, 0x78,
	0x7F, 0x08, 0x04, 0x04, 0x78,
	0x00, 0x44, 0x7D, 0x40, 0x00,
	0x20, 0x40, 0x40, 0x3D, 0x00,
	0x7F, 0x10, 0x28, 0x44, 0x00,
	0x00, 0x41, 0x7F, 0x40, 0x00,
	0x7C, 0x04, 0x78, 0x04, 0x78,
	0x7C, 0x08, 0x04, 0x04, 0x78,
	0x38, 0x44, 0x44, 0x44, 0x38,
	0xFC, 0x18, 0x24, 0x24, 0x18,
	0x18, 0x24, 0x24, 0x18, 0xFC,
	0x7C, 0x08, 0x04, 0x04, 0x08,
	0x48, 0x54, 0x54, 0x54, 0x24,
	0x04, 0x04, 0x3F, 0x44, 0x24,
	0x3C, 0x40, 0x40, 0x20, 0x7C,
	0x1C, 0x20, 0x40, 0x20, 0x1C,
	0x3C, 0x40, 0x30, 0x40, 0x3C,
	0x44, 0x28, 0x10, 0x28, 0x44,
	0x4C, 0x90, 0x90, 0x90, 0x7C,
	0x44, 0x64, 0x54, 0x4C, 0x44,
	0x00, 0x08, 0x36, 0x41, 0x00,
	0x00, 0x00, 0x77, 0x00, 0x00,
	0x00, 0x41, 0x36, 0x08, 0x00,
	0x02, 0x01, 0x02, 0x04, 0x02,
	0x3C, 0x26, 0x23, 0x26, 0x3C,
#if !ADAFRUIT_ASCII96
	0x1E, 0xA1, 0xA1, 0x61, 0x12,
	0x3A, 0x40, 0x40, 0x20, 0x7A,
	0x38, 0x54, 0x54, 0x55, 0x59,
	0x21, 0x55, 0x55, 0x79, 0x41,
	0x22, 0x54, 0x54, 0x78, 0x42, // a-umlaut
	0x21, 0x55, 0x54, 0x78, 0x40,
	0x20, 0x54, 0x55, 0x79, 0x40,
	0x0C, 0x1E, 0x52, 0x72, 0x12,
	0x39, 0x55, 0x55, 0x55, 0x59,
	0x39, 0x54, 0x54, 0x54, 0x59,
	0x39, 0x55, 0x54, 0x54, 0x58,
	0x00, 0x00, 0x45, 0x7C, 0x41,
	0x00, 0x02, 0x45, 0x7D, 0x42,
	0x00, 0x01, 0x45, 0x7C, 0x40,
	0x7D, 0x12, 0x11, 0x12, 0x7D, // A-umlaut
	0xF0, 0x28, 0x25, 0x28, 0xF0,
	0x7C, 0x54, 0x55, 0x45, 0x00,
	0x20, 0x54, 0x54, 0x7C, 0x54,
	0x7C, 0x0A, 0x09, 0x7F, 0x49,
	0x32, 0x49, 0x49, 0x49, 0x32,
	0x3A, 0x44, 0x44, 0x44, 0x3A, // o-umlaut
	0x32, 0x4A, 0x48, 0x48, 0x30,
	0x3A, 0x41, 0x41, 0x21, 0x7A,
	0x3A, 0x42, 0x40, 0x20, 0x78,
	0x00, 0x9D, 0xA0, 0xA0, 0x7D,
	0x3D, 0x42, 0x42, 0x42, 0x3D, // O-umlaut
	0x3D, 0x40, 0x40, 0x40, 0x3D,
	0x3C, 0x24, 0xFF, 0x24, 0x24,
	0x48, 0x7E, 0x49, 0x43, 0x66,
	0x2B, 0x2F, 0xFC, 0x2F, 0x2B,
	0xFF, 0x09, 0x29, 0xF6, 0x20,
	0xC0, 0x88, 0x7E, 0x09, 0x03,
	0x20, 0x54, 0x54, 0x79, 0x41,
	0x00, 0x00, 0x44, 0x7D, 0x41,
	0x30, 0x48, 0x48, 0x4A, 0x32,
	0x38, 0x40, 0x40, 0x22, 0x7A,
	0x00, 0x7A, 0x0A, 0x0A, 0x72,
	0x7D, 0x0D, 0x19, 0x31, 0x7D,
	0x26, 0x29, 0x29, 0x2F, 0x28,
	0x26, 0x29, 0x29, 0x29, 0x26,
	0x30, 0x48, 0x4D, 0x40, 0x20,
	0x38, 0x08, 0x08, 0x08, 0x08,
	0x08, 0x08, 0x08, 0x08, 0x38,
	0x2F, 0x10, 0xC8, 0xAC, 0xBA,
	0x2F, 0x10, 0x28, 0x34, 0xFA,
	0x00, 0x00, 0x7B, 0x00, 0x00,
	0x08, 0x14, 0x2A, 0x14, 0x22,
	0x22, 0x14, 0x2A, 0x14, 0x08,
	0x55, 0x00, 0x55, 0x00, 0x55, // #176 (25% block) missing in old code
	0xAA, 0x55, 0xAA, 0x55, 0xAA, // 50% block
	0xFF, 0x55, 0xFF, 0x55, 0xFF, // 75% block
	0x00, 0x00, 0x00, 0xFF, 0x00,
	0x10, 0x10, 0x10, 0xFF, 0x00,
	0x14, 0x14, 0x14, 0xFF, 0x00,
	0x10, 0x10, 0xFF, 0x00, 0xFF,
	0x10, 0x10, 0xF0, 0x10, 0xF0,
	0x14, 0x14, 0x14, 0xFC, 0x00,
	0x14, 0x14, 0xF7, 0x00, 0xFF,
	0x00, 0x00, 0xFF, 0x00, 0xFF,
	0x14, 0x14, 0xF4, 0x04, 0xFC,
	0x14, 0x14, 0x17, 0x10, 0x1F,
	0x10, 0x10, 0x1F, 0x10, 0x1F,
	0x14, 0x14, 0x14, 0x1F, 0x00,
	0x10, 0x10, 0x10, 0xF0, 0x00,
	0x00, 0x00, 0x00, 0x1F, 0x10,
	0x10, 0x10, 0x10, 0x1F, 0x10,
	0x10, 0x10, 0x10, 0xF0, 0x10,
	0x00, 0x00, 0x00, 0xFF, 0x10,
	0x10, 0x10, 0x10, 0x10, 0x10,
	0x10, 0x10, 0x10, 0xFF, 0x10,
	0x00, 0x00, 0x00, 0xFF, 0x14,
	0x00, 0x00, 0xFF, 0x00, 0xFF,
	0x00, 0x00, 0x1F, 0x10, 0x17,
	0x00, 0x00, 0xFC, 0x04, 0xF4,
	0x14, 0x14, 0x17, 0x10, 0x17,
	0x14, 0x14, 0xF4, 0x04, 0xF4,
	0x00, 0x00, 0xFF, 0x00, 0xF7,
	0x14, 0x14, 0x14, 0x14, 0x14,
	0x14, 0x14, 0xF7, 0x00, 0xF7,
	0x14, 0x14, 0x14, 0x17, 0x14,
	0x10, 0x10, 0x1F, 0x10, 0x1F,
	0x14, 0x14, 0x14, 0xF4, 0x14,
	0x10, 0x10, 0xF0, 0x10, 0xF0,
	0x00, 0x00, 0x1F, 0x10, 0x1F,
	0x00, 0x00, 0x00, 0x1F, 0x14,
	0x00, 0x00, 0x00, 0xFC, 0x14,
	0x00, 0x00, 0xF0, 0x10, 0xF0,
	0x10, 0x10, 0xFF, 0x10, 0xFF,
	0x14, 0x14, 0x14, 0xFF, 0x14,
	0x10, 0x10, 0x10, 0x1F, 0x00,
	0x00, 0x00, 0x00, 0xF0, 0x10,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
	0xFF, 0xFF, 0xFF, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xFF, 0xFF,
	0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
	0x38, 0x44, 0x44, 0x38, 0x44,
	0xFC, 0x4A, 0x4A, 0x4A, 0x34, // sharp-s or beta
	0x7E, 0x02, 0x02, 0x06, 0x06,
	0x02, 0x7E, 0x02, 0x7E, 0x02,
	0x63, 0x55, 0x49, 0x41, 0x63,
	0x38, 0x44, 0x44, 0x3C, 0x04,
	0x40, 0x7E, 0x20, 0x1E, 0x20,
	0x06, 0x02, 0x7E, 0x02, 0x02,
	0x99, 0xA5, 0xE7, 0xA5, 0x99,
	0x1C, 0x2A, 0x49, 0x2A, 0x1C,
	0x4C, 0x72, 0x01, 0x72, 0x4C,
	0x30, 0x4A, 0x4D, 0x4D, 0x30,
	0x30, 0x48, 0x78, 0x48, 0x30,
	0xBC, 0x62, 0x5A, 0x46, 0x3D,
	0x3E, 0x49, 0x49, 0x49, 0x00,
	0x7E, 0x01, 0x01, 0x01, 0x7E,
	0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
	0x44, 0x44, 0x5F, 0x44, 0x44,
	0x40, 0x51, 0x4A, 0x44, 0x40,
	0x40, 0x44, 0x4A, 0x51, 0x40,
	0x00, 0x00, 0xFF, 0x01, 0x03,
	0xE0, 0x80, 0xFF, 0x00, 0x00,
	0x08, 0x08, 0x6B, 0x6B, 0x08,
	0x36, 0x12, 0x36, 0x24, 0x36,
	0x06, 0x0F, 0x09, 0x0F, 0x06,
	0x00, 0x00, 0x18, 0x18, 0x00,
	0x00, 0x00, 0x10, 0x10, 0x00,
	0x30, 0x40, 0xFF, 0x01, 0x01,
	0x00, 0x1F, 0x01, 0x01, 0x1E,
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00  // #255 NBSP
#endif  // ADAFRUIT_ASCII96
};
#endif  // Adafruit5x7_h


=== Файл: src\SSD1306Ascii\src\fonts\allFonts.h ===

/*
 * allFonts.h font header for GLCD library
 * The fonts listed below will be available in a sketch if this file is included
 *
 * If you create your own fonts you can add the header to this file
 *
 * Note that the build environment only holds a font in Flash if its selected
 * so there is no penalty to including a font file here if its not used
 */
/**
 * @file allFonts.h
 * @brief Font definitions.
 */
#ifndef _allFonts_h_
#define _allFonts_h_

#ifdef __AVR__
#include <avr/pgmspace.h>
/** declare a font for AVR. */
#define GLCDFONTDECL(_n) static const uint8_t __attribute__ ((progmem))_n[]
#define readFontByte(addr) pgm_read_byte(addr)
#else  // __AVR__
/** declare a font. */
#define GLCDFONTDECL(_n) static const uint8_t _n[]
/** Fake read from flash. */
#define readFontByte(addr) (*(const unsigned char *)(addr))
#endif  // __AVR__
//------------------------------------------------------------------------------
// Font Indices
/** No longer used Big Endian length field. Now indicates font type.
 *
 * 00 00 (fixed width font with 1 padding pixel on right and below)
 * 
 * 00 01 (fixed width font with no padding pixels)
 */
#define FONT_LENGTH      0
/** Maximum character width. */
#define FONT_WIDTH       2
/** Font hight in pixels */ 
#define FONT_HEIGHT      3
/** Ascii value of first character */
#define FONT_FIRST_CHAR  4
/** count of characters in font. */
#define FONT_CHAR_COUNT  5
/** Offset to width table. */
#define FONT_WIDTH_TABLE 6
//
// FONT_LENGTH is a 16 bit Big Endian length field.
// Unfortunately, FontCreator2 screwed up the value it put in the field
// so it is pretty much meaningless. However it still is used to indicate
// some special things.
// 00 00 (fixed width font with 1 padding pixel on right and below)
// 00 01 (fixed width font with no padding pixels)
// FONT_WIDTH it the max character width.
// any other value means variable width font in FontCreator2 (thiele)
// format with pixel padding

#include "BigPostfix30x16_2.h"
#include "BigPostfix30x16.h"
#include "BigIcon36x40.h"
#include "FixedNum30x40_2.h"
#include "ProgBar.h"
#include "Vicler8x16.h"			// cyrillic
#include "System5x7R.h"			// cyrillic + latin
#include "CenturyGothic10x16.h" // cyrillic + latin
#include "MonoNum22x32.h"
#include "FixedNum30x40.h"
#include "MonoNum30x40.h"
#include "Mode12x26.h"
#include "Mode213x28.h"
#include "Mode13x28.h"
#include "Battery10x17.h"
#include "iBattery12x19.h"
#include "Battery12x22.h"
#include "Battery19x9.h"
#include "Battery219x9.h"
#include "Battery22x12.h"
#include "Adafruit5x7.h"        // Font from Adafruit GFX library
#include "font5x7.h"
#include "lcd5x7.h"
#include "Stang5x7.h"
#include "X11fixed7x14.h"
#include "X11fixed7x14B.h"
#include "ZevvPeep8x16.h"

#include "System5x7.h" 	        // system font (fixed width)
#include "SystemFont5x7.h"      // backward compability System5x7 header
#include "Iain5x7.h"		        // similar to system5x7 but proportional
#include "Arial14.h"            // proportional font
#include "Arial_bold_14.h"      // Bold proportional font
#include "Corsiva_12.h"
#include "Verdana_digits_24.h"  // large proportional font contains [0-9] and :

#include "Callibri10.h"
#include "Callibri11.h"
#include "Callibri11_bold.h"
#include "Callibri11_italic.h"
#include "Callibri14.h"
#include "Callibri15.h"
#include "Cooper19.h"
#include "Cooper21.h"
#include "Cooper26.h"
#include "TimesNewRoman13.h"
#include "TimesNewRoman13_italic.h"
#include "TimesNewRoman16.h"
#include "TimesNewRoman16_bold.h"
#include "TimesNewRoman16_italic.h"
#include "Verdana12.h"
#include "Verdana12_bold.h"
#include "Verdana12_italic.h"
#include "Roosewood22.h"
#include "Roosewood26.h"

#include "fixednums7x15.h"       // fixed width font - + , - . / [0-9] and :
#include "fixednums8x16.h"       // fixed width font - + , - . / [0-9] and :
#include "fixednums15x31.h"      // fixed width font - + , - . / [0-9] and :

#include "CalBlk36.h"
#include "CalLite24.h"
#include "lcdnums12x16.h"	// font that looks like LCD digits
#include "lcdnums14x24.h"	// font that looks like LCD digits
#include "fixed_bold10x15.h"
#include "Wendy3x5.h"
#include "newbasic3x5.h"


// * These fonts require no-pad rendering code
#include "font8x8.h"		// fixed wider font but similar to system5x7 font
#include "cp437font8x8.h"   // fixed Font from 80's IBM PC


// * These fonts require UTF8 encoding support


#include "utf8font10x16.h"	// UTF8 font up to U+00FF
				// http://www.fileformat.info/info/charset/UTF-8/list.htm


#endif


=== Файл: src\SSD1306Ascii\src\fonts\Arial14.h ===

/*
 *
 * Arial_14
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : Arial14.h
 * Date                : 02.05.2008
 * Font size in bytes  : 7788
 * Font width          : 13
 * Font height         : 14
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef ARIAL_14_H
#define ARIAL_14_H

#define ARIAL_14_WIDTH 13
#define ARIAL_14_HEIGHT 14

/*
 * added for backward compability
 */

#define Arial_14 Arial14

GLCDFONTDECL(Arial14) = {
    0x1E, 0x6C, // size
    0x0D, // width
    0x0E, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x02, 0x01, 0x03, 0x08, 0x07, 0x0A, 0x08, 0x01, 0x03, 0x03, 
    0x05, 0x07, 0x01, 0x04, 0x01, 0x04, 0x06, 0x03, 0x06, 0x06, 
    0x07, 0x06, 0x06, 0x06, 0x06, 0x06, 0x01, 0x01, 0x06, 0x06, 
    0x06, 0x06, 0x0D, 0x09, 0x07, 0x08, 0x08, 0x07, 0x07, 0x09, 
    0x07, 0x01, 0x05, 0x08, 0x07, 0x09, 0x07, 0x09, 0x07, 0x09, 
    0x08, 0x07, 0x07, 0x07, 0x09, 0x0D, 0x08, 0x09, 0x08, 0x02, 
    0x04, 0x02, 0x05, 0x08, 0x02, 0x06, 0x06, 0x05, 0x06, 0x06, 
    0x04, 0x06, 0x06, 0x01, 0x02, 0x06, 0x01, 0x09, 0x06, 0x06, 
    0x06, 0x06, 0x04, 0x05, 0x04, 0x06, 0x07, 0x09, 0x06, 0x07, 
    0x06, 0x03, 0x01, 0x03, 0x07, 0x07, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, // <space> 0x20
    0xFE, 0x14, // 33
    0x1E, 0x00, 0x1E, 0x00, 0x00, 0x00, // 34
    0x90, 0x90, 0xF8, 0x96, 0x90, 0xF8, 0x96, 0x90, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, // 35
    0x18, 0x24, 0x22, 0xFF, 0x42, 0x42, 0x84, 0x08, 0x10, 0x10, 0x3C, 0x10, 0x08, 0x04, // 36
    0x1C, 0x22, 0x22, 0x1C, 0xC0, 0x30, 0x8C, 0x42, 0x40, 0x80, 0x00, 0x00, 0x10, 0x0C, 0x00, 0x00, 0x0C, 0x10, 0x10, 0x0C, // 37
    0x80, 0x5C, 0x22, 0x62, 0x92, 0x0C, 0x80, 0x00, 0x0C, 0x10, 0x10, 0x10, 0x10, 0x0C, 0x08, 0x10, // 38
    0x1E, 0x00, // 39
    0xF0, 0x0C, 0x02, 0x1C, 0x60, 0x80, // 40
    0x02, 0x0C, 0xF0, 0x80, 0x60, 0x1C, // 41
    0x04, 0x14, 0x0E, 0x14, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, // 42
    0x40, 0x40, 0x40, 0xF8, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, // 43
    0x00, 0x70, // 44
    0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, // 45
    0x00, 0x10, // 46
    0x00, 0xC0, 0x38, 0x06, 0x18, 0x04, 0x00, 0x00, // 47
    0xFC, 0x02, 0x02, 0x02, 0x02, 0xFC, 0x0C, 0x10, 0x10, 0x10, 0x10, 0x0C, // 48
    0x08, 0x04, 0xFE, 0x00, 0x00, 0x1C, // 49
    0x0C, 0x02, 0x02, 0x82, 0x42, 0x3C, 0x10, 0x18, 0x14, 0x10, 0x10, 0x10, // 50
    0x0C, 0x02, 0x22, 0x22, 0x22, 0xDC, 0x0C, 0x10, 0x10, 0x10, 0x10, 0x0C, // 51
    0x80, 0x40, 0x30, 0x08, 0x04, 0xFE, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1C, 0x04, // 52
    0x38, 0x16, 0x12, 0x12, 0x12, 0xE2, 0x0C, 0x10, 0x10, 0x10, 0x18, 0x04, // 53
    0xF8, 0x44, 0x22, 0x22, 0x22, 0xC4, 0x0C, 0x10, 0x10, 0x10, 0x10, 0x0C, // 54
    0x02, 0x02, 0x02, 0xE2, 0x1A, 0x06, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, // 55
    0xDC, 0x22, 0x22, 0x22, 0x22, 0xDC, 0x0C, 0x10, 0x10, 0x10, 0x10, 0x0C, // 56
    0x3C, 0x42, 0x42, 0x42, 0x22, 0xFC, 0x08, 0x10, 0x10, 0x10, 0x08, 0x04, // 57
    0x08, 0x10, // 58
    0x08, 0x70, // 59
    0x40, 0xA0, 0xA0, 0x10, 0x10, 0x08, 0x00, 0x00, 0x00, 0x04, 0x04, 0x08, // 60
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 61
    0x08, 0x10, 0x10, 0xA0, 0xA0, 0x40, 0x08, 0x04, 0x04, 0x00, 0x00, 0x00, // 62
    0x0C, 0x02, 0x82, 0x42, 0x22, 0x1C, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, // 63
    0xE0, 0x18, 0x04, 0xC4, 0x22, 0x12, 0x12, 0x12, 0xA2, 0x72, 0x04, 0x08, 0xF0, 0x0C, 0x30, 0x40, 0x4C, 0x90, 0x90, 0x90, 0x88, 0x9C, 0x90, 0x50, 0x4C, 0x20, // 64
    0x00, 0x80, 0xE0, 0x9C, 0x82, 0x9C, 0xE0, 0x80, 0x00, 0x18, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x18, // 65
    0xFE, 0x22, 0x22, 0x22, 0x22, 0x22, 0xDC, 0x1C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0C, // 66
    0xF8, 0x04, 0x02, 0x02, 0x02, 0x02, 0x04, 0x08, 0x04, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, 0x04, // 67
    0xFE, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF8, 0x1C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x04, // 68
    0xFE, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, // 69
    0xFE, 0x22, 0x22, 0x22, 0x22, 0x22, 0x02, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 70
    0xF8, 0x04, 0x02, 0x02, 0x02, 0x42, 0x42, 0x44, 0xC8, 0x04, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x04, // 71
    0xFE, 0x20, 0x20, 0x20, 0x20, 0x20, 0xFE, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, // 72
    0xFE, 0x1C, // 73
    0x00, 0x00, 0x00, 0x00, 0xFE, 0x0C, 0x10, 0x10, 0x10, 0x0C, // 74
    0xFE, 0x80, 0x40, 0x20, 0x50, 0x88, 0x04, 0x02, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0x10, // 75
    0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, // 76
    0xFE, 0x0C, 0x30, 0xC0, 0x00, 0xC0, 0x30, 0x0C, 0xFE, 0x1C, 0x00, 0x00, 0x04, 0x18, 0x04, 0x00, 0x00, 0x1C, // 77
    0xFE, 0x04, 0x18, 0x60, 0x80, 0x00, 0xFE, 0x1C, 0x00, 0x00, 0x00, 0x04, 0x08, 0x1C, // 78
    0xF8, 0x04, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF8, 0x04, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x04, // 79
    0xFE, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 80
    0xF8, 0x04, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF8, 0x04, 0x08, 0x10, 0x10, 0x10, 0x14, 0x08, 0x1C, 0x10, // 81
    0xFE, 0x42, 0x42, 0x42, 0xC2, 0x42, 0x42, 0x3C, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0x10, // 82
    0x1C, 0x22, 0x22, 0x22, 0x42, 0x42, 0x8C, 0x0C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0C, // 83
    0x02, 0x02, 0x02, 0xFE, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, // 84
    0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x04, 0x08, 0x10, 0x10, 0x10, 0x08, 0x04, // 85
    0x06, 0x18, 0x60, 0x80, 0x00, 0x80, 0x60, 0x18, 0x06, 0x00, 0x00, 0x00, 0x04, 0x18, 0x04, 0x00, 0x00, 0x00, // 86
    0x06, 0x38, 0xC0, 0x00, 0xC0, 0x3C, 0x02, 0x3C, 0xC0, 0x00, 0xC0, 0x38, 0x06, 0x00, 0x00, 0x04, 0x18, 0x04, 0x00, 0x00, 0x00, 0x04, 0x18, 0x04, 0x00, 0x00, // 87
    0x02, 0x0C, 0x90, 0x60, 0x60, 0x90, 0x0C, 0x02, 0x10, 0x0C, 0x00, 0x00, 0x00, 0x04, 0x0C, 0x10, // 88
    0x02, 0x04, 0x18, 0x20, 0xC0, 0x20, 0x18, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, // 89
    0x00, 0x02, 0x82, 0x42, 0x22, 0x1A, 0x06, 0x02, 0x10, 0x18, 0x14, 0x10, 0x10, 0x10, 0x10, 0x10, // 90
    0xFE, 0x02, 0xFC, 0x80, // 91
    0x06, 0x38, 0xC0, 0x00, 0x00, 0x00, 0x04, 0x18, // 92
    0x02, 0xFE, 0x80, 0xFC, // 93
    0x20, 0x1C, 0x02, 0x1C, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, // 95
    0x02, 0x04, 0x00, 0x00, // 96
    0x10, 0x88, 0x48, 0x48, 0x48, 0xF0, 0x0C, 0x10, 0x10, 0x10, 0x08, 0x1C, // 97
    0xFE, 0x10, 0x08, 0x08, 0x08, 0xF0, 0x1C, 0x08, 0x10, 0x10, 0x10, 0x0C, // 98
    0xF0, 0x08, 0x08, 0x08, 0x10, 0x0C, 0x10, 0x10, 0x10, 0x08, // 99
    0xF0, 0x08, 0x08, 0x08, 0x10, 0xFE, 0x0C, 0x10, 0x10, 0x10, 0x08, 0x1C, // 100
    0xF0, 0x48, 0x48, 0x48, 0x48, 0x70, 0x0C, 0x10, 0x10, 0x10, 0x10, 0x08, // 101
    0x08, 0xFC, 0x0A, 0x0A, 0x00, 0x1C, 0x00, 0x00, // 102
    0xF0, 0x08, 0x08, 0x08, 0x10, 0xF8, 0x4C, 0x90, 0x90, 0x90, 0x88, 0x7C, // 103
    0xFE, 0x10, 0x08, 0x08, 0x08, 0xF0, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x1C, // 104
    0xFA, 0x1C, // 105
    0x00, 0xFA, 0x80, 0x7C, // 106
    0xFE, 0x80, 0x40, 0xA0, 0x10, 0x08, 0x1C, 0x00, 0x00, 0x00, 0x0C, 0x10, // 107
    0xFE, 0x1C, // 108
    0xF8, 0x10, 0x08, 0x08, 0xF0, 0x10, 0x08, 0x08, 0xF0, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, // 109
    0xF8, 0x10, 0x08, 0x08, 0x08, 0xF0, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x1C, // 110
    0xF0, 0x08, 0x08, 0x08, 0x08, 0xF0, 0x0C, 0x10, 0x10, 0x10, 0x10, 0x0C, // 111
    0xF8, 0x10, 0x08, 0x08, 0x08, 0xF0, 0xFC, 0x08, 0x10, 0x10, 0x10, 0x0C, // 112
    0xF0, 0x08, 0x08, 0x08, 0x10, 0xF8, 0x0C, 0x10, 0x10, 0x10, 0x08, 0xFC, // 113
    0xF8, 0x10, 0x08, 0x08, 0x1C, 0x00, 0x00, 0x00, // 114
    0x30, 0x48, 0x48, 0x48, 0x90, 0x08, 0x10, 0x10, 0x10, 0x0C, // 115
    0x08, 0xFE, 0x08, 0x08, 0x00, 0x1C, 0x10, 0x10, // 116
    0xF8, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x0C, 0x10, 0x10, 0x10, 0x08, 0x1C, // 117
    0x18, 0x60, 0x80, 0x00, 0x80, 0x60, 0x18, 0x00, 0x00, 0x04, 0x18, 0x04, 0x00, 0x00, // 118
    0x18, 0xE0, 0x00, 0xE0, 0x18, 0xE0, 0x00, 0xE0, 0x18, 0x00, 0x04, 0x18, 0x04, 0x00, 0x04, 0x18, 0x04, 0x00, // 119
    0x08, 0x30, 0xC0, 0xC0, 0x30, 0x08, 0x10, 0x0C, 0x00, 0x00, 0x0C, 0x10, // 120
    0x18, 0x60, 0x80, 0x00, 0x80, 0x60, 0x18, 0x00, 0x80, 0x8C, 0x70, 0x0C, 0x00, 0x00, // 121
    0x08, 0x08, 0x88, 0x68, 0x18, 0x08, 0x10, 0x18, 0x14, 0x10, 0x10, 0x10, // 122
    0x80, 0x7C, 0x02, 0x00, 0x7C, 0x80, // 123
    0xFE, 0xFC, // 124
    0x02, 0x7C, 0x80, 0x80, 0x7C, 0x00, // 125
    0x40, 0x20, 0x20, 0x60, 0x40, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 126
    0xFC, 0x04, 0x04, 0x04, 0x04, 0x04, 0xFC, 0x1C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1C // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Arial_bold_14.h ===

/*
 *
 * Arial Bold 14
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : arial_bold_14
 * Date                : 29.01.2005
 * Font size in bytes  : 8712
 * Font width          : 10
 * Font height         : 14
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef ARIAL_BOLD_14_H
#define ARIAL_BOLD_14_H

#define ARIAL_BOLD_14_WIDTH 13
#define ARIAL_BOLD_14_HEIGHT 14

GLCDFONTDECL(Arial_bold_14) = {
    0x22, 0x08, // size
    0x0D, // width
    0x0E, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x04, 0x02, 0x05, 0x06, 0x07, 0x08, 0x09, 0x02, 0x03, 0x03, 
    0x05, 0x08, 0x02, 0x04, 0x02, 0x04, 0x07, 0x04, 0x07, 0x07, 
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x02, 0x02, 0x07, 0x07, 
    0x07, 0x08, 0x0E, 0x09, 0x08, 0x08, 0x08, 0x07, 0x07, 0x09, 
    0x08, 0x02, 0x07, 0x08, 0x07, 0x0B, 0x08, 0x09, 0x07, 0x09, 
    0x09, 0x07, 0x08, 0x08, 0x09, 0x0D, 0x07, 0x08, 0x08, 0x04, 
    0x04, 0x04, 0x06, 0x08, 0x03, 0x07, 0x07, 0x06, 0x07, 0x07, 
    0x05, 0x07, 0x07, 0x02, 0x03, 0x06, 0x02, 0x0A, 0x07, 0x07, 
    0x07, 0x07, 0x05, 0x06, 0x05, 0x07, 0x07, 0x0B, 0x06, 0x07, 
    0x05, 0x05, 0x01, 0x05, 0x07, 0x08, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 32
    0xFE, 0xFE, 0x18, 0x18, // 33
    0x1E, 0x1E, 0x00, 0x1E, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, // 34
    0x90, 0xF8, 0x9E, 0x90, 0xF8, 0x9E, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, // 35
    0x18, 0x3C, 0x26, 0xFF, 0x66, 0xCC, 0x88, 0x04, 0x0C, 0x18, 0x3C, 0x18, 0x0C, 0x04, // 36
    0x1C, 0x22, 0x1C, 0xC0, 0x30, 0x8E, 0x40, 0x80, 0x00, 0x00, 0x18, 0x04, 0x00, 0x0C, 0x10, 0x0C, // 37
    0x80, 0xCC, 0x7E, 0x72, 0xF2, 0xDE, 0x0C, 0x80, 0x00, 0x0C, 0x1C, 0x10, 0x10, 0x10, 0x1C, 0x0C, 0x1C, 0x10, // 38
    0x1E, 0x1E, 0x00, 0x00, // 39
    0xF0, 0xFC, 0x06, 0x1C, 0x7C, 0xC0, // 40
    0x06, 0xFC, 0xF0, 0xC0, 0x7C, 0x1C, // 41
    0x14, 0x14, 0x0E, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, // 42
    0x60, 0x60, 0x60, 0xFC, 0xFC, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x00, // 43
    0x00, 0x00, 0x58, 0x38, // 44
    0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, // 45
    0x00, 0x00, 0x18, 0x18, // 46
    0x00, 0xC0, 0x38, 0x06, 0x18, 0x04, 0x00, 0x00, // 47
    0xF8, 0xFC, 0x0E, 0x06, 0x0E, 0xFC, 0xF8, 0x04, 0x0C, 0x1C, 0x18, 0x1C, 0x0C, 0x04, // 48
    0x18, 0x0C, 0xFE, 0xFE, 0x00, 0x00, 0x1C, 0x1C, // 49
    0x18, 0x1C, 0x86, 0xC6, 0x66, 0x3E, 0x1C, 0x18, 0x1C, 0x1C, 0x18, 0x18, 0x18, 0x18, // 50
    0x88, 0x8C, 0x06, 0x26, 0x26, 0xFE, 0xDC, 0x04, 0x0C, 0x1C, 0x18, 0x18, 0x0C, 0x04, // 51
    0xC0, 0xE0, 0xB8, 0x8C, 0xFE, 0xFE, 0x80, 0x04, 0x04, 0x04, 0x04, 0x1C, 0x1C, 0x04, // 52
    0x70, 0x7E, 0x3E, 0x36, 0x36, 0xF6, 0xC6, 0x0C, 0x1C, 0x18, 0x18, 0x18, 0x0C, 0x04, // 53
    0xF8, 0xFC, 0x6E, 0x66, 0x66, 0xEE, 0xCC, 0x04, 0x0C, 0x18, 0x18, 0x18, 0x1C, 0x0C, // 54
    0x06, 0x06, 0x06, 0xE6, 0x76, 0x1E, 0x06, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x00, // 55
    0x9C, 0xFE, 0x66, 0x66, 0x66, 0xFE, 0x9C, 0x0C, 0x1C, 0x18, 0x18, 0x18, 0x1C, 0x0C, // 56
    0x3C, 0x7E, 0x66, 0x66, 0x66, 0xFC, 0xF8, 0x0C, 0x1C, 0x18, 0x18, 0x1C, 0x0C, 0x04, // 57
    0x18, 0x18, 0x18, 0x18, // 58
    0x18, 0x18, 0x58, 0x38, // 59
    0x60, 0x60, 0xF0, 0xF0, 0x98, 0x98, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x0C, // 60
    0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 61
    0x0C, 0x98, 0x98, 0xF0, 0xF0, 0x60, 0x60, 0x0C, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, // 62
    0x08, 0x0C, 0x06, 0xC6, 0xE6, 0x76, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, // 63
    0xE0, 0x30, 0x08, 0xC4, 0xF6, 0x3A, 0x1A, 0x1A, 0xF2, 0xFA, 0x7E, 0x04, 0x08, 0xF0, 0x0C, 0x30, 0x60, 0x4C, 0x9C, 0x98, 0x98, 0x8C, 0x9C, 0x9C, 0x90, 0x48, 0x4C, 0x20, // 64
    0x00, 0xC0, 0xF8, 0xBE, 0x86, 0xBE, 0xF8, 0xC0, 0x00, 0x18, 0x1C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1C, 0x18, // 65
    0xFE, 0xFE, 0x66, 0x66, 0x66, 0x66, 0xFE, 0xDC, 0x1C, 0x1C, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x0C, // 66
    0xF8, 0xFC, 0x0E, 0x06, 0x06, 0x0E, 0x9C, 0x08, 0x04, 0x0C, 0x1C, 0x18, 0x18, 0x1C, 0x0C, 0x04, // 67
    0xFE, 0xFE, 0x06, 0x06, 0x06, 0x0E, 0xFC, 0xF8, 0x1C, 0x1C, 0x18, 0x18, 0x18, 0x1C, 0x0C, 0x04, // 68
    0xFE, 0xFE, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1C, 0x1C, 0x18, 0x18, 0x18, 0x18, 0x18, // 69
    0xFE, 0xFE, 0x66, 0x66, 0x66, 0x66, 0x06, 0x1C, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, // 70
    0xF8, 0xFC, 0x0E, 0x06, 0x06, 0xC6, 0xCE, 0xDC, 0xC8, 0x04, 0x0C, 0x1C, 0x18, 0x18, 0x18, 0x18, 0x0C, 0x04, // 71
    0xFE, 0xFE, 0x60, 0x60, 0x60, 0x60, 0xFE, 0xFE, 0x1C, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x1C, // 72
    0xFE, 0xFE, 0x1C, 0x1C, // 73
    0x80, 0x80, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x0C, 0x1C, 0x18, 0x18, 0x18, 0x1C, 0x0C, // 74
    0xFE, 0xFE, 0x60, 0x30, 0x78, 0xEC, 0x86, 0x02, 0x1C, 0x1C, 0x00, 0x00, 0x00, 0x04, 0x1C, 0x18, // 75
    0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x1C, 0x18, 0x18, 0x18, 0x18, 0x18, // 76
    0xFE, 0xFE, 0x0E, 0x7C, 0xE0, 0x00, 0xE0, 0x7C, 0x0E, 0xFE, 0xFE, 0x1C, 0x1C, 0x00, 0x00, 0x0C, 0x1C, 0x0C, 0x00, 0x00, 0x1C, 0x1C, // 77
    0xFE, 0xFE, 0x1C, 0x78, 0xE0, 0x80, 0xFE, 0xFE, 0x1C, 0x1C, 0x00, 0x00, 0x04, 0x0C, 0x1C, 0x1C, // 78
    0xF8, 0xFC, 0x0E, 0x06, 0x06, 0x06, 0x0E, 0xFC, 0xF8, 0x04, 0x0C, 0x1C, 0x18, 0x18, 0x18, 0x1C, 0x0C, 0x04, // 79
    0xFE, 0xFE, 0x66, 0x66, 0x66, 0x7E, 0x3C, 0x1C, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, // 80
    0xF8, 0xFC, 0x0E, 0x06, 0x86, 0x06, 0x0E, 0xFC, 0xF8, 0x04, 0x0C, 0x1C, 0x18, 0x18, 0x1C, 0x0C, 0x1C, 0x24, // 81
    0xFE, 0xFE, 0x66, 0x66, 0xE6, 0xE6, 0xBE, 0x1C, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x00, 0x0C, 0x1C, 0x18, 0x10, // 82
    0x3C, 0x7E, 0x66, 0x66, 0x66, 0xEE, 0xCC, 0x0C, 0x1C, 0x18, 0x18, 0x18, 0x1C, 0x0C, // 83
    0x06, 0x06, 0x06, 0xFE, 0xFE, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x00, // 84
    0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x04, 0x0C, 0x1C, 0x18, 0x18, 0x1C, 0x0C, 0x04, // 85
    0x02, 0x1E, 0xFC, 0xE0, 0x00, 0xE0, 0xFC, 0x1E, 0x02, 0x00, 0x00, 0x00, 0x1C, 0x1C, 0x1C, 0x00, 0x00, 0x00, // 86
    0x06, 0xFE, 0xF8, 0x00, 0xF0, 0xFE, 0x0E, 0xFE, 0xF0, 0x00, 0xF8, 0xFE, 0x06, 0x00, 0x00, 0x1C, 0x1C, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x1C, 0x1C, 0x00, 0x00, // 87
    0x06, 0x0E, 0xF8, 0xF0, 0xF8, 0x0E, 0x06, 0x18, 0x1C, 0x04, 0x00, 0x04, 0x1C, 0x18, // 88
    0x06, 0x0E, 0x38, 0xF0, 0xF0, 0x38, 0x0E, 0x06, 0x00, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x00, // 89
    0x06, 0x06, 0x86, 0xE6, 0x76, 0x1E, 0x0E, 0x06, 0x18, 0x1C, 0x1C, 0x18, 0x18, 0x18, 0x18, 0x18, // 90
    0xFE, 0xFE, 0x06, 0x06, 0xFC, 0xFC, 0xC0, 0xC0, // 91
    0x06, 0x38, 0xC0, 0x00, 0x00, 0x00, 0x04, 0x18, // 92
    0x06, 0x06, 0xFE, 0xFE, 0xC0, 0xC0, 0xFC, 0xFC, // 93
    0x20, 0x38, 0x0E, 0x0E, 0x38, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, // 95
    0x02, 0x06, 0x04, 0x00, 0x00, 0x00, // 96
    0x10, 0x98, 0xD8, 0x58, 0xF8, 0xF0, 0x00, 0x0C, 0x1C, 0x18, 0x18, 0x0C, 0x1C, 0x10, // 97
    0xFE, 0xFE, 0x30, 0x18, 0x38, 0xF0, 0xE0, 0x1C, 0x1C, 0x0C, 0x18, 0x1C, 0x0C, 0x04, // 98
    0xE0, 0xF0, 0x18, 0x18, 0x38, 0x30, 0x04, 0x0C, 0x18, 0x18, 0x1C, 0x0C, // 99
    0xE0, 0xF0, 0x38, 0x18, 0x30, 0xFE, 0xFE, 0x04, 0x0C, 0x1C, 0x18, 0x0C, 0x1C, 0x1C, // 100
    0xE0, 0xF0, 0xD8, 0xD8, 0xD8, 0xF0, 0xE0, 0x04, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x08, // 101
    0x18, 0xFC, 0xFE, 0x1A, 0x1A, 0x00, 0x1C, 0x1C, 0x00, 0x00, // 102
    0xE0, 0xF0, 0x38, 0x18, 0x30, 0xF8, 0xF8, 0x64, 0xEC, 0xDC, 0xD8, 0xCC, 0xFC, 0x7C, // 103
    0xFE, 0xFE, 0x30, 0x18, 0x18, 0xF8, 0xF0, 0x1C, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x1C, // 104
    0xFA, 0xFA, 0x1C, 0x1C, // 105
    0x00, 0xFA, 0xFA, 0xC0, 0xFC, 0x7C, // 106
    0xFE, 0xFE, 0xE0, 0xF0, 0x98, 0x08, 0x1C, 0x1C, 0x00, 0x04, 0x1C, 0x18, // 107
    0xFE, 0xFE, 0x1C, 0x1C, // 108
    0xF8, 0xF8, 0x10, 0x18, 0xF8, 0xF0, 0x18, 0x18, 0xF8, 0xF0, 0x1C, 0x1C, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x1C, 0x1C, // 109
    0xF8, 0xF8, 0x30, 0x18, 0x18, 0xF8, 0xF0, 0x1C, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x1C, // 110
    0xE0, 0xF0, 0x38, 0x18, 0x38, 0xF0, 0xE0, 0x04, 0x0C, 0x1C, 0x18, 0x1C, 0x0C, 0x04, // 111
    0xF8, 0xF8, 0x30, 0x18, 0x38, 0xF0, 0xE0, 0xFC, 0xFC, 0x0C, 0x18, 0x1C, 0x0C, 0x04, // 112
    0xE0, 0xF0, 0x38, 0x18, 0x30, 0xF8, 0xF8, 0x04, 0x0C, 0x1C, 0x18, 0x0C, 0xFC, 0xFC, // 113
    0xF8, 0xF8, 0x30, 0x18, 0x18, 0x1C, 0x1C, 0x00, 0x00, 0x00, // 114
    0x70, 0xF8, 0xD8, 0xD8, 0xD8, 0x90, 0x08, 0x18, 0x18, 0x18, 0x1C, 0x0C, // 115
    0x18, 0xFC, 0xFE, 0x18, 0x18, 0x00, 0x0C, 0x1C, 0x18, 0x18, // 116
    0xF8, 0xF8, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0x0C, 0x1C, 0x18, 0x18, 0x0C, 0x1C, 0x1C, // 117
    0x38, 0xF8, 0xC0, 0x00, 0xC0, 0xF8, 0x38, 0x00, 0x00, 0x1C, 0x1C, 0x1C, 0x00, 0x00, // 118
    0x18, 0xF8, 0xE0, 0x00, 0xF0, 0x38, 0xF0, 0x00, 0xE0, 0xF8, 0x18, 0x00, 0x00, 0x1C, 0x1C, 0x0C, 0x00, 0x0C, 0x1C, 0x1C, 0x00, 0x00, // 119
    0x18, 0x38, 0xE0, 0xE0, 0x38, 0x18, 0x18, 0x1C, 0x04, 0x04, 0x1C, 0x18, // 120
    0x18, 0xF8, 0xE0, 0x00, 0xE0, 0xF8, 0x18, 0x00, 0x84, 0xFC, 0xF8, 0x3C, 0x04, 0x00, // 121
    0x18, 0x98, 0xD8, 0x78, 0x38, 0x1C, 0x1C, 0x18, 0x18, 0x18, // 122
    0x80, 0xFC, 0x7E, 0x06, 0x06, 0x00, 0x7C, 0xFC, 0xC0, 0xC0, // 123
    0xFE, 0xFC, // 124
    0x06, 0x06, 0x7E, 0xFC, 0x80, 0xC0, 0xC0, 0xFC, 0x7C, 0x00, // 125
    0x60, 0x30, 0x30, 0x70, 0x60, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 126
    0xFE, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFE, 0x1C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1C // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Battery10x17.h ===



/*
 *
 * Battery10x17
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : Battery10x17.h
 * Date                : 23.09.2020
 * Font size in bytes  : 1032
 * Font width          : 17
 * Font height         : 10
 * Font first char     : 48
 * Font last char      : 54
 * Font used chars     : 6
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>
#include <avr/pgmspace.h>

#ifndef BATTERY10X17_H
#define BATTERY10X17_H

#define BATTERY10X17_WIDTH 17
#define BATTERY10X17_HEIGHT 10

static const uint8_t Battery10x17[] PROGMEM = {
    0x04, 0x08, // size
    0x11, // width
    0xA, // height
    0x30, // first char
    0x06, // char count
    
    // char widths
    0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 
    
    // font data
    0xFC, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0x70, 0x40, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x40, 0x00, // 48
    0xFC, 0x02, 0x02, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0x70, 0x40, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x40, 0x00, // 49
    0xFC, 0x02, 0x02, 0xFE, 0x02, 0x02, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0x70, 0x40, 0x80, 0x80, 0xC0, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x40, 0x00, // 50
    0xFC, 0x02, 0x02, 0xFE, 0x02, 0x02, 0xFE, 0x02, 0x02, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0x70, 0x40, 0x80, 0x80, 0xC0, 0x80, 0x80, 0xC0, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x40, 0x00, // 51
    0xFC, 0x02, 0x02, 0xFE, 0x02, 0x02, 0xFE, 0x02, 0x02, 0xFE, 0x02, 0x02, 0xFE, 0xFE, 0xFE, 0xFC, 0x70, 0x40, 0x80, 0x80, 0xC0, 0x80, 0x80, 0xC0, 0x80, 0x80, 0xC0, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0x40, 0x00, // 52
    0xFC, 0x02, 0x02, 0xFE, 0x02, 0x02, 0xFE, 0x02, 0x02, 0xFE, 0x02, 0x02, 0xFE, 0x02, 0x02, 0xFC, 0x70, 0x40, 0x80, 0x80, 0xC0, 0x80, 0x80, 0xC0, 0x80, 0x80, 0xC0, 0x80, 0x80, 0xC0, 0x80, 0x80, 0x40, 0x00 // 53
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Battery12x22.h ===



/*
 *
 * Battery12x22
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : Battery12x22.h
 * Date                : 17.10.2020
 * Font size in bytes  : 1596
 * Font width          : 22
 * Font height         : 12
 * Font first char     : 48
 * Font last char      : 54
 * Font used chars     : 6
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>
#include <avr/pgmspace.h>

#ifndef BATTERY12X22_H
#define BATTERY12X22_H

#define BATTERY12X22_WIDTH 22
#define BATTERY12X22_HEIGHT 12

static const uint8_t Battery12x22[] PROGMEM = {
    0x06, 0x3C, // size
    0x16, // width
    0x0C, // height
    0x30, // first char
    0x06, // char count
    
    // char widths
    0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 
    
    // font data
    0xF8, 0x04, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF8, 0xF0, 0x00, 0x30, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x30, 0x10, 0x00, // 48
    0xF8, 0x04, 0x02, 0xFA, 0xFA, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF8, 0xF0, 0x00, 0x30, 0x40, 0x80, 0xB0, 0xB0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x30, 0x10, 0x00, // 49
    0xF8, 0x04, 0x02, 0xFA, 0xFA, 0x02, 0xFA, 0xFA, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF8, 0xF0, 0x00, 0x30, 0x40, 0x80, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x30, 0x10, 0x00, // 50
    0xF8, 0x04, 0x02, 0xFA, 0xFA, 0x02, 0xFA, 0xFA, 0x02, 0xFA, 0xFA, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF8, 0xF0, 0x00, 0x30, 0x40, 0x80, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x30, 0x10, 0x00, // 51
    0xF8, 0x04, 0x02, 0xFA, 0xFA, 0x02, 0xFA, 0xFA, 0x02, 0xFA, 0xFA, 0x02, 0xFA, 0xFA, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF8, 0xF0, 0x00, 0x30, 0x40, 0x80, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0x80, 0x80, 0x80, 0x80, 0x40, 0x30, 0x10, 0x00, // 52
    0xF8, 0x04, 0x02, 0xFA, 0xFA, 0x02, 0xFA, 0xFA, 0x02, 0xFA, 0xFA, 0x02, 0xFA, 0xFA, 0x02, 0xFA, 0xFA, 0x02, 0x04, 0xF8, 0xF0, 0x00, 0x30, 0x40, 0x80, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0x80, 0x40, 0x30, 0x10, 0x00 // 53
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Battery19x9.h ===



/*
 *
 * Battery
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : Battery19x9.h
 * Date                : 18.06.2020
 * Font size in bytes  : 1038
 * Font width          : 19
 * Font height         : -9
 * Font first char     : 48
 * Font last char      : 54
 * Font used chars     : 6
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>
#include <avr/pgmspace.h>

#ifndef Battery19x9_H
#define Battery19x9_H

#define Battery19x9_WIDTH 19
#define Battery19x9_HEIGHT 9

static const uint8_t Battery19x9[] PROGMEM = {
    0x04, 0x0E, // size
    0x13, // width
    0x09, // height
    0x30, // first char
    0x06, // char count
    
    // char widths
    0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 
    
    // font data
    0xFE, 0x83, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x83, 0xFE, 0x7C, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, // 48
    0xFE, 0x83, 0x7D, 0x7D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x83, 0xFE, 0x7C, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, // 49
    0xFE, 0x83, 0x7D, 0x7D, 0x01, 0x7D, 0x7D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x83, 0xFE, 0x7C, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, // 50
    0xFE, 0x83, 0x7D, 0x7D, 0x01, 0x7D, 0x7D, 0x01, 0x7D, 0x7D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x83, 0xFE, 0x7C, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, // 51
    0xFE, 0x83, 0x7D, 0x7D, 0x01, 0x7D, 0x7D, 0x01, 0x7D, 0x7D, 0x01, 0x7D, 0x7D, 0x01, 0x01, 0x01, 0x83, 0xFE, 0x7C, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, // 52
    0xFE, 0x83, 0x7D, 0x7D, 0x01, 0x7D, 0x7D, 0x01, 0x7D, 0x7D, 0x01, 0x7D, 0x7D, 0x01, 0x7D, 0x7D, 0x83, 0xFE, 0x7C, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00 // 53
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Battery219x9.h ===



/*
 *
 * Battery
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : Battery219x9.h
 * Date                : 18.06.2020
 * Font size in bytes  : 1038
 * Font width          : 19
 * Font height         : -9
 * Font first char     : 48
 * Font last char      : 54
 * Font used chars     : 6
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>
#include <avr/pgmspace.h>

#ifndef Battery219x9_H
#define Battery219x9_H

#define Battery219x9_WIDTH 19
#define Battery219x9_HEIGHT -9

static const uint8_t Battery219x9[] PROGMEM = {
    0x04, 0x0E, // size
    0x13, // width
    0x09, // height
    0x30, // first char
    0x06, // char count
    
    // char widths
    0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 
    
    // font data
    0xFE, 0x83, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x83, 0xFE, 0x7C, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, // 48
    0xFE, 0x83, 0x39, 0x7D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x83, 0xFE, 0x7C, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, // 49
    0xFE, 0x83, 0x39, 0x7D, 0x7D, 0x7D, 0x7D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x83, 0xFE, 0x7C, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, // 50
    0xFE, 0x83, 0x39, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x83, 0xFE, 0x7C, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, // 51
    0xFE, 0x83, 0x39, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x01, 0x01, 0x01, 0x83, 0xFE, 0x7C, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, // 52
    0xFE, 0x83, 0x39, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x39, 0x83, 0xFE, 0x7C, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00 // 53
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Battery22x12.h ===



/*
 *
 * new Font
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : Battery22x12.h
 * Date                : 18.06.2020
 * Font size in bytes  : 2656
 * Font width          : 22
 * Font height         : -12
 * Font first char     : 48
 * Font last char      : 58
 * Font used chars     : 10
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>
#include <avr/pgmspace.h>

#ifndef Battery22x12_H
#define Battery22x12_H

#define Battery22x12_WIDTH 22
#define Battery22x12_HEIGHT 12

static const uint8_t Battery22x12[] PROGMEM = {
    0x0A, 0x60, // size
    0x16, // width
    0x0C, // height
    0x30, // first char
    0x0A, // char count
    
    // char widths
    0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 
    
    
    // font data
    0xFC, 0x06, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0xFC, 0xF0, 0x30, 0x60, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x60, 0x30, 0x00, // 48
    0xFC, 0x06, 0x02, 0xFA, 0xFA, 0xFA, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0xFC, 0xF0, 0x30, 0x60, 0x40, 0x50, 0x50, 0x50, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x60, 0x30, 0x00, // 49
    0xFC, 0x06, 0x02, 0xFA, 0xFA, 0xFA, 0x02, 0xFA, 0xFA, 0xFA, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0xFC, 0xF0, 0x30, 0x60, 0x40, 0x50, 0x50, 0x50, 0x40, 0x50, 0x50, 0x50, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x60, 0x30, 0x00, // 50
    0xFC, 0x06, 0x02, 0xFA, 0xFA, 0xFA, 0x02, 0xFA, 0xFA, 0xFA, 0x02, 0xFA, 0xFA, 0xFA, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0xFC, 0xF0, 0x30, 0x60, 0x40, 0x50, 0x50, 0x50, 0x40, 0x50, 0x50, 0x50, 0x40, 0x50, 0x50, 0x50, 0x40, 0x40, 0x40, 0x40, 0x40, 0x60, 0x30, 0x00, // 51
    0xFC, 0x06, 0x02, 0xFA, 0xFA, 0xFA, 0x02, 0xFA, 0xFA, 0xFA, 0x02, 0xFA, 0xFA, 0xFA, 0x02, 0xFA, 0xFA, 0xFA, 0x02, 0x06, 0xFC, 0xF0, 0x30, 0x60, 0x40, 0x50, 0x50, 0x50, 0x40, 0x50, 0x50, 0x50, 0x40, 0x50, 0x50, 0x50, 0x40, 0x50, 0x50, 0x50, 0x40, 0x60, 0x30, 0x00, // 52
    0xFC, 0x06, 0x02, 0x02, 0x0A, 0x12, 0x22, 0x42, 0x82, 0x02, 0xFA, 0x0A, 0x12, 0x22, 0x42, 0x82, 0x02, 0x02, 0x02, 0x06, 0xFC, 0xF0, 0x30, 0x60, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x50, 0x50, 0x40, 0x40, 0x40, 0x40, 0x40, 0x50, 0x40, 0x40, 0x60, 0x30, 0x00, // 53
    0xFC, 0x06, 0x02, 0x62, 0xF2, 0x62, 0x02, 0x02, 0x62, 0x62, 0x62, 0x62, 0xF2, 0xF2, 0xF2, 0xFA, 0xFA, 0xF2, 0x62, 0x06, 0xFC, 0xF0, 0x30, 0x60, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x50, 0x50, 0x40, 0x40, 0x60, 0x30, 0x00, // 54
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 55
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 56
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // 57
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\BigIcon36x40.h ===



/*
 *
 * BigIcon36x40
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : BIgIcon36x40.h
 * Date                : 29.03.2021
 * Font size in bytes  : 1472
 * Font width          : 36
 * Font height         : 40
 * Font first char     : 32
 * Font last char      : 58
 * Font used chars     : 26
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>
#include <avr/pgmspace.h>

#ifndef BIGICON36X40_H
#define BIGICON36X40_H

#define BIGICON36X40_WIDTH 36
#define BIGICON36X40_HEIGHT 40

static const uint8_t BigIcon36x40[] PROGMEM = {
    0x05, 0xC0, // size
    0x24, // width
    0x28, // height
    0x20, // first char
    0x1A, // char count
    
    // char widths
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x0E, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0x7C, 0x3E, 0x3E, 0x1C, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x1C, 0x3E, 0x3E, 0x7C, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFE, 0xFF, 0xFF, 0xFF, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x38, 0x3F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0xFF, 0xFF, 0xFF, 0xFE, 0xF0, 0x00, 0x00, 0x07, 0x3F, 0xFF, 0xFF, 0xFF, 0xF8, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF8, 0xFF, 0xFF, 0xFF, 0x3F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x3E, 0x7E, 0x7C, 0x7C, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0x7C, 0x7C, 0x7E, 0x3E, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, // 49
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\BigPostfix30x16.h ===



/*
 *
 * BigPostfix30x16
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : BigPostfix30x16.h
 * Date                : 08.11.2020
 * Font size in bytes  : 776
 * Font width          : 30
 * Font height         : 16
 * Font first char     : 37
 * Font last char      : 39
 * Font used chars     : 2
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>
#include <avr/pgmspace.h>

#ifndef BIGPOSTFIX30X16_H
#define BIGPOSTFIX30X16_H

#define BIGPOSTFIX30X16_WIDTH 30
#define BIGPOSTFIX30X16_HEIGHT 16

static const uint8_t BigPostfix30x16[] PROGMEM = {
    0x03, 0x08, // size
    0x1E, // width
    0x10, // height
    0x25, // first char
    0x02, // char count
    
    // char widths
    0x23, 0x0D, 
    
    // font data
    0x00, 0xE0, 0xF8, 0xF8, 0x3C, 0x1C, 0x1C, 0x3C, 0xFC, 0xFC, 0xFC, 0x3C, 0x1C, 0x1C, 0x3C, 0xF8, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x7F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x0F, 0x3F, 0x3F, 0x78, 0x70, 0x70, 0x70, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // 37
    0x00, 0x00, 0xF8, 0xFC, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x0E, 0xFC, 0xF8, 0x00, 0x00, 0x03, 0x07, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x07, 0x03 // 38
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\BigPostfix30x16_2.h ===



/*
 *
 * PostfixFont30x16_2
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : BigPostfix30x16_2.h
 * Date                : 08.11.2020
 * Font size in bytes  : 776
 * Font width          : 30
 * Font height         : 16
 * Font first char     : 37
 * Font last char      : 39
 * Font used chars     : 2
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>
#include <avr/pgmspace.h>

#ifndef BIGPOSTFIX30X16_2_H
#define BIGPOSTFIX30X16_2_H

#define BIGPOSTFIX30X16_2_WIDTH 30
#define BIGPOSTFIX30X16_2_HEIGHT 16

static const uint8_t BigPostfix30x16_2[] PROGMEM = {
    0x03, 0x08, // size
    0x1E, // width
    0x10, // height
    0x25, // first char
    0x02, // char count
    
    // char widths
    0x23, 0x0D, 
    
    // font data
    0x00, 0xF8, 0xF8, 0xE0, 0xF0, 0x70, 0x38, 0x78, 0xF8, 0xF0, 0xE0, 0xF0, 0x70, 0x38, 0x78, 0xF8, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x1F, 0x3F, 0x7F, 0x78, 0x70, 0x70, 0x70, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // 37
    0x00, 0x00, 0xE0, 0xF8, 0x1C, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x1C, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x03, 0x07, 0x06, 0x0C, 0x0C, 0x0C, 0x06, 0x07, 0x03, 0x00 // 38
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\CalBlk36.h ===

/*
 *
 * CalBlk36 Font
 *
 *
 * Copyright (C) 2010 by Integrated Mapping Ltd
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : CalBlk36.h
 * Date                : 19.05.2011
 * Font size in bytes  : 65586
 * Font width          : 10
 * Font height         : 36
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef CalBlk36_H
#define CalBlk32_H

#define CalBlk36_WIDTH 28
#define CalBlk36_HEIGHT 36

GLCDFONTDECL(CalBlk36) = {
    0x00, 0x32, // size
    0x1C, // width
    0x24, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x08, 0x08, 0x10, 0x16, 0x16, 0x20, 0x1B, 0x08, 0x0A, 0x0A, 
    0x0E, 0x13, 0x08, 0x0A, 0x08, 0x0A, 0x15, 0x0F, 0x15, 0x14, 
    0x16, 0x15, 0x15, 0x14, 0x14, 0x15, 0x08, 0x08, 0x14, 0x13, 
    0x14, 0x14, 0x1B, 0x1C, 0x17, 0x18, 0x17, 0x15, 0x13, 0x1A, 
    0x18, 0x08, 0x14, 0x1B, 0x14, 0x1D, 0x18, 0x1A, 0x15, 0x1B, 
    0x19, 0x17, 0x18, 0x18, 0x1C, 0x24, 0x1C, 0x1C, 0x18, 0x0B, 
    0x0A, 0x0B, 0x13, 0x12, 0x08, 0x16, 0x15, 0x15, 0x15, 0x16, 
    0x0E, 0x15, 0x14, 0x08, 0x0A, 0x16, 0x08, 0x20, 0x14, 0x16, 
    0x15, 0x15, 0x0E, 0x14, 0x0E, 0x14, 0x16, 0x22, 0x16, 0x16, 
    0x12, 0x0E, 0x04, 0x0E, 0x14, 0x00, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x20 <space>

    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xC0, 0xC7, 0xCF, 0xCF, 0xCF, 0xCF, 0xC7, 0xC0, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 33
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x01, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x01, 0x00, 0x00, 0x01, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 34
    0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFC, 0xFC, 0xFC, 0xFC, 0x7C, 0x00, 0x00, 0x00, 0xC0, 0xFC, 0xFC, 0xFC, 0xFC, 0x3C, 0x00, 0x00, 0x1F, 0x1F, 0x1F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x1F, 0x1F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x1F, 0x1F, 0x1F, 0x3E, 0x3E, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x3E, 0x3E, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3C, 0x00, 0x08, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x0C, 0x0F, 0x0F, 0x0F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 35
    0x00, 0x80, 0xE0, 0xF0, 0xF0, 0xF8, 0xF8, 0xFC, 0x7C, 0x7C, 0xFF, 0xFF, 0x7C, 0xFC, 0xFC, 0xF8, 0xF8, 0xF8, 0xF0, 0xE0, 0xC0, 0x00, 0x00, 0x0F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF8, 0xFF, 0xFF, 0xF0, 0xF0, 0xF1, 0xE1, 0xE1, 0xC1, 0xC1, 0x81, 0x00, 0x00, 0x30, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE1, 0x81, 0x83, 0xFF, 0xFF, 0x87, 0x87, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3C, 0x00, 0x00, 0x03, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x1F, 0x1F, 0xFF, 0xFF, 0x1F, 0x1F, 0x0F, 0x0F, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 36
    0xC0, 0xF0, 0xF8, 0xFC, 0x7C, 0x1C, 0x1C, 0x1C, 0x7C, 0xFC, 0xF8, 0xF8, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xFC, 0x7C, 0x1C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1F, 0x3F, 0x7F, 0x7C, 0x70, 0x70, 0x70, 0x7C, 0x7F, 0x3F, 0x3F, 0x07, 0x00, 0x80, 0xE0, 0xF8, 0xFE, 0x3F, 0x1F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF8, 0xFE, 0x3F, 0x0F, 0x03, 0x00, 0x00, 0xF0, 0xFE, 0xFE, 0xFF, 0x1F, 0x07, 0x07, 0x07, 0x1F, 0xFF, 0xFE, 0xFC, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x1C, 0x1F, 0x1F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0F, 0x0F, 0x1F, 0x1F, 0x1C, 0x1C, 0x1C, 0x1F, 0x1F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 37
    0x00, 0x00, 0x00, 0x00, 0xE0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0x7C, 0x3C, 0x3C, 0x3C, 0x7C, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC7, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xFC, 0xFE, 0xBF, 0x1F, 0x1F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC7, 0x83, 0x03, 0x03, 0x07, 0x0F, 0x9F, 0xBF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0x80, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x03, 0x03, 0x07, 0x0F, 0x0F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 38
    0x38, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x78, 0x00, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 39
    0x00, 0x00, 0x00, 0xC0, 0xF0, 0xF8, 0xFC, 0xFC, 0x7C, 0x1C, 0xC0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF1, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xF8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x70, 0xF0, 0xF0, 0xF0, 0xE0, // 40
    0x0C, 0x7C, 0xFC, 0xFC, 0xF8, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xC0, 0x00, 0x00, 0x00, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x80, 0xF8, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x07, 0x00, 0xE0, 0xF0, 0xF0, 0xF0, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, // 41
    0x00, 0xE0, 0xE0, 0xE0, 0xC0, 0xDC, 0xFC, 0xFC, 0xDC, 0xC0, 0xE0, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0x19, 0x3D, 0x3F, 0x1F, 0x07, 0x0F, 0x3F, 0x3D, 0x3D, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 42
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 43
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0x0F, 0x8F, 0x8F, 0xEF, 0xFF, 0xFF, 0xFF, 0x1F, 0x30, 0x70, 0x70, 0x30, 0x30, 0x10, 0x00, 0x00, // 44
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 45
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 46
    0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFC, 0xFC, 0xFC, 0x0C, 0x00, 0x00, 0x00, 0xC0, 0xFC, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0xC0, 0xFC, 0xFF, 0xFF, 0x1F, 0x01, 0x00, 0x00, 0x00, 0x0C, 0x0F, 0x0F, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 47
    0x00, 0xC0, 0xF0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0x7C, 0x7C, 0x7C, 0x7C, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0xC0, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x80, 0x80, 0x80, 0x80, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 48
    0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xE0, 0xF0, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x3F, 0x3F, 0x3F, 0x1F, 0x1F, 0x0F, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 49
    0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0x7C, 0x7C, 0x7C, 0x7C, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0xC0, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x80, 0xC0, 0xC0, 0xE0, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x00, 0x80, 0xC0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xCF, 0xC7, 0xC7, 0xC3, 0xC1, 0xC0, 0xC0, 0xC0, 0xC0, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 50
    0x80, 0xE0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0x7C, 0x7C, 0x3C, 0x7C, 0x7C, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xC0, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0xF0, 0xF0, 0xF8, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0x8F, 0x87, 0x00, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0x80, 0x01, 0x01, 0x01, 0x01, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 51
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xFC, 0xFE, 0xFF, 0x7F, 0x1F, 0x0F, 0x07, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7D, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7C, 0x7C, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 52
    0x00, 0x00, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x78, 0x78, 0x78, 0x78, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0xE0, 0xE0, 0x80, 0x00, 0x00, 0xE0, 0xE0, 0xE1, 0xE1, 0xE1, 0xE1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1E, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 53
    0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0x7C, 0x3C, 0x3C, 0x3C, 0x7C, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0xF0, 0x78, 0x78, 0x78, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC1, 0x80, 0x00, 0x00, 0x00, 0x80, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 54
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xF8, 0xFE, 0xFF, 0xFF, 0x7F, 0x1F, 0x0F, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 55
    0x80, 0xE0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0x7C, 0x3C, 0x3C, 0x3C, 0x7C, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0x80, 0x03, 0x0F, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xF0, 0xF0, 0xF0, 0xF0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0x0F, 0x03, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 0x01, 0x00, 0x00, 0x01, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 56
    0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0x7C, 0x3C, 0x3C, 0x7C, 0x7C, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0xC0, 0x00, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xC0, 0x80, 0x80, 0x80, 0xC0, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0xC0, 0xC1, 0xC3, 0xC3, 0xC7, 0xC7, 0xC7, 0x87, 0x07, 0x07, 0x07, 0x83, 0xE1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 57
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 58
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0x0F, 0x8F, 0x8F, 0xEF, 0xFF, 0xFF, 0xFF, 0x1F, 0x10, 0x70, 0x70, 0x30, 0x30, 0x10, 0x00, 0x00, // 59
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF8, 0xF8, 0xF8, 0xFC, 0xFC, 0xFE, 0xFE, 0x3E, 0x3F, 0x3F, 0x1F, 0x1F, 0x1F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x03, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x1F, 0x1F, 0x3F, 0x3F, 0x7E, 0x7E, 0x7E, 0xFC, 0xFC, 0xF8, 0xF8, 0xF8, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 60
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 61
    0xF0, 0xE0, 0xE0, 0xC0, 0xC0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x1F, 0x1F, 0x1F, 0x3F, 0x3F, 0x7E, 0xFE, 0xFE, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xF0, 0xF0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0x7E, 0x7E, 0x3E, 0x3F, 0x3F, 0x1F, 0x1F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 62
    0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0x7C, 0x7C, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF8, 0xF0, 0xE0, 0x80, 0x00, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x81, 0xC0, 0xE0, 0xF0, 0xF8, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x3F, 0x1F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCE, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 63
    0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0x70, 0x78, 0x38, 0x18, 0x1C, 0x9C, 0x9C, 0x8C, 0x0C, 0x1C, 0x1C, 0x1C, 0x1C, 0x38, 0x78, 0x70, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0xE0, 0xFC, 0xFF, 0x0F, 0x03, 0xC0, 0xF0, 0xFC, 0xFE, 0x3F, 0x0F, 0x07, 0x03, 0x03, 0x07, 0xDE, 0xFE, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x01, 0x07, 0xFF, 0xFE, 0xF0, 0x3F, 0xFF, 0xFF, 0xC0, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xC0, 0x80, 0x80, 0x80, 0xC0, 0xF0, 0xFF, 0xFF, 0xFF, 0x87, 0x80, 0xC0, 0xE0, 0xF0, 0x7C, 0x3F, 0x0F, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x1C, 0x38, 0x71, 0x71, 0x63, 0xE3, 0xE3, 0xE3, 0xE1, 0xE0, 0xE1, 0xE3, 0xE3, 0x63, 0x73, 0x71, 0x39, 0x38, 0x1C, 0x0C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 64
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x03, 0x07, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFC, 0xFC, 0xFC, 0xFC, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xE0, 0x00, 0x00, 0x08, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 65
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x7C, 0x7C, 0x7C, 0x7C, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF8, 0xF0, 0xF0, 0xC0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0x9F, 0x07, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 66
    0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x7C, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 67
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 68
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC0, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 69
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 70
    0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0x80, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE0, 0xE1, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE0, 0x0F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xE0, 0xC0, 0xC0, 0x80, 0x80, 0x87, 0x87, 0xC7, 0xC7, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 71
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 72
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 73
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 74
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0x7C, 0x3C, 0x1C, 0x0C, 0x04, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x0F, 0x07, 0x03, 0x07, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 75
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 76
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x03, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 77
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF0, 0xE0, 0x80, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 78
    0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x0F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 79
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x7C, 0x7C, 0x7C, 0x7C, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 80
    0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xE0, 0xC0, 0xC0, 0xCC, 0xDC, 0xFC, 0xFC, 0xF8, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x07, 0x0F, 0x0F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x0F, 0x0F, 0x07, 0x0F, 0x1F, 0x1F, 0x3F, 0x3E, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 81
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x7C, 0x7C, 0x7C, 0x7C, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF8, 0xF0, 0xE0, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x03, 0x03, 0x0F, 0x1F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 82
    0x00, 0xE0, 0xF0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0xC0, 0x00, 0x00, 0x07, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF3, 0xF3, 0xF3, 0xE3, 0xE3, 0xC3, 0x83, 0x00, 0x00, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xE1, 0xC1, 0x81, 0x83, 0x83, 0x83, 0x87, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7E, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 83
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 84
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 85
    0x04, 0x3C, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xF0, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x3C, 0x0C, 0x00, 0x00, 0x01, 0x07, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF0, 0x80, 0x00, 0x00, 0x00, 0xE0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 86
    0x1C, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0x80, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x1C, 0x00, 0x01, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0xF0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x01, 0x00, 0x00, 0x01, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 87
    0x00, 0x04, 0x1C, 0x3C, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF0, 0xE0, 0x80, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x7C, 0x1C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0x1F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x1F, 0x0F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF0, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x08, 0x0C, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 88
    0x04, 0x0C, 0x3C, 0x7C, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x3C, 0x1C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x0F, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 89
    0x00, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xCF, 0xC7, 0xC3, 0xC1, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 90
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, // 91
    0x0C, 0xFC, 0xFC, 0xFC, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFC, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1F, 0xFF, 0xFF, 0xFC, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0F, 0x0F, 0x0F, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 92
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, // 93
    0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0xFC, 0xFF, 0xFF, 0xFF, 0x1F, 0x07, 0x00, 0x01, 0x0F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFC, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 95
    0x04, 0x0C, 0x1C, 0x3C, 0x7C, 0x7C, 0x70, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 96
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x78, 0x78, 0x7C, 0x7C, 0x7E, 0x7E, 0x3E, 0x1E, 0x1E, 0x1E, 0x1E, 0x3E, 0xFE, 0xFE, 0xFC, 0xFC, 0xF8, 0xF0, 0xC0, 0x00, 0xC0, 0xF0, 0xF8, 0xFC, 0xFC, 0xFC, 0xFE, 0xFE, 0x1E, 0x0E, 0x0E, 0x0F, 0x8F, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 97
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x7C, 0x7C, 0x3E, 0x3E, 0x7E, 0xFE, 0xFE, 0xFE, 0xFC, 0xF8, 0xF8, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF1, 0xC0, 0x80, 0x80, 0x80, 0xC0, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 98
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFE, 0x7E, 0x7E, 0x3E, 0x3E, 0x3E, 0x7E, 0xFE, 0xFE, 0xFC, 0xFC, 0xF8, 0xF0, 0xE0, 0x1E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xC0, 0x80, 0x80, 0x00, 0x80, 0x80, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 99
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x80, 0xE0, 0xF8, 0xF8, 0xFC, 0xFE, 0xFE, 0xFE, 0x7E, 0x3E, 0x3E, 0x7C, 0x7C, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xC0, 0x80, 0x80, 0x80, 0xC0, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x03, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 100
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFE, 0x3E, 0x3E, 0x1E, 0x1E, 0x1E, 0x3E, 0xFE, 0xFC, 0xFC, 0xFC, 0xF8, 0xF0, 0xE0, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x8E, 0x8E, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x0F, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 101
    0x00, 0x00, 0x00, 0xE0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0x7C, 0x7C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3C, 0x3C, 0x3C, 0x3C, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 102
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF8, 0xFC, 0xFC, 0xFE, 0xFE, 0xFE, 0x7E, 0x3E, 0x3E, 0x3C, 0x7C, 0xF8, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF1, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE0, 0xE1, 0xE3, 0xE3, 0xE7, 0xE7, 0xE7, 0xC7, 0x87, 0x87, 0x83, 0x83, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x10, 0x30, 0x70, 0x70, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x70, 0x70, 0x30, 0x30, 0x10, 0x00, 0x00, // 103
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x78, 0x7C, 0x7C, 0x7E, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 0xF8, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 104
    0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 105
    0x00, 0x00, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x30, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0x70, 0x30, 0x10, 0x00, // 106
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFE, 0x7E, 0x3E, 0x1E, 0x0E, 0x06, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x1F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 107
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 108
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xF8, 0x78, 0x7C, 0x7E, 0x7E, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 0xF0, 0xF0, 0xF8, 0x7C, 0x7E, 0x7E, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 0xF8, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 109
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xF0, 0x78, 0x7C, 0x7C, 0x7E, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 0xF8, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 110
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFE, 0x7E, 0x3E, 0x3E, 0x3E, 0x3E, 0x7E, 0xFE, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xC0, 0x00, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xC0, 0x80, 0x80, 0x80, 0x80, 0xC0, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 111
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xF8, 0x7C, 0x3C, 0x3E, 0x3E, 0x7E, 0xFE, 0xFE, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF1, 0xC0, 0x80, 0x80, 0x80, 0xC0, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x00, 0x00, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 112
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF0, 0xF8, 0xFC, 0xFC, 0xFE, 0xFE, 0x7E, 0x3E, 0x3E, 0x3C, 0x7C, 0xF8, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF1, 0xC0, 0x80, 0x80, 0x80, 0xC0, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, // 113
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xF8, 0xFC, 0x7E, 0x7E, 0x3E, 0x3E, 0x1E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 114
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF8, 0xFC, 0xFC, 0xFE, 0xFE, 0x9F, 0x9F, 0x1F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3E, 0x3C, 0x3C, 0x38, 0x20, 0x00, 0xC0, 0xC1, 0xC3, 0xC7, 0xCF, 0xCF, 0xCF, 0x8F, 0x1F, 0x1F, 0x1F, 0x1F, 0x3F, 0xFF, 0xFF, 0xFE, 0xFE, 0xFC, 0xF8, 0x60, 0x00, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 115
    0x00, 0x00, 0x00, 0xE0, 0xE0, 0xF0, 0xF0, 0xF8, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7E, 0x7E, 0x7E, 0x7E, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 116
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xC0, 0x80, 0x80, 0xC0, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 117
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x1E, 0x7E, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF8, 0xFE, 0xFE, 0xFE, 0xFE, 0x7E, 0x1E, 0x06, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xF0, 0xFE, 0xFF, 0xFF, 0xFF, 0x3F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 118
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x1E, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xF8, 0x80, 0x00, 0x00, 0x00, 0xE0, 0xFC, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x3E, 0x06, 0x00, 0x00, 0x00, 0x07, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x03, 0x03, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 119
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0E, 0x1E, 0x7E, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xF0, 0xC0, 0xC0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFE, 0xFE, 0x7E, 0x1E, 0x0E, 0x06, 0x00, 0x00, 0x80, 0xC0, 0xF0, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xF0, 0xC0, 0x80, 0x00, 0x00, 0x0C, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 120
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x1E, 0x7E, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xF0, 0x80, 0x00, 0x00, 0x00, 0x80, 0xF8, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x3E, 0x06, 0x00, 0x00, 0x00, 0x01, 0x0F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xE0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x07, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0x80, 0x80, 0xC0, 0xC1, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x70, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x70, 0x70, 0x30, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 121
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0xBE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x7E, 0x3E, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xBF, 0x9F, 0x8F, 0x87, 0x83, 0x81, 0x80, 0x80, 0x80, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 122
    0x00, 0x00, 0x00, 0x00, 0xE0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x78, 0x00, 0x80, 0x80, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x1F, 0x3F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30, 0x70, 0x70, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0x70, // 123
    0xFC, 0xFC, 0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x70, 0x70, 0x70, 0x70, // 124
    0x78, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF3, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x3F, 0x1F, 0xC0, 0xC0, 0xC0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x70, 0xF0, 0xF0, 0xF0, 0x70, 0x70, 0x70, 0x70, 0x30, 0x10, 0x00, 0x00, 0x00, 0x00, // 125
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF0, 0xF0, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xF0, 0xF8, 0x07, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 126
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Callibri10.h ===

/*
 *
 * Callibri10
 *
 * created with GLCDFontCreator
 * original framework by F. Maximilian Thiele
 * Modified By Siddharth Kaul
 *
 *
 * File Name           : Callibri10.h
 * Date                : 10.11.2012
 * Font size in bytes  : 3742
 * Font width          : 10
 * Font height         : 10
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef _Callibri10_H
#define _Callibri10_H

#define Callibri10_WIDTH 10
#define Callibri10_HEIGHT 10

GLCDFONTDECL(Callibri10) = {
    0x0E, 0x9E, // size
    0x0A, // width
    0x0A, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x02, 0x01, 0x02, 0x05, 0x05, 0x07, 0x05, 0x01, 0x02, 0x02, 
    0x03, 0x05, 0x02, 0x02, 0x01, 0x04, 0x05, 0x04, 0x04, 0x04, 
    0x05, 0x04, 0x04, 0x04, 0x04, 0x04, 0x01, 0x02, 0x04, 0x04, 
    0x05, 0x03, 0x07, 0x05, 0x04, 0x05, 0x05, 0x03, 0x03, 0x05, 
    0x05, 0x01, 0x03, 0x04, 0x03, 0x07, 0x05, 0x06, 0x04, 0x07, 
    0x04, 0x04, 0x05, 0x05, 0x06, 0x09, 0x05, 0x05, 0x04, 0x02, 
    0x04, 0x02, 0x03, 0x05, 0x02, 0x04, 0x04, 0x03, 0x04, 0x04, 
    0x03, 0x04, 0x04, 0x01, 0x02, 0x04, 0x01, 0x07, 0x04, 0x05, 
    0x04, 0x04, 0x02, 0x03, 0x03, 0x04, 0x04, 0x06, 0x04, 0x04, 
    0x03, 0x03, 0x01, 0x02, 0x04, 0x04, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, // 0x20 <space>
    0xBE, 0x00, // 33
    0x06, 0x06, 0x00, 0x00, // 34
    0x28, 0x7C, 0x28, 0xFC, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, // 35
    0x88, 0x94, 0x96, 0xA4, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, // 36
    0x1E, 0x92, 0x7E, 0x10, 0xFC, 0x92, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 37
    0xFC, 0x92, 0xAA, 0x44, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, // 38
    0x06, 0x00, // 39
    0xFC, 0x02, 0x40, 0x80, // 40
    0x02, 0xFC, 0x80, 0x40, // 41
    0x0C, 0x1E, 0x0C, 0x00, 0x00, 0x00, // 42
    0x20, 0x20, 0xF8, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // 43
    0x00, 0x80, 0x80, 0x40, // 44
    0x20, 0x20, 0x00, 0x00, // 45
    0x80, 0x00, // 46
    0x80, 0x60, 0x1C, 0x02, 0x40, 0x00, 0x00, 0x00, // 47
    0x78, 0x84, 0x84, 0x84, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, // 48
    0x88, 0x84, 0xFC, 0x80, 0x00, 0x00, 0x00, 0x00, // 49
    0x84, 0xC4, 0xA4, 0x9C, 0x00, 0x00, 0x00, 0x00, // 50
    0x84, 0x94, 0x94, 0x6C, 0x00, 0x00, 0x00, 0x00, // 51
    0x60, 0x50, 0x4C, 0xFC, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, // 52
    0x9C, 0x94, 0x94, 0x64, 0x00, 0x00, 0x00, 0x00, // 53
    0x78, 0x94, 0x94, 0x74, 0x00, 0x00, 0x00, 0x00, // 54
    0x04, 0xC4, 0x34, 0x0C, 0x00, 0x00, 0x00, 0x00, // 55
    0xEC, 0x94, 0xB4, 0xEC, 0x00, 0x00, 0x00, 0x00, // 56
    0xB8, 0xA4, 0xA4, 0x78, 0x00, 0x00, 0x00, 0x00, // 57
    0x88, 0x00, // 58
    0x00, 0x90, 0x80, 0x40, // 59
    0x10, 0x28, 0x28, 0x44, 0x00, 0x00, 0x00, 0x00, // 60
    0x50, 0x50, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, // 61
    0x88, 0x88, 0x50, 0x50, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // 62
    0x02, 0x92, 0x1E, 0x00, 0x00, 0x00, // 63
    0xF0, 0x08, 0x74, 0x54, 0x74, 0x44, 0x38, 0x00, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, // 64
    0x80, 0x70, 0x4C, 0x5C, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, // 65
    0xFC, 0x94, 0x94, 0x6C, 0x00, 0x00, 0x00, 0x00, // 66
    0x78, 0xCC, 0x84, 0x84, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, // 67
    0xFC, 0x84, 0x84, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, // 68
    0xFC, 0x94, 0x94, 0x00, 0x00, 0x00, // 69
    0xFC, 0x14, 0x14, 0x00, 0x00, 0x00, // 70
    0x78, 0xCC, 0x84, 0xA4, 0xEC, 0x00, 0x00, 0x00, 0x00, 0x00, // 71
    0xFC, 0x10, 0x10, 0x10, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, // 72
    0xFC, 0x00, // 73
    0x80, 0x80, 0xFC, 0x00, 0x00, 0x00, // 74
    0xFC, 0x30, 0x48, 0x84, 0x00, 0x00, 0x00, 0x00, // 75
    0xFC, 0x80, 0x80, 0x00, 0x00, 0x00, // 76
    0xFC, 0x0C, 0x70, 0x80, 0x70, 0x0C, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 77
    0xFC, 0x0C, 0x30, 0xC0, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, // 78
    0x78, 0x8C, 0x84, 0x84, 0xC4, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 79
    0xFC, 0x24, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, // 80
    0x78, 0xCC, 0x84, 0x84, 0xC4, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, // 81
    0xFC, 0x24, 0x24, 0xD8, 0x00, 0x00, 0x00, 0x00, // 82
    0x98, 0x94, 0xA4, 0x64, 0x00, 0x00, 0x00, 0x00, // 83
    0x04, 0x04, 0xFC, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, // 84
    0x7C, 0x80, 0x80, 0x80, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, // 85
    0x04, 0x38, 0xC0, 0xE0, 0x18, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 86
    0x04, 0x38, 0xC0, 0x70, 0x0C, 0x70, 0xC0, 0x38, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 87
    0x84, 0x48, 0x30, 0x68, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, // 88
    0x04, 0x18, 0xE0, 0x18, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, // 89
    0x84, 0xE4, 0x94, 0x8C, 0x00, 0x00, 0x00, 0x00, // 90
    0xFE, 0x02, 0xC0, 0x80, // 91
    0x06, 0x18, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x40, // 92
    0x02, 0xFE, 0x80, 0xC0, // 93
    0x18, 0x04, 0x38, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, // 95
    0x01, 0x02, 0x00, 0x00, // 96
    0xE8, 0xA8, 0xA8, 0xF8, 0x00, 0x00, 0x00, 0x00, // 97
    0xFE, 0x88, 0x88, 0x70, 0x00, 0x00, 0x00, 0x00, // 98
    0x70, 0x88, 0x88, 0x00, 0x00, 0x00, // 99
    0x70, 0x88, 0x88, 0xFE, 0x00, 0x00, 0x00, 0x00, // 100
    0x70, 0xA8, 0xA8, 0xB0, 0x00, 0x00, 0x00, 0x00, // 101
    0x08, 0xFE, 0x0A, 0x00, 0x00, 0x00, // 102
    0x78, 0xA8, 0xA8, 0xB8, 0xC0, 0x80, 0x80, 0xC0, // 103
    0xFE, 0x08, 0x08, 0xF8, 0x00, 0x00, 0x00, 0x00, // 104
    0xFA, 0x00, // 105
    0x00, 0xFA, 0x80, 0xC0, // 106
    0xFE, 0x20, 0x50, 0x88, 0x00, 0x00, 0x00, 0x00, // 107
    0xFE, 0x00, // 108
    0xF8, 0x08, 0x08, 0xF8, 0x08, 0x08, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 109
    0xF8, 0x08, 0x08, 0xF8, 0x00, 0x00, 0x00, 0x00, // 110
    0x70, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, // 111
    0xF8, 0x88, 0x88, 0x70, 0xC0, 0x00, 0x00, 0x00, // 112
    0x70, 0x88, 0x88, 0xF8, 0x00, 0x00, 0x00, 0xC0, // 113
    0xF8, 0x08, 0x00, 0x00, // 114
    0x98, 0xA8, 0xE8, 0x00, 0x00, 0x00, // 115
    0x08, 0xFC, 0x88, 0x00, 0x00, 0x00, // 116
    0xF8, 0x80, 0x80, 0xF8, 0x00, 0x00, 0x00, 0x00, // 117
    0x18, 0xE0, 0xE0, 0x18, 0x00, 0x00, 0x00, 0x00, // 118
    0x38, 0xC0, 0x30, 0x78, 0x80, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 119
    0x88, 0x70, 0x70, 0x88, 0x00, 0x00, 0x00, 0x00, // 120
    0x08, 0x70, 0xC0, 0x38, 0x00, 0x80, 0x40, 0x00, // 121
    0xC8, 0xA8, 0x98, 0x00, 0x00, 0x00, // 122
    0x20, 0xDE, 0x02, 0x00, 0xC0, 0x80, // 123
    0xFE, 0xC0, // 124
    0xDE, 0x20, 0xC0, 0x00, // 125
    0x0C, 0x04, 0x08, 0x0C, 0x00, 0x00, 0x00, 0x00, // 126
    0xFC, 0x94, 0xB4, 0xFC, 0x00, 0x00, 0x00, 0x00 // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Callibri11.h ===

/*
 *
 * Callibri11
 *
 * created with GLCDFontCreator
 * original framework by F. Maximilian Thiele
 * Modified By Siddharth Kaul
 *
 *
 * File Name           : Callibri11.h
 * Date                : 10.11.2012
 * Font size in bytes  : 4898
 * Font width          : 10
 * Font height         : 11
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */


#ifndef _Callibri11_H
#define _Callibri11_H

#define Callibri11_WIDTH 10
#define Callibri11_HEIGHT 11

GLCDFONTDECL(Callibri11) = {
    0x13, 0x22, // size
    0x0A, // width
    0x0B, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x02, 0x01, 0x03, 0x06, 0x04, 0x08, 0x07, 0x01, 0x02, 0x02, 
    0x05, 0x05, 0x02, 0x03, 0x01, 0x05, 0x05, 0x05, 0x05, 0x05, 
    0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x01, 0x02, 0x05, 0x05, 
    0x05, 0x04, 0x09, 0x07, 0x05, 0x05, 0x06, 0x04, 0x04, 0x06, 
    0x06, 0x01, 0x03, 0x05, 0x04, 0x08, 0x06, 0x06, 0x05, 0x07, 
    0x05, 0x04, 0x05, 0x06, 0x07, 0x0B, 0x06, 0x05, 0x06, 0x02, 
    0x05, 0x02, 0x05, 0x06, 0x02, 0x05, 0x05, 0x04, 0x05, 0x05, 
    0x04, 0x05, 0x05, 0x01, 0x02, 0x04, 0x01, 0x08, 0x05, 0x05, 
    0x05, 0x05, 0x03, 0x04, 0x04, 0x05, 0x05, 0x09, 0x05, 0x05, 
    0x03, 0x03, 0x01, 0x03, 0x05, 0x06, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, // 0x20 <space>
    0x7E, 0x20, // 33
    0x0E, 0x00, 0x0E, 0x00, 0x00, 0x00, // 34
    0x40, 0xE8, 0x5E, 0xE8, 0x5E, 0x08, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, // 35
    0x8C, 0x12, 0x23, 0xC4, 0x00, 0x60, 0x20, 0x00, // 36
    0x0C, 0x12, 0xD2, 0x2C, 0xD0, 0x2C, 0x22, 0xC0, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, // 37
    0xC0, 0x2C, 0x12, 0x32, 0xCC, 0xC0, 0x20, 0x00, 0x20, 0x20, 0x20, 0x00, 0x00, 0x20, // 38
    0x0E, 0x00, // 39
    0xF8, 0x06, 0x20, 0xC0, // 40
    0x06, 0xF8, 0xC0, 0x20, // 41
    0x14, 0x08, 0x3E, 0x08, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, // 42
    0x20, 0x20, 0xF8, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // 43
    0x00, 0x00, 0x80, 0x60, // 44
    0x20, 0x20, 0x20, 0x00, 0x00, 0x00, // 45
    0x00, 0x20, // 46
    0x00, 0x80, 0x70, 0x0C, 0x03, 0xC0, 0x20, 0x00, 0x00, 0x00, // 47
    0xFC, 0x02, 0x02, 0x02, 0xFC, 0x00, 0x20, 0x20, 0x20, 0x00, // 48
    0x04, 0x02, 0xFE, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, // 49
    0x04, 0x82, 0x42, 0x22, 0x1C, 0x20, 0x20, 0x20, 0x20, 0x20, // 50
    0x84, 0x12, 0x12, 0x12, 0xEC, 0x00, 0x20, 0x20, 0x20, 0x00, // 51
    0x60, 0x58, 0x46, 0xFE, 0x40, 0x00, 0x00, 0x00, 0x20, 0x00, // 52
    0x9E, 0x12, 0x12, 0x12, 0xE2, 0x00, 0x20, 0x20, 0x20, 0x00, // 53
    0xF8, 0x14, 0x12, 0x12, 0xE2, 0x00, 0x20, 0x20, 0x20, 0x00, // 54
    0x02, 0x82, 0x62, 0x1A, 0x06, 0x00, 0x20, 0x00, 0x00, 0x00, // 55
    0xEC, 0x12, 0x12, 0x12, 0xEC, 0x00, 0x20, 0x20, 0x20, 0x00, // 56
    0x1C, 0x22, 0x22, 0xA2, 0x7C, 0x20, 0x20, 0x20, 0x00, 0x00, // 57
    0x08, 0x20, // 58
    0x00, 0x08, 0x80, 0x60, // 59
    0x20, 0x20, 0x50, 0x50, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, // 60
    0x50, 0x50, 0x50, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, // 61
    0x88, 0x50, 0x50, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // 62
    0x02, 0x72, 0x12, 0x0C, 0x00, 0x20, 0x00, 0x00, // 63
    0xF0, 0x08, 0x64, 0x92, 0x8A, 0x4A, 0xBA, 0x84, 0x78, 0x00, 0x20, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, // 64
    0x80, 0x60, 0x58, 0x46, 0x58, 0x60, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, // 65
    0xFE, 0x12, 0x12, 0x1C, 0xE0, 0x20, 0x20, 0x20, 0x20, 0x00, // 66
    0xFC, 0x02, 0x02, 0x02, 0x84, 0x00, 0x20, 0x20, 0x20, 0x00, // 67
    0xFE, 0x02, 0x02, 0x02, 0x84, 0x78, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, // 68
    0xFE, 0x12, 0x12, 0x12, 0x20, 0x20, 0x20, 0x20, // 69
    0xFE, 0x12, 0x12, 0x12, 0x20, 0x00, 0x00, 0x00, // 70
    0x78, 0x84, 0x02, 0x22, 0x22, 0xE4, 0x00, 0x00, 0x20, 0x20, 0x20, 0x00, // 71
    0xFE, 0x10, 0x10, 0x10, 0x10, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, // 72
    0xFE, 0x20, // 73
    0x00, 0x00, 0xFE, 0x20, 0x20, 0x00, // 74
    0xFE, 0x10, 0x28, 0xC4, 0x02, 0x20, 0x00, 0x00, 0x00, 0x20, // 75
    0xFE, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, // 76
    0xFE, 0x06, 0x78, 0x80, 0x80, 0x78, 0x06, 0xFE, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, // 77
    0xFE, 0x06, 0x18, 0x60, 0x80, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x20, 0x20, // 78
    0xFC, 0x02, 0x02, 0x02, 0x02, 0xFC, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, // 79
    0xFE, 0x22, 0x22, 0x22, 0x1C, 0x20, 0x00, 0x00, 0x00, 0x00, // 80
    0xFC, 0x02, 0x02, 0x02, 0x02, 0xFC, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x40, 0x40, // 81
    0xFE, 0x22, 0x22, 0x62, 0x9C, 0x20, 0x00, 0x00, 0x00, 0x20, // 82
    0x8C, 0x12, 0x22, 0xC4, 0x00, 0x20, 0x20, 0x00, // 83
    0x02, 0x02, 0xFE, 0x02, 0x02, 0x00, 0x00, 0x20, 0x00, 0x00, // 84
    0xFE, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, // 85
    0x06, 0x18, 0x60, 0x80, 0x60, 0x18, 0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, // 86
    0x06, 0x78, 0x80, 0x60, 0x18, 0x06, 0x18, 0x60, 0x80, 0x78, 0x06, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, // 87
    0x02, 0xCC, 0x30, 0x30, 0xCC, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, // 88
    0x06, 0x18, 0xE0, 0x18, 0x06, 0x00, 0x00, 0x20, 0x00, 0x00, // 89
    0x82, 0x42, 0x22, 0x12, 0x0A, 0x06, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 90
    0xFE, 0x02, 0xE0, 0x80, // 91
    0x03, 0x0C, 0x70, 0x80, 0x00, 0x00, 0x00, 0x00, 0x20, 0xC0, // 92
    0x02, 0xFE, 0x80, 0xE0, // 93
    0x10, 0x0C, 0x02, 0x0C, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, // 95
    0x01, 0x02, 0x00, 0x00, // 96
    0xC8, 0x28, 0x28, 0x28, 0xF0, 0x00, 0x20, 0x20, 0x20, 0x20, // 97
    0xFE, 0x08, 0x08, 0x08, 0xF0, 0x20, 0x20, 0x20, 0x20, 0x00, // 98
    0xF0, 0x08, 0x08, 0x08, 0x00, 0x20, 0x20, 0x20, // 99
    0xF0, 0x08, 0x08, 0x08, 0xFE, 0x00, 0x20, 0x20, 0x20, 0x20, // 100
    0xF0, 0x28, 0x28, 0x28, 0x30, 0x00, 0x20, 0x20, 0x20, 0x20, // 101
    0x08, 0xFC, 0x0A, 0x0A, 0x00, 0x20, 0x00, 0x00, // 102
    0xB0, 0x48, 0x48, 0x38, 0x08, 0xC0, 0xA0, 0xA0, 0xA0, 0x40, // 103
    0xFE, 0x10, 0x08, 0x08, 0xF0, 0x20, 0x00, 0x00, 0x00, 0x20, // 104
    0xFA, 0x20, // 105
    0x00, 0xFA, 0x80, 0x60, // 106
    0xFE, 0x20, 0xD0, 0x08, 0x20, 0x00, 0x00, 0x20, // 107
    0xFE, 0x20, // 108
    0xF8, 0x10, 0x08, 0x08, 0xF0, 0x08, 0x08, 0xF0, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, // 109
    0xF8, 0x10, 0x08, 0x08, 0xF0, 0x20, 0x00, 0x00, 0x00, 0x20, // 110
    0xF0, 0x08, 0x08, 0x08, 0xF0, 0x00, 0x20, 0x20, 0x20, 0x00, // 111
    0xF8, 0x08, 0x08, 0x08, 0xF0, 0xE0, 0x20, 0x20, 0x20, 0x00, // 112
    0xF0, 0x08, 0x08, 0x08, 0xF8, 0x00, 0x20, 0x20, 0x20, 0xE0, // 113
    0xF8, 0x08, 0x08, 0x20, 0x00, 0x00, // 114
    0x30, 0x28, 0x48, 0xC8, 0x20, 0x20, 0x20, 0x00, // 115
    0x08, 0xFC, 0x08, 0x08, 0x00, 0x00, 0x20, 0x20, // 116
    0xF8, 0x00, 0x00, 0x80, 0xF8, 0x00, 0x20, 0x20, 0x00, 0x20, // 117
    0x18, 0x60, 0x80, 0x60, 0x18, 0x00, 0x00, 0x20, 0x00, 0x00, // 118
    0x18, 0x60, 0x80, 0x60, 0x18, 0x60, 0x80, 0x60, 0x18, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, // 119
    0x08, 0x90, 0x60, 0x90, 0x08, 0x20, 0x00, 0x00, 0x00, 0x20, // 120
    0x18, 0x60, 0x80, 0x60, 0x18, 0x00, 0xC0, 0x20, 0x00, 0x00, // 121
    0x88, 0x68, 0x18, 0x20, 0x20, 0x20, // 122
    0x20, 0xDC, 0x02, 0x00, 0x60, 0x80, // 123
    0xFE, 0xE0, // 124
    0x02, 0xDC, 0x20, 0x80, 0x60, 0x00, // 125
    0x10, 0x08, 0x18, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, // 126
    0xFE, 0x02, 0x0A, 0x7A, 0x02, 0xFE, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20 // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Callibri11_bold.h ===

/*
 *
 * Callibri11_bold
 *
 * created with GLCDFontCreator
 * original framework by F. Maximilian Thiele
 * Modified By Siddharth Kaul
 *
 *
 * File Name           : Callibri11_bold.h
 * Date                : 10.11.2012
 * Font size in bytes  : 5217
 * Font width          : 10
 * Font height         : 11
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef _Callibri11_bold_H
#define _Callibri11_bold_H

#define Callibri11_bold_WIDTH 10
#define Callibri11_bold_HEIGHT 11

GLCDFONTDECL(Callibri11_bold) = {
    0x14, 0x61, // size
    0x0A, // width
    0x0B, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x02, 0x02, 0x03, 0x06, 0x05, 0x08, 0x08, 0x01, 0x03, 0x03, 
    0x05, 0x05, 0x02, 0x03, 0x02, 0x05, 0x05, 0x06, 0x05, 0x05, 
    0x06, 0x05, 0x05, 0x05, 0x05, 0x05, 0x02, 0x02, 0x05, 0x05, 
    0x05, 0x05, 0x0A, 0x06, 0x06, 0x05, 0x07, 0x05, 0x05, 0x07, 
    0x07, 0x02, 0x03, 0x06, 0x04, 0x09, 0x07, 0x07, 0x05, 0x08, 
    0x06, 0x05, 0x06, 0x07, 0x06, 0x0A, 0x06, 0x06, 0x05, 0x03, 
    0x05, 0x03, 0x05, 0x06, 0x02, 0x05, 0x05, 0x04, 0x05, 0x05, 
    0x03, 0x06, 0x05, 0x02, 0x02, 0x05, 0x02, 0x08, 0x05, 0x05, 
    0x05, 0x05, 0x03, 0x04, 0x03, 0x05, 0x05, 0x08, 0x05, 0x05, 
    0x04, 0x03, 0x01, 0x04, 0x05, 0x06, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, // 0x20 <space>
    0xBE, 0xBE, 0x20, 0x20, // 33
    0x0E, 0x00, 0x0E, 0x00, 0x00, 0x00, // 34
    0x48, 0xE8, 0x5E, 0xE8, 0x5E, 0x48, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, // 35
    0x9C, 0x3E, 0x33, 0xF2, 0xE4, 0x00, 0x20, 0x60, 0x20, 0x00, // 36
    0x0C, 0x12, 0x8C, 0x60, 0x18, 0xC6, 0x20, 0xC0, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, // 37
    0xC0, 0xEC, 0x3E, 0x32, 0x7E, 0xCC, 0xE0, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x20, // 38
    0x0E, 0x00, // 39
    0xF0, 0xFC, 0x06, 0x00, 0x60, 0xC0, // 40
    0x06, 0xFC, 0xF0, 0xC0, 0x60, 0x00, // 41
    0x12, 0x0C, 0x3F, 0x0C, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, // 42
    0x20, 0x20, 0xF8, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // 43
    0x80, 0x80, 0xE0, 0x60, // 44
    0x20, 0x20, 0x20, 0x00, 0x00, 0x00, // 45
    0x80, 0x80, 0x20, 0x20, // 46
    0x00, 0x80, 0x70, 0x0C, 0x03, 0xC0, 0x20, 0x00, 0x00, 0x00, // 47
    0xFC, 0xFE, 0x02, 0xFE, 0xFC, 0x00, 0x20, 0x20, 0x20, 0x00, // 48
    0x08, 0x04, 0xFE, 0xFE, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 49
    0x84, 0xC2, 0x62, 0x3E, 0x1C, 0x20, 0x20, 0x20, 0x20, 0x20, // 50
    0x84, 0x12, 0x12, 0xFE, 0xEC, 0x00, 0x20, 0x20, 0x20, 0x00, // 51
    0x60, 0x58, 0x46, 0xFE, 0xFE, 0x40, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, // 52
    0x1E, 0x1E, 0x12, 0xF2, 0xE2, 0x20, 0x20, 0x20, 0x20, 0x00, // 53
    0xFC, 0xFE, 0x12, 0xF2, 0xE2, 0x00, 0x20, 0x20, 0x20, 0x00, // 54
    0x02, 0xC2, 0xFA, 0x3E, 0x06, 0x00, 0x20, 0x20, 0x00, 0x00, // 55
    0xEC, 0xFE, 0x12, 0xFE, 0xEC, 0x00, 0x20, 0x20, 0x20, 0x00, // 56
    0x1C, 0x3E, 0x22, 0xFE, 0xFC, 0x20, 0x20, 0x20, 0x20, 0x00, // 57
    0x98, 0x98, 0x20, 0x20, // 58
    0x98, 0x98, 0xE0, 0x60, // 59
    0x20, 0x50, 0x50, 0x88, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, // 60
    0x50, 0x50, 0x50, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, // 61
    0x88, 0x88, 0x50, 0x50, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // 62
    0x02, 0xB2, 0xB2, 0x1E, 0x0C, 0x00, 0x20, 0x20, 0x00, 0x00, // 63
    0xF0, 0x08, 0x64, 0x92, 0x8A, 0x4A, 0xF2, 0x9A, 0x84, 0x78, 0x00, 0x20, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, // 64
    0xE0, 0xF8, 0x4E, 0x4E, 0xF8, 0xE0, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, // 65
    0xFE, 0xFE, 0x12, 0x12, 0xFE, 0xEC, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, // 66
    0xFC, 0xFE, 0x02, 0x02, 0x84, 0x00, 0x20, 0x20, 0x20, 0x00, // 67
    0xFE, 0xFE, 0x02, 0x02, 0x86, 0xFC, 0x78, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, // 68
    0xFE, 0xFE, 0x12, 0x12, 0x12, 0x20, 0x20, 0x20, 0x20, 0x20, // 69
    0xFE, 0xFE, 0x12, 0x12, 0x12, 0x20, 0x20, 0x00, 0x00, 0x00, // 70
    0xFC, 0xFE, 0x02, 0x02, 0x22, 0xE2, 0xE4, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, // 71
    0xFE, 0xFE, 0x10, 0x10, 0x10, 0xFE, 0xFE, 0x20, 0x20, 0x00, 0x00, 0x00, 0x20, 0x20, // 72
    0xFE, 0xFE, 0x20, 0x20, // 73
    0x00, 0xFE, 0xFE, 0x20, 0x20, 0x00, // 74
    0xFE, 0xFE, 0x30, 0xFC, 0xCE, 0x02, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, // 75
    0xFE, 0xFE, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, // 76
    0xFE, 0xFE, 0x1C, 0x70, 0xC0, 0x70, 0x1C, 0xFE, 0xFE, 0x20, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x20, // 77
    0xFE, 0xFE, 0x0C, 0x30, 0xC0, 0xFE, 0xFE, 0x20, 0x20, 0x00, 0x00, 0x00, 0x20, 0x20, // 78
    0xFC, 0xFE, 0x02, 0x02, 0x02, 0xFE, 0xFC, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, // 79
    0xFE, 0xFE, 0x22, 0x3E, 0x1C, 0x20, 0x20, 0x00, 0x00, 0x00, // 80
    0xFC, 0xFE, 0x02, 0x02, 0x02, 0xFE, 0xFC, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x40, 0x40, // 81
    0xFE, 0xFE, 0x12, 0x32, 0xFE, 0xCC, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, // 82
    0x9C, 0x3E, 0x32, 0xF2, 0xE4, 0x00, 0x20, 0x20, 0x20, 0x00, // 83
    0x02, 0x02, 0xFE, 0xFE, 0x02, 0x02, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, // 84
    0xFE, 0xFE, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, // 85
    0x0E, 0x7E, 0xE0, 0xE0, 0x7E, 0x0E, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, // 86
    0x06, 0x3E, 0xF8, 0xC0, 0x3E, 0x3E, 0xC0, 0xF8, 0x3E, 0x06, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, // 87
    0x86, 0xCE, 0x78, 0x78, 0xCE, 0x86, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, // 88
    0x06, 0x1E, 0xF8, 0xF8, 0x1E, 0x06, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, // 89
    0x82, 0xE2, 0x7A, 0x1E, 0x06, 0x20, 0x20, 0x20, 0x20, 0x20, // 90
    0xFE, 0xFE, 0x02, 0xE0, 0xE0, 0x80, // 91
    0x03, 0x0C, 0x70, 0x80, 0x00, 0x00, 0x00, 0x00, 0x20, 0xC0, // 92
    0x02, 0xFE, 0xFE, 0x80, 0xE0, 0xE0, // 93
    0x10, 0x0C, 0x02, 0x0C, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, // 95
    0x01, 0x02, 0x00, 0x00, // 96
    0xC8, 0xE8, 0x28, 0xF8, 0xF0, 0x00, 0x20, 0x20, 0x20, 0x20, // 97
    0xFE, 0xFE, 0x08, 0xF8, 0xF0, 0x20, 0x20, 0x20, 0x20, 0x00, // 98
    0xF0, 0xF8, 0x08, 0x08, 0x00, 0x20, 0x20, 0x20, // 99
    0xF0, 0xF8, 0x08, 0xFE, 0xFE, 0x00, 0x20, 0x20, 0x20, 0x20, // 100
    0xF0, 0xF8, 0x28, 0x38, 0x30, 0x00, 0x20, 0x20, 0x20, 0x20, // 101
    0xFC, 0xFE, 0x0A, 0x20, 0x20, 0x00, // 102
    0xB0, 0xF8, 0x48, 0x78, 0x38, 0x08, 0xC0, 0xE0, 0xA0, 0xE0, 0x60, 0x00, // 103
    0xFE, 0xFE, 0x08, 0xF8, 0xF0, 0x20, 0x20, 0x00, 0x20, 0x20, // 104
    0xFB, 0xFB, 0x20, 0x20, // 105
    0xFB, 0xFB, 0xE0, 0x60, // 106
    0xFE, 0xFE, 0x60, 0xF8, 0x98, 0x20, 0x20, 0x00, 0x20, 0x20, // 107
    0xFE, 0xFE, 0x20, 0x20, // 108
    0xF8, 0xF8, 0x08, 0xF8, 0xF0, 0x08, 0xF8, 0xF0, 0x20, 0x20, 0x00, 0x20, 0x20, 0x00, 0x20, 0x20, // 109
    0xF8, 0xF8, 0x08, 0xF8, 0xF0, 0x20, 0x20, 0x00, 0x20, 0x20, // 110
    0xF0, 0xF8, 0x08, 0xF8, 0xF0, 0x00, 0x20, 0x20, 0x20, 0x00, // 111
    0xF8, 0xF8, 0x08, 0xF8, 0xF0, 0xE0, 0xE0, 0x20, 0x20, 0x00, // 112
    0xF0, 0xF8, 0x08, 0xF8, 0xF8, 0x00, 0x20, 0x20, 0xE0, 0xE0, // 113
    0xF8, 0xF8, 0x08, 0x20, 0x20, 0x00, // 114
    0x30, 0x78, 0xE8, 0xC8, 0x20, 0x20, 0x20, 0x00, // 115
    0xFC, 0xFC, 0x08, 0x00, 0x20, 0x20, // 116
    0xF8, 0xF8, 0x00, 0xF8, 0xF8, 0x00, 0x20, 0x20, 0x20, 0x20, // 117
    0x38, 0xF8, 0x80, 0xF8, 0x38, 0x00, 0x20, 0x20, 0x20, 0x00, // 118
    0x38, 0xF8, 0xC0, 0x38, 0x38, 0xC0, 0xF8, 0x38, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, // 119
    0x98, 0xF8, 0x60, 0xF8, 0x98, 0x20, 0x20, 0x00, 0x20, 0x20, // 120
    0x38, 0xF8, 0x80, 0xF8, 0x38, 0x00, 0xC0, 0xE0, 0x20, 0x00, // 121
    0x88, 0xE8, 0x78, 0x18, 0x20, 0x20, 0x20, 0x20, // 122
    0xFC, 0xDE, 0x02, 0x60, 0xE0, 0x80, // 123
    0xFE, 0xE0, // 124
    0x02, 0xDE, 0xFC, 0x20, 0x80, 0xE0, 0x60, 0x00, // 125
    0x10, 0x08, 0x18, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, // 126
    0xFE, 0x02, 0x6A, 0x3A, 0x02, 0xFE, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20 // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Callibri11_italic.h ===

/*
 *
 * Callibri11_italic
 *
 * created with GLCDFontCreator
 * original framework by F. Maximilian Thiele
 * Modified By Siddharth Kaul
 *
 *
 * File Name           : Callibri11_italic.h
 * Date                : 10.11.2012
 * Font size in bytes  : 5184
 * Font width          : 10
 * Font height         : 11
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef _Callibri11_italic_H
#define _Callibri11_italic_H

#define Callibri11_italic_WIDTH 10
#define Callibri11_italic_HEIGHT 11

GLCDFONTDECL(Callibri11_italic) = {
    0x14, 0x40, // size
    0x0A, // width
    0x0B, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x02, 0x02, 0x03, 0x06, 0x06, 0x08, 0x07, 0x01, 0x03, 0x03, 
    0x04, 0x06, 0x02, 0x03, 0x01, 0x05, 0x05, 0x05, 0x06, 0x06, 
    0x05, 0x06, 0x05, 0x05, 0x05, 0x06, 0x02, 0x03, 0x05, 0x05, 
    0x06, 0x04, 0x0A, 0x07, 0x06, 0x05, 0x06, 0x05, 0x05, 0x07, 
    0x06, 0x02, 0x04, 0x05, 0x04, 0x09, 0x07, 0x07, 0x05, 0x07, 
    0x06, 0x05, 0x05, 0x07, 0x05, 0x09, 0x06, 0x05, 0x06, 0x03, 
    0x03, 0x03, 0x04, 0x05, 0x02, 0x05, 0x05, 0x04, 0x05, 0x05, 
    0x04, 0x05, 0x05, 0x02, 0x03, 0x04, 0x02, 0x09, 0x05, 0x05, 
    0x05, 0x05, 0x03, 0x05, 0x03, 0x05, 0x04, 0x08, 0x05, 0x05, 
    0x05, 0x03, 0x03, 0x04, 0x05, 0x06, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, // 0x20 <space>
    0x60, 0x1E, 0x20, 0x00, // 33
    0x08, 0x06, 0x08, 0x00, 0x00, 0x00, // 34
    0xC8, 0x78, 0x4E, 0xC8, 0x78, 0x4E, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, // 35
    0x80, 0x0C, 0x12, 0x22, 0xC3, 0x04, 0x00, 0x60, 0x20, 0x20, 0x00, 0x00, // 36
    0x0C, 0x92, 0x52, 0x2C, 0xD0, 0x28, 0x24, 0xC2, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, // 37
    0xC0, 0x20, 0x1C, 0x32, 0xCA, 0xC4, 0x20, 0x00, 0x20, 0x20, 0x20, 0x00, 0x00, 0x20, // 38
    0x08, 0x00, // 39
    0xE0, 0x1C, 0x02, 0x60, 0x80, 0x00, // 40
    0x00, 0x82, 0x7C, 0x80, 0x60, 0x00, // 41
    0x14, 0x38, 0x0E, 0x14, 0x00, 0x00, 0x00, 0x00, // 42
    0x20, 0x20, 0xE0, 0x38, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 43
    0x00, 0x00, 0x80, 0x60, // 44
    0x20, 0x20, 0x20, 0x00, 0x00, 0x00, // 45
    0x00, 0x20, // 46
    0x80, 0x60, 0x18, 0x06, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, // 47
    0xF0, 0x0C, 0x02, 0xC2, 0x3C, 0x00, 0x20, 0x20, 0x00, 0x00, // 48
    0x00, 0x04, 0xE2, 0x1E, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, // 49
    0x00, 0x80, 0x44, 0x22, 0x12, 0x0C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, // 50
    0x80, 0x00, 0x14, 0x12, 0xF2, 0x0C, 0x00, 0x20, 0x20, 0x20, 0x00, 0x00, // 51
    0x60, 0x50, 0x48, 0xE4, 0x5E, 0x00, 0x00, 0x00, 0x20, 0x00, // 52
    0x80, 0x18, 0x16, 0x12, 0xE2, 0x02, 0x00, 0x20, 0x20, 0x20, 0x00, 0x00, // 53
    0xE0, 0x18, 0x14, 0x92, 0x62, 0x00, 0x20, 0x20, 0x00, 0x00, // 54
    0x02, 0xC2, 0x32, 0x0A, 0x06, 0x20, 0x00, 0x00, 0x00, 0x00, // 55
    0xE0, 0x1C, 0x12, 0xF2, 0x0C, 0x00, 0x20, 0x20, 0x00, 0x00, // 56
    0x00, 0x18, 0x24, 0xA2, 0x62, 0x1C, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, // 57
    0x00, 0x08, 0x20, 0x00, // 58
    0x00, 0x00, 0x08, 0x80, 0x60, 0x00, // 59
    0x20, 0x50, 0x50, 0x50, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, // 60
    0x50, 0x50, 0x50, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, // 61
    0x80, 0x88, 0x50, 0x50, 0x50, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 62
    0x62, 0x12, 0x12, 0x0C, 0x20, 0x00, 0x00, 0x00, // 63
    0xE0, 0x18, 0x04, 0x24, 0x52, 0x4A, 0x7A, 0x4A, 0x22, 0x1C, 0x00, 0x20, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, // 64
    0x00, 0xC0, 0x70, 0x4C, 0x42, 0x7C, 0xC0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, // 65
    0xE0, 0x1E, 0x12, 0x12, 0x12, 0xEC, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, // 66
    0xF0, 0x0C, 0x02, 0x02, 0x82, 0x00, 0x20, 0x20, 0x20, 0x00, // 67
    0xE0, 0x1E, 0x02, 0x02, 0xC2, 0x3C, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, // 68
    0xE0, 0x1E, 0x12, 0x12, 0x12, 0x20, 0x20, 0x20, 0x20, 0x20, // 69
    0xE0, 0x1E, 0x12, 0x12, 0x12, 0x20, 0x00, 0x00, 0x00, 0x00, // 70
    0xF0, 0x0C, 0x02, 0x02, 0x12, 0xD2, 0x34, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, // 71
    0xE0, 0x1E, 0x10, 0x10, 0xF0, 0x1E, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, // 72
    0xE0, 0x1E, 0x20, 0x00, // 73
    0x00, 0x00, 0xE0, 0x1E, 0x20, 0x20, 0x00, 0x00, // 74
    0xE0, 0x1E, 0x30, 0xC8, 0x04, 0x20, 0x00, 0x00, 0x00, 0x20, // 75
    0xE0, 0x1E, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, // 76
    0xE0, 0x1E, 0x06, 0x78, 0x80, 0x60, 0x18, 0xE6, 0x1E, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, // 77
    0xE0, 0x1E, 0x0C, 0x30, 0xC0, 0xE0, 0x1E, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, // 78
    0xF0, 0x0C, 0x02, 0x02, 0x02, 0xC2, 0x3C, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, // 79
    0xE0, 0x3E, 0x22, 0x22, 0x1C, 0x20, 0x00, 0x00, 0x00, 0x00, // 80
    0xF0, 0x0C, 0x02, 0x02, 0x02, 0xC2, 0x3C, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x40, // 81
    0xE0, 0x1E, 0x12, 0x32, 0xD2, 0x0C, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, // 82
    0x80, 0x0C, 0x12, 0x22, 0xC2, 0x00, 0x20, 0x20, 0x20, 0x00, // 83
    0x02, 0xE2, 0x1E, 0x02, 0x02, 0x00, 0x20, 0x00, 0x00, 0x00, // 84
    0xE0, 0x1E, 0x00, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, // 85
    0xFE, 0x80, 0x60, 0x10, 0x0C, 0x20, 0x00, 0x00, 0x00, 0x00, // 86
    0x3E, 0xC0, 0x60, 0x18, 0x0E, 0xF0, 0x40, 0x30, 0x0C, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, // 87
    0x00, 0x80, 0x46, 0x78, 0x88, 0x04, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, // 88
    0x06, 0xD8, 0x20, 0x18, 0x04, 0x00, 0x20, 0x00, 0x00, 0x00, // 89
    0x80, 0x42, 0x22, 0x12, 0x0A, 0x06, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, // 90
    0xC0, 0x3E, 0x02, 0xE0, 0x80, 0x00, // 91
    0x07, 0xF8, 0x00, 0x00, 0x00, 0xE0, // 92
    0x00, 0xC2, 0x3E, 0x80, 0xE0, 0x00, // 93
    0x10, 0x0C, 0x02, 0x1C, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, // 95
    0x01, 0x02, 0x00, 0x00, // 96
    0xE0, 0x10, 0x08, 0xC8, 0x38, 0x00, 0x20, 0x20, 0x20, 0x00, // 97
    0xC0, 0x3E, 0x08, 0x88, 0x70, 0x20, 0x20, 0x20, 0x00, 0x00, // 98
    0xE0, 0x10, 0x08, 0x88, 0x00, 0x20, 0x20, 0x00, // 99
    0xE0, 0x10, 0x08, 0xC8, 0x3E, 0x00, 0x20, 0x20, 0x20, 0x00, // 100
    0xE0, 0x30, 0x28, 0x28, 0x10, 0x00, 0x20, 0x20, 0x20, 0x00, // 101
    0x00, 0x88, 0x78, 0x0C, 0x80, 0x60, 0x00, 0x00, // 102
    0xE0, 0x10, 0x08, 0xC8, 0x38, 0x80, 0xA0, 0xA0, 0x60, 0x00, // 103
    0xC0, 0x3E, 0x08, 0xC8, 0x30, 0x20, 0x00, 0x00, 0x20, 0x00, // 104
    0xC0, 0x3A, 0x20, 0x00, // 105
    0x00, 0xC0, 0x3A, 0x80, 0x60, 0x00, // 106
    0xC0, 0x3E, 0xE0, 0x10, 0x20, 0x00, 0x00, 0x20, // 107
    0xC0, 0x3E, 0x20, 0x00, // 108
    0xC0, 0x38, 0x10, 0x08, 0xC8, 0x30, 0x08, 0xC8, 0x30, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, // 109
    0xC0, 0x38, 0x08, 0xC8, 0x30, 0x20, 0x00, 0x00, 0x20, 0x00, // 110
    0xE0, 0x10, 0x08, 0x88, 0x70, 0x00, 0x20, 0x20, 0x00, 0x00, // 111
    0xC0, 0x38, 0x08, 0x88, 0x70, 0xE0, 0x20, 0x20, 0x00, 0x00, // 112
    0xE0, 0x10, 0x08, 0xC8, 0x38, 0x00, 0x20, 0x20, 0xE0, 0x00, // 113
    0xC0, 0x38, 0x08, 0x20, 0x00, 0x00, // 114
    0x00, 0x10, 0x28, 0xC8, 0x08, 0x20, 0x20, 0x20, 0x00, 0x00, // 115
    0xC8, 0x3C, 0x08, 0x00, 0x20, 0x20, // 116
    0xC0, 0x38, 0x00, 0xC0, 0x38, 0x00, 0x20, 0x20, 0x20, 0x00, // 117
    0xF8, 0x80, 0x40, 0x30, 0x20, 0x00, 0x00, 0x00, // 118
    0xF8, 0x80, 0x60, 0x10, 0xF8, 0x80, 0x40, 0x30, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, // 119
    0x00, 0x88, 0x70, 0xE0, 0x10, 0x20, 0x00, 0x00, 0x00, 0x20, // 120
    0x00, 0xF8, 0x00, 0xC0, 0x30, 0x80, 0x40, 0x20, 0x00, 0x00, // 121
    0x00, 0x88, 0x48, 0x28, 0x18, 0x20, 0x20, 0x20, 0x20, 0x20, // 122
    0x20, 0xE0, 0x1E, 0x00, 0xE0, 0x80, // 123
    0x00, 0xF0, 0x0E, 0xE0, 0x00, 0x00, // 124
    0x00, 0xC2, 0x3E, 0x20, 0x80, 0x60, 0x00, 0x00, // 125
    0x10, 0x08, 0x08, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // 126
    0xFE, 0x02, 0x5A, 0x0A, 0x02, 0xFE, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20 // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Callibri14.h ===



/*
 *
 * new Font
 *
 * created with GLCDFontCreator
 * original framework by F. Maximilian Thiele
 * Modified By Siddharth Kaul
 *
 *
 * File Name           : callibri_size14.h
 * Date                : 10.11.2012
 * Font size in bytes  : 7102
 * Font width          : 10
 * Font height         : 14
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef _Callibri14_H
#define _Callibri14_H

#define Callibri14_WIDTH 10
#define Callibri14_HEIGHT 14

GLCDFONTDECL(Callibri14) = {
    0x1B, 0xBE, // size
    0x0A, // width
    0x0E, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x02, 0x01, 0x04, 0x07, 0x05, 0x09, 0x08, 0x01, 0x02, 0x02, 
    0x05, 0x07, 0x03, 0x03, 0x01, 0x05, 0x07, 0x05, 0x06, 0x06, 
    0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x01, 0x02, 0x06, 0x06, 
    0x05, 0x05, 0x0A, 0x08, 0x06, 0x06, 0x07, 0x05, 0x05, 0x07, 
    0x06, 0x01, 0x03, 0x05, 0x05, 0x0A, 0x07, 0x08, 0x05, 0x08, 
    0x06, 0x05, 0x07, 0x07, 0x08, 0x0C, 0x07, 0x05, 0x06, 0x03, 
    0x05, 0x02, 0x05, 0x07, 0x02, 0x05, 0x06, 0x05, 0x06, 0x06, 
    0x04, 0x06, 0x05, 0x01, 0x02, 0x05, 0x01, 0x09, 0x05, 0x06, 
    0x06, 0x06, 0x04, 0x04, 0x04, 0x05, 0x06, 0x0A, 0x06, 0x06, 
    0x04, 0x03, 0x01, 0x03, 0x06, 0x07, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, // 0x20 <space>
    0xFE, 0x18, // 33
    0x1E, 0x00, 0x0E, 0x02, 0x00, 0x00, 0x00, 0x00, // 34
    0x80, 0xD0, 0xBC, 0x90, 0xD0, 0xBC, 0x10, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, // 35
    0x38, 0x64, 0x47, 0x44, 0x88, 0x18, 0x70, 0x10, 0x10, 0x0C, // 36
    0x38, 0x44, 0x44, 0x38, 0x80, 0xC0, 0x70, 0x48, 0x84, 0x00, 0x00, 0x10, 0x08, 0x04, 0x0C, 0x10, 0x10, 0x0C, // 37
    0xC0, 0x7E, 0x62, 0xF2, 0x9E, 0x04, 0xC0, 0x00, 0x0C, 0x10, 0x10, 0x10, 0x1C, 0x0C, 0x1C, 0x10, // 38
    0x1E, 0x00, // 39
    0xF0, 0x0E, 0x1C, 0xE0, // 40
    0x0E, 0xF0, 0xE0, 0x1C, // 41
    0x14, 0x14, 0x3E, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, // 42
    0x80, 0x80, 0x80, 0xF0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, // 43
    0x00, 0x00, 0x00, 0x40, 0x38, 0x08, // 44
    0x80, 0x80, 0x80, 0x00, 0x00, 0x00, // 45
    0x00, 0x18, // 46
    0x00, 0x00, 0xC0, 0x38, 0x0E, 0x60, 0x38, 0x04, 0x00, 0x00, // 47
    0xF0, 0x08, 0x04, 0x04, 0x04, 0x0C, 0xF0, 0x04, 0x18, 0x10, 0x10, 0x10, 0x08, 0x04, // 48
    0x08, 0x04, 0xFC, 0x00, 0x00, 0x10, 0x10, 0x1C, 0x10, 0x10, // 49
    0x08, 0x04, 0x04, 0x84, 0x44, 0x38, 0x10, 0x18, 0x14, 0x10, 0x10, 0x10, // 50
    0x08, 0x44, 0x44, 0x44, 0xE4, 0xB8, 0x08, 0x10, 0x10, 0x10, 0x10, 0x0C, // 51
    0x80, 0x60, 0x30, 0x0C, 0xFC, 0x00, 0x04, 0x04, 0x04, 0x04, 0x1C, 0x04, // 52
    0x3C, 0x24, 0x24, 0x24, 0x64, 0xC0, 0x18, 0x10, 0x10, 0x10, 0x18, 0x0C, // 53
    0xF0, 0x28, 0x24, 0x24, 0x24, 0xC4, 0x0C, 0x18, 0x10, 0x10, 0x18, 0x0C, // 54
    0x04, 0x04, 0x04, 0xC4, 0x3C, 0x0C, 0x00, 0x10, 0x1C, 0x04, 0x00, 0x00, // 55
    0x98, 0xA4, 0x44, 0x44, 0xA4, 0x98, 0x0C, 0x10, 0x10, 0x10, 0x10, 0x0C, // 56
    0x38, 0x44, 0x44, 0x44, 0x4C, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x08, 0x04, // 57
    0x30, 0x18, // 58
    0x00, 0x60, 0x40, 0x38, // 59
    0x40, 0xE0, 0xA0, 0x10, 0x10, 0x08, 0x00, 0x00, 0x00, 0x04, 0x04, 0x08, // 60
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, // 61
    0x10, 0x20, 0x20, 0xC0, 0xC0, 0x08, 0x04, 0x04, 0x00, 0x00, // 62
    0x06, 0xE2, 0x22, 0x36, 0x1C, 0x00, 0x18, 0x18, 0x00, 0x00, // 63
    0xC0, 0x30, 0xC8, 0x64, 0x24, 0xE4, 0x64, 0x04, 0x08, 0xF0, 0x1C, 0x20, 0x4C, 0x48, 0x48, 0x44, 0x48, 0x08, 0x0C, 0x00, // 64
    0x00, 0x80, 0xF0, 0x1C, 0x1C, 0xF0, 0x80, 0x00, 0x10, 0x1C, 0x04, 0x04, 0x04, 0x04, 0x1C, 0x10, // 65
    0xFC, 0x44, 0x44, 0x44, 0x78, 0x80, 0x1C, 0x10, 0x10, 0x10, 0x10, 0x0C, // 66
    0xF0, 0x08, 0x04, 0x04, 0x04, 0x08, 0x04, 0x08, 0x10, 0x10, 0x10, 0x08, // 67
    0xFC, 0x04, 0x04, 0x04, 0x04, 0x08, 0xF0, 0x1C, 0x10, 0x10, 0x10, 0x10, 0x08, 0x04, // 68
    0xFC, 0x44, 0x44, 0x44, 0x04, 0x1C, 0x10, 0x10, 0x10, 0x10, // 69
    0xFC, 0x44, 0x44, 0x44, 0x44, 0x1C, 0x00, 0x00, 0x00, 0x00, // 70
    0xF0, 0x08, 0x04, 0x04, 0x44, 0x44, 0xC8, 0x04, 0x0C, 0x10, 0x10, 0x10, 0x10, 0x1C, // 71
    0xFC, 0x40, 0x40, 0x40, 0x40, 0xFC, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x1C, // 72
    0xFC, 0x1C, // 73
    0x00, 0x00, 0xFC, 0x10, 0x10, 0x0C, // 74
    0xFC, 0x40, 0xB0, 0x18, 0x04, 0x1C, 0x00, 0x00, 0x0C, 0x18, // 75
    0xFC, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x10, 0x10, 0x10, 0x10, // 76
    0xFC, 0x0C, 0x30, 0xC0, 0x00, 0x00, 0xC0, 0x30, 0x0C, 0xFC, 0x1C, 0x00, 0x00, 0x04, 0x1C, 0x1C, 0x04, 0x00, 0x00, 0x1C, // 77
    0xFC, 0x0C, 0x30, 0x60, 0x80, 0x00, 0xFC, 0x1C, 0x00, 0x00, 0x00, 0x04, 0x1C, 0x1C, // 78
    0xF0, 0x08, 0x04, 0x04, 0x04, 0x04, 0x08, 0xF0, 0x04, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, 0x04, // 79
    0xFC, 0x84, 0x84, 0xC4, 0x78, 0x1C, 0x00, 0x00, 0x00, 0x00, // 80
    0xF0, 0x08, 0x04, 0x04, 0x04, 0x04, 0x08, 0xF0, 0x04, 0x08, 0x10, 0x10, 0x10, 0x10, 0x18, 0x34, // 81
    0xFC, 0x44, 0x44, 0xC4, 0x38, 0x00, 0x1C, 0x00, 0x00, 0x04, 0x1C, 0x10, // 82
    0x38, 0x24, 0x44, 0xC4, 0x88, 0x08, 0x10, 0x10, 0x10, 0x0C, // 83
    0x04, 0x04, 0x04, 0xFC, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, // 84
    0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x0C, 0x18, 0x10, 0x10, 0x10, 0x08, 0x0C, // 85
    0x04, 0x3C, 0xE0, 0x00, 0x00, 0xE0, 0x3C, 0x04, 0x00, 0x00, 0x04, 0x1C, 0x1C, 0x04, 0x00, 0x00, // 86
    0x04, 0x3C, 0xE0, 0x00, 0xC0, 0x7C, 0x1C, 0xE0, 0x00, 0x80, 0xF0, 0x0C, 0x00, 0x00, 0x0C, 0x18, 0x0C, 0x00, 0x00, 0x04, 0x1C, 0x1C, 0x00, 0x00, // 87
    0x00, 0x0C, 0xB8, 0x60, 0xB0, 0x1C, 0x04, 0x10, 0x18, 0x04, 0x00, 0x04, 0x1C, 0x10, // 88
    0x0C, 0x30, 0xC0, 0x30, 0x0C, 0x00, 0x00, 0x1C, 0x00, 0x00, // 89
    0x04, 0x04, 0x84, 0x64, 0x3C, 0x0C, 0x10, 0x1C, 0x14, 0x10, 0x10, 0x10, // 90
    0xFE, 0x02, 0x02, 0x7C, 0x40, 0x40, // 91
    0x02, 0x1C, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x70, // 92
    0x02, 0xFE, 0x40, 0x7C, // 93
    0x60, 0x18, 0x04, 0x38, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, // 95
    0x02, 0x04, 0x00, 0x00, // 96
    0x20, 0x90, 0x90, 0x90, 0xE0, 0x0C, 0x10, 0x10, 0x10, 0x1C, // 97
    0xFE, 0x20, 0x10, 0x10, 0x30, 0xE0, 0x1C, 0x08, 0x10, 0x10, 0x18, 0x0C, // 98
    0xE0, 0x30, 0x10, 0x10, 0x20, 0x0C, 0x18, 0x10, 0x10, 0x08, // 99
    0xE0, 0x30, 0x10, 0x10, 0x20, 0xFE, 0x0C, 0x18, 0x10, 0x10, 0x08, 0x1C, // 100
    0xE0, 0xB0, 0x90, 0x90, 0xB0, 0xE0, 0x0C, 0x18, 0x10, 0x10, 0x10, 0x10, // 101
    0x10, 0xFC, 0x12, 0x12, 0x00, 0x1C, 0x00, 0x00, // 102
    0xE0, 0x10, 0x10, 0x10, 0xF0, 0x10, 0x6C, 0x94, 0x94, 0x94, 0x90, 0x60, // 103
    0xFE, 0x20, 0x10, 0x10, 0xE0, 0x1C, 0x00, 0x00, 0x00, 0x1C, // 104
    0xF4, 0x1C, // 105
    0x00, 0xF4, 0x80, 0xFC, // 106
    0xFE, 0xC0, 0x60, 0x30, 0x10, 0x1C, 0x00, 0x04, 0x18, 0x10, // 107
    0xFE, 0x1C, // 108
    0xF0, 0x20, 0x10, 0x10, 0xE0, 0x20, 0x10, 0x10, 0xE0, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, // 109
    0xF0, 0x20, 0x10, 0x10, 0xE0, 0x1C, 0x00, 0x00, 0x00, 0x1C, // 110
    0xE0, 0x30, 0x10, 0x10, 0x30, 0xE0, 0x0C, 0x18, 0x10, 0x10, 0x18, 0x0C, // 111
    0xF0, 0x20, 0x10, 0x10, 0x30, 0xE0, 0xFC, 0x08, 0x10, 0x10, 0x18, 0x0C, // 112
    0xE0, 0x30, 0x10, 0x10, 0x20, 0xF0, 0x0C, 0x18, 0x10, 0x10, 0x08, 0xFC, // 113
    0xF0, 0x20, 0x10, 0x10, 0x1C, 0x00, 0x00, 0x00, // 114
    0x60, 0x90, 0x90, 0x10, 0x10, 0x10, 0x10, 0x0C, // 115
    0x10, 0xFC, 0x10, 0x10, 0x00, 0x1C, 0x10, 0x10, // 116
    0xF0, 0x00, 0x00, 0x00, 0xF0, 0x0C, 0x10, 0x10, 0x08, 0x1C, // 117
    0x30, 0xE0, 0x00, 0x00, 0xE0, 0x10, 0x00, 0x04, 0x1C, 0x1C, 0x00, 0x00, // 118
    0x10, 0xF0, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0x00, 0xF0, 0x10, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, // 119
    0x00, 0x30, 0xC0, 0xC0, 0x30, 0x10, 0x10, 0x18, 0x04, 0x04, 0x18, 0x10, // 120
    0x10, 0xF0, 0x80, 0x00, 0xC0, 0x30, 0x00, 0x00, 0xDC, 0x38, 0x04, 0x00, // 121
    0x10, 0x90, 0x70, 0x30, 0x18, 0x14, 0x10, 0x10, // 122
    0x40, 0xBE, 0x02, 0x00, 0x7C, 0x40, // 123
    0xFE, 0xFC, // 124
    0x02, 0xBE, 0x40, 0x40, 0x7C, 0x00, // 125
    0x30, 0x08, 0x18, 0x20, 0x20, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 126
    0xFC, 0x04, 0x14, 0x54, 0x74, 0x04, 0xFC, 0x1C, 0x10, 0x10, 0x14, 0x10, 0x10, 0x1C // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Callibri15.h ===

/*
 *
 * Callibri15
 *
 * created with GLCDFontCreator
 * original framework by F. Maximilian Thiele
 * Modified By Siddharth Kaul
 *
 *
 * File Name           : Callibri15.h
 * Date                : 10.11.2012
 * Font size in bytes  : 8277
 * Font width          : 10
 * Font height         : 15
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef _Callibri15_H
#define _Callibri15_H

#define Callibri15_WIDTH 10
#define Callibri15_HEIGHT 15

GLCDFONTDECL(Callibri15) = {
    0x20, 0x55, // size
    0x0A, // width
    0x0F, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x02, 0x01, 0x04, 0x08, 0x06, 0x0A, 0x09, 0x01, 0x03, 0x03, 
    0x05, 0x07, 0x02, 0x03, 0x01, 0x06, 0x06, 0x05, 0x06, 0x06, 
    0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x01, 0x02, 0x06, 0x07, 
    0x06, 0x05, 0x0C, 0x09, 0x07, 0x08, 0x08, 0x06, 0x05, 0x08, 
    0x08, 0x01, 0x04, 0x06, 0x06, 0x0B, 0x08, 0x09, 0x06, 0x0A, 
    0x07, 0x05, 0x07, 0x08, 0x09, 0x0B, 0x08, 0x07, 0x07, 0x03, 
    0x06, 0x03, 0x07, 0x08, 0x03, 0x06, 0x06, 0x05, 0x06, 0x06, 
    0x04, 0x07, 0x06, 0x01, 0x02, 0x05, 0x01, 0x09, 0x06, 0x06, 
    0x06, 0x06, 0x04, 0x05, 0x04, 0x06, 0x05, 0x09, 0x05, 0x05, 
    0x04, 0x04, 0x01, 0x04, 0x07, 0x08, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, // 0x20 <space>
    0xFE, 0x1A, // 33
    0x1E, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, // 34
    0x20, 0xA0, 0x7C, 0x20, 0x20, 0xA0, 0x7C, 0x20, 0x02, 0x1E, 0x02, 0x02, 0x02, 0x1E, 0x02, 0x02, // 35
    0x38, 0x44, 0x44, 0x87, 0x84, 0x08, 0x08, 0x10, 0x70, 0x10, 0x10, 0x0E, // 36
    0x38, 0x44, 0x44, 0x38, 0x80, 0x60, 0x10, 0x8C, 0x80, 0x00, 0x00, 0x00, 0x18, 0x04, 0x02, 0x00, 0x0E, 0x10, 0x10, 0x0E, // 37
    0x80, 0x5C, 0x22, 0x62, 0x92, 0x0C, 0x00, 0xC0, 0x00, 0x0E, 0x10, 0x10, 0x10, 0x10, 0x0A, 0x04, 0x0A, 0x10, // 38
    0x1E, 0x00, // 39
    0xF0, 0x0C, 0x02, 0x1E, 0x60, 0x80, // 40
    0x02, 0x0C, 0xF0, 0x80, 0x60, 0x1E, // 41
    0x24, 0x18, 0x7E, 0x18, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, // 42
    0x80, 0x80, 0x80, 0xF0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, // 43
    0x00, 0x00, 0x40, 0x38, // 44
    0x00, 0x00, 0x00, 0x02, 0x02, 0x02, // 45
    0x00, 0x18, // 46
    0x00, 0x00, 0x80, 0x60, 0x18, 0x06, 0x60, 0x18, 0x06, 0x00, 0x00, 0x00, // 47
    0xF8, 0x04, 0x04, 0x04, 0x04, 0xF8, 0x0E, 0x10, 0x10, 0x10, 0x10, 0x0E, // 48
    0x10, 0x08, 0xFC, 0x00, 0x00, 0x10, 0x10, 0x1E, 0x10, 0x10, // 49
    0x08, 0x04, 0x04, 0x04, 0xC4, 0x38, 0x10, 0x18, 0x14, 0x12, 0x10, 0x10, // 50
    0x08, 0x44, 0x44, 0x44, 0x44, 0xB8, 0x08, 0x10, 0x10, 0x10, 0x10, 0x0E, // 51
    0x00, 0xC0, 0x30, 0x0C, 0xFC, 0x00, 0x06, 0x04, 0x04, 0x04, 0x1E, 0x04, // 52
    0x00, 0x7C, 0x44, 0x44, 0x44, 0x84, 0x08, 0x10, 0x10, 0x10, 0x10, 0x0E, // 53
    0xF0, 0x88, 0x44, 0x44, 0x44, 0x84, 0x0E, 0x10, 0x10, 0x10, 0x10, 0x0E, // 54
    0x04, 0x04, 0x04, 0xC4, 0x34, 0x0C, 0x00, 0x10, 0x0C, 0x02, 0x00, 0x00, // 55
    0xB8, 0x44, 0x44, 0x44, 0x44, 0xB8, 0x0E, 0x10, 0x10, 0x10, 0x10, 0x0E, // 56
    0x78, 0x84, 0x84, 0x84, 0x44, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x08, 0x06, // 57
    0x60, 0x18, // 58
    0x00, 0x60, 0x40, 0x38, // 59
    0x80, 0x40, 0x40, 0x20, 0x20, 0x10, 0x00, 0x02, 0x02, 0x04, 0x04, 0x08, // 60
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, // 61
    0x10, 0x20, 0x20, 0x40, 0x40, 0x80, 0x08, 0x04, 0x04, 0x02, 0x02, 0x00, // 62
    0x04, 0x02, 0xC2, 0x42, 0x3C, 0x00, 0x00, 0x1A, 0x00, 0x00, // 63
    0xC0, 0x30, 0x08, 0x88, 0x44, 0x24, 0x24, 0x44, 0xE4, 0x04, 0x08, 0xF0, 0x0E, 0x30, 0x20, 0x46, 0x48, 0x48, 0x44, 0x46, 0x48, 0x08, 0x04, 0x02, // 64
    0x00, 0x00, 0xC0, 0x30, 0x0C, 0x30, 0xC0, 0x00, 0x00, 0x18, 0x06, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x18, // 65
    0xFC, 0x44, 0x44, 0x44, 0x44, 0xB8, 0x00, 0x1E, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0E, // 66
    0xF0, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0x06, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, // 67
    0xFC, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0xF0, 0x1E, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x06, // 68
    0xFC, 0x44, 0x44, 0x44, 0x44, 0x04, 0x1E, 0x10, 0x10, 0x10, 0x10, 0x10, // 69
    0xFC, 0x44, 0x44, 0x44, 0x44, 0x1E, 0x00, 0x00, 0x00, 0x00, // 70
    0xF0, 0x08, 0x04, 0x04, 0x84, 0x84, 0x84, 0x88, 0x06, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0E, // 71
    0xFC, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xFC, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, // 72
    0xFC, 0x1E, // 73
    0x00, 0x00, 0x00, 0xFC, 0x10, 0x10, 0x10, 0x0E, // 74
    0xFC, 0x40, 0xA0, 0x10, 0x08, 0x04, 0x1E, 0x00, 0x00, 0x06, 0x08, 0x10, // 75
    0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x10, 0x10, 0x10, 0x10, 0x10, // 76
    0xFC, 0x0C, 0x30, 0xC0, 0x00, 0x00, 0x00, 0xC0, 0x30, 0x0C, 0xFC, 0x1E, 0x00, 0x00, 0x00, 0x06, 0x18, 0x06, 0x00, 0x00, 0x00, 0x1E, // 77
    0xFC, 0x04, 0x18, 0x60, 0x80, 0x00, 0x00, 0xFC, 0x1E, 0x00, 0x00, 0x00, 0x02, 0x0C, 0x10, 0x1E, // 78
    0xF0, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0xF0, 0x06, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x06, // 79
    0xFC, 0x84, 0x84, 0x84, 0x84, 0x78, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, // 80
    0xF0, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0xF0, 0x00, 0x06, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x18, 0x26, 0x20, // 81
    0xFC, 0x84, 0x84, 0x84, 0x84, 0x78, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x02, 0x0C, 0x10, // 82
    0x38, 0x44, 0x44, 0x84, 0x08, 0x08, 0x10, 0x10, 0x10, 0x0E, // 83
    0x04, 0x04, 0x04, 0xFC, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, // 84
    0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x06, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, 0x06, // 85
    0x0C, 0x30, 0xC0, 0x00, 0x00, 0x00, 0xC0, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x06, 0x18, 0x06, 0x00, 0x00, 0x00, // 86
    0x1C, 0xE0, 0x00, 0x00, 0xE0, 0x1C, 0xE0, 0x00, 0x00, 0xE0, 0x1C, 0x00, 0x02, 0x1C, 0x06, 0x00, 0x00, 0x00, 0x06, 0x1C, 0x02, 0x00, // 87
    0x04, 0x08, 0x30, 0xC0, 0xC0, 0x30, 0x08, 0x04, 0x10, 0x08, 0x06, 0x00, 0x00, 0x06, 0x08, 0x10, // 88
    0x04, 0x18, 0x60, 0x80, 0x60, 0x18, 0x04, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, // 89
    0x04, 0x04, 0x04, 0xC4, 0x24, 0x14, 0x0C, 0x18, 0x14, 0x12, 0x10, 0x10, 0x10, 0x10, // 90
    0xFE, 0x02, 0x02, 0xFE, 0x80, 0x80, // 91
    0x06, 0x18, 0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x18, 0x60, // 92
    0x02, 0x02, 0xFE, 0x80, 0x80, 0xFE, // 93
    0x80, 0x60, 0x18, 0x04, 0x18, 0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, // 95
    0x02, 0x04, 0x08, 0x00, 0x00, 0x00, // 96
    0x40, 0x20, 0x20, 0x20, 0x20, 0xC0, 0x0C, 0x12, 0x12, 0x12, 0x0A, 0x1E, // 97
    0xFE, 0x40, 0x20, 0x20, 0x20, 0xC0, 0x1E, 0x08, 0x10, 0x10, 0x10, 0x0E, // 98
    0xC0, 0x20, 0x20, 0x20, 0x40, 0x0E, 0x10, 0x10, 0x10, 0x08, // 99
    0xC0, 0x20, 0x20, 0x20, 0x40, 0xFE, 0x0E, 0x10, 0x10, 0x10, 0x08, 0x1E, // 100
    0xC0, 0x20, 0x20, 0x20, 0x20, 0xC0, 0x0E, 0x12, 0x12, 0x12, 0x12, 0x12, // 101
    0x20, 0xFC, 0x22, 0x22, 0x00, 0x1E, 0x00, 0x00, // 102
    0xC0, 0x20, 0x20, 0x20, 0x20, 0xE0, 0x20, 0x6A, 0x94, 0x94, 0x94, 0x94, 0x92, 0x60, // 103
    0xFE, 0x40, 0x20, 0x20, 0x20, 0xC0, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x1E, // 104
    0xE8, 0x1E, // 105
    0x00, 0xE8, 0x80, 0x7E, // 106
    0xFE, 0x00, 0x80, 0x40, 0x20, 0x1E, 0x02, 0x04, 0x08, 0x10, // 107
    0xFE, 0x1E, // 108
    0xE0, 0x40, 0x20, 0x20, 0xC0, 0x40, 0x20, 0x20, 0xC0, 0x1E, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x1E, // 109
    0xE0, 0x40, 0x20, 0x20, 0x20, 0xC0, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x1E, // 110
    0xC0, 0x20, 0x20, 0x20, 0x20, 0xC0, 0x0E, 0x10, 0x10, 0x10, 0x10, 0x0E, // 111
    0xE0, 0x40, 0x20, 0x20, 0x20, 0xC0, 0xFE, 0x08, 0x10, 0x10, 0x10, 0x0E, // 112
    0xC0, 0x20, 0x20, 0x20, 0x40, 0xE0, 0x0E, 0x10, 0x10, 0x10, 0x08, 0xFE, // 113
    0xE0, 0x40, 0x20, 0x20, 0x1E, 0x00, 0x00, 0x00, // 114
    0xC0, 0x20, 0x20, 0x20, 0x20, 0x10, 0x12, 0x12, 0x12, 0x0C, // 115
    0x20, 0xF8, 0x20, 0x20, 0x00, 0x0E, 0x10, 0x10, // 116
    0xE0, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x0E, 0x10, 0x10, 0x10, 0x08, 0x1E, // 117
    0x60, 0x80, 0x00, 0x80, 0x60, 0x00, 0x06, 0x18, 0x06, 0x00, // 118
    0x60, 0x80, 0x00, 0x80, 0x60, 0x80, 0x00, 0x80, 0x60, 0x00, 0x06, 0x18, 0x06, 0x00, 0x06, 0x18, 0x06, 0x00, // 119
    0x20, 0xC0, 0x00, 0xC0, 0x20, 0x10, 0x0C, 0x02, 0x0C, 0x10, // 120
    0x60, 0x80, 0x00, 0x80, 0x60, 0x00, 0xC6, 0x38, 0x06, 0x00, // 121
    0x20, 0x20, 0xA0, 0x60, 0x18, 0x16, 0x10, 0x10, // 122
    0x80, 0x7C, 0x02, 0x02, 0x00, 0x7E, 0x80, 0x80, // 123
    0xFE, 0xFE, // 124
    0x02, 0x02, 0x7C, 0x80, 0x80, 0x80, 0x7E, 0x00, // 125
    0x30, 0x08, 0x08, 0x10, 0x20, 0x20, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 126
    0xFC, 0x04, 0x14, 0x94, 0x94, 0x64, 0x04, 0xFC, 0x1E, 0x10, 0x10, 0x14, 0x10, 0x10, 0x10, 0x1E // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\CalLite24.h ===

/*
 *
 * CalLite24 Font
 *
 * Copyright (C) 2010 by Integrated Mapping Ltd
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : CalLite24.h
 * Date                : 21.11.2010
 * Font size in bytes  : 27002
 * Font width          : 10
 * Font height         : 25
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef _CalLite24_H
#define _CalLite24_H

#define CalLite24_WIDTH 10
#define CalLite24_HEIGHT 25

GLCDFONTDECL(CalLite24) = {
    0x69, 0x7A, // size
    0x15, // width
    0x19, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x07, 0x03, 0x07, 0x0F, 0x0C, 0x16, 0x10, 0x02, 0x07, 0x07, 
    0x0B, 0x0F, 0x04, 0x07, 0x03, 0x0A, 0x0C, 0x0A, 0x0C, 0x0B, 
    0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x03, 0x04, 0x0D, 0x0E, 
    0x0E, 0x0A, 0x14, 0x10, 0x0D, 0x0F, 0x0F, 0x0C, 0x0B, 0x10, 
    0x0E, 0x06, 0x08, 0x0E, 0x0B, 0x10, 0x0E, 0x11, 0x0C, 0x11, 
    0x0E, 0x0D, 0x0F, 0x0D, 0x0F, 0x15, 0x0E, 0x0D, 0x0E, 0x06, 
    0x0A, 0x06, 0x0E, 0x0F, 0x04, 0x0B, 0x0C, 0x0B, 0x0C, 0x0C, 
    0x07, 0x0C, 0x0B, 0x03, 0x06, 0x0C, 0x02, 0x13, 0x0B, 0x0C, 
    0x0C, 0x0C, 0x08, 0x0A, 0x08, 0x0B, 0x0C, 0x11, 0x0C, 0x0C, 
    0x0B, 0x0B, 0x02, 0x0B, 0x0F, 0x00, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 32
    0x38, 0xF8, 0xF8, 0x00, 0x7F, 0x7F, 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x00, // 33
    0xFC, 0xFC, 0x00, 0x00, 0x00, 0xFC, 0xFC, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 34
    0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xF0, 0xB8, 0x80, 0x80, 0x80, 0xF8, 0x98, 0x80, 0x80, 0x40, 0x60, 0x61, 0x61, 0xF1, 0x7F, 0x43, 0x41, 0xE1, 0xF9, 0x7F, 0x61, 0x61, 0x61, 0x01, 0x00, 0x00, 0x00, 0x0F, 0x03, 0x00, 0x00, 0x08, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 35
    0x80, 0xC0, 0xE0, 0x60, 0x60, 0xFC, 0x60, 0x60, 0x60, 0x60, 0xE0, 0x00, 0x07, 0x0F, 0x1C, 0x18, 0x18, 0xFF, 0x38, 0x30, 0x30, 0xE0, 0xE0, 0x80, 0x06, 0x0E, 0x0C, 0x0C, 0x0C, 0xFF, 0x0C, 0x0C, 0x06, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 36
    0xF0, 0xF8, 0x18, 0x0C, 0x0C, 0x1C, 0xF8, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0x38, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x0C, 0x08, 0x08, 0x0C, 0x0F, 0x07, 0xC0, 0xF0, 0x3C, 0x0F, 0x03, 0x00, 0xF8, 0xF8, 0x0C, 0x0C, 0x0C, 0x1C, 0xF8, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x0C, 0x08, 0x0C, 0x0C, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 37
    0x00, 0x60, 0xF8, 0xF8, 0x0C, 0x0C, 0x0C, 0x0C, 0xF8, 0xF8, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xF9, 0x0F, 0x07, 0x06, 0x0E, 0x1B, 0x31, 0x71, 0xE0, 0xC0, 0xFC, 0x3C, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x06, 0x07, 0x03, 0x03, 0x07, 0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 38
    0xFC, 0xFC, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // 39
    0x00, 0x80, 0xE0, 0x78, 0x1C, 0x0C, 0x04, 0xFC, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0F, 0x3F, 0x78, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, // 40
    0x04, 0x0C, 0x1C, 0x78, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0xFF, 0xFC, 0x00, 0x80, 0xE0, 0x78, 0x3F, 0x0F, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, // 41
    0x10, 0x30, 0x20, 0x60, 0xC0, 0xFC, 0xC0, 0x60, 0x20, 0x30, 0x10, 0x02, 0x02, 0x03, 0x01, 0x01, 0x1F, 0x01, 0x01, 0x03, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 42
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 43
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFC, 0x3E, 0x0E, 0x00, 0x00, 0x00, 0x00, // 44
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 45
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x0E, 0x0E, 0x00, 0x00, 0x00, // 46
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF8, 0x3C, 0x04, 0x00, 0x00, 0x00, 0xC0, 0xF8, 0x3F, 0x07, 0x00, 0x00, 0x00, 0xE0, 0x78, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 47
    0xC0, 0xF0, 0x78, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x38, 0xF0, 0xE0, 0x80, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE1, 0xFF, 0x3F, 0x01, 0x07, 0x07, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 48
    0x00, 0x60, 0x60, 0x70, 0xF8, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0x0F, 0x0F, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 49
    0x00, 0x18, 0x18, 0x0C, 0x0C, 0x0C, 0x1C, 0x18, 0x78, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0x70, 0x38, 0x1C, 0x0F, 0x07, 0x01, 0x00, 0x0E, 0x0F, 0x0F, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 50
    0x00, 0x18, 0x18, 0x1C, 0x0C, 0x0C, 0x0C, 0x1C, 0x38, 0xF8, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0E, 0x0E, 0x0E, 0x1B, 0xF9, 0xF0, 0x06, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 51
    0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0x60, 0x30, 0xF8, 0xF8, 0xF8, 0x00, 0x00, 0x70, 0x78, 0x6E, 0x67, 0x63, 0x61, 0x60, 0x60, 0xFF, 0xFF, 0xFF, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 52
    0x00, 0xF8, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x07, 0x07, 0x06, 0x06, 0x06, 0x06, 0x0E, 0x0C, 0xFC, 0xF8, 0xE0, 0x06, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 53
    0x80, 0xE0, 0xF0, 0x30, 0x18, 0x18, 0x08, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0xFF, 0xFF, 0x0C, 0x06, 0x06, 0x06, 0x06, 0x06, 0x0E, 0xBC, 0xF8, 0xF0, 0x01, 0x03, 0x07, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 54
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x98, 0xF8, 0x78, 0x38, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0x78, 0x1E, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 55
    0xE0, 0xF0, 0xB8, 0x1C, 0x0C, 0x0C, 0x0C, 0x0C, 0x18, 0xF8, 0xF0, 0x00, 0xF1, 0xF3, 0x1F, 0x0E, 0x06, 0x0C, 0x0C, 0x1C, 0x1E, 0xF3, 0xF1, 0xC0, 0x03, 0x07, 0x0E, 0x0C, 0x0C, 0x08, 0x08, 0x0C, 0x0C, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 56
    0x80, 0xE0, 0xF0, 0x18, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x38, 0xF0, 0xE0, 0xC0, 0x01, 0x0F, 0x1F, 0x18, 0x38, 0x30, 0x30, 0x30, 0x10, 0x98, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x06, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 57
    0x80, 0x80, 0x80, 0x03, 0x03, 0x03, 0x0E, 0x0E, 0x0E, 0x00, 0x00, 0x00, // 58
    0x00, 0x80, 0x80, 0x80, 0x00, 0x03, 0x03, 0x03, 0xE0, 0xFC, 0x3E, 0x06, 0x00, 0x00, 0x00, 0x00, // 59
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xC0, 0x18, 0x38, 0x38, 0x6C, 0x6C, 0xC6, 0xC6, 0xC3, 0x83, 0x81, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 60
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 61
    0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x83, 0x83, 0xC3, 0xC6, 0x66, 0x6C, 0x3C, 0x38, 0x38, 0x10, 0x06, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 62
    0x18, 0x18, 0x0C, 0x0C, 0x0C, 0x1C, 0x18, 0xF8, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x78, 0x78, 0x0C, 0x0E, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 63
    0x00, 0x80, 0xC0, 0x60, 0x30, 0x18, 0x18, 0x88, 0x88, 0x8C, 0x8C, 0x8C, 0x88, 0x88, 0x18, 0x30, 0x70, 0xE0, 0x80, 0x00, 0x7C, 0xFF, 0x01, 0x00, 0x00, 0xFC, 0xFF, 0x83, 0x01, 0x01, 0x01, 0x01, 0x81, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x7C, 0x00, 0x03, 0x07, 0x0C, 0x18, 0x30, 0x31, 0x23, 0x23, 0x63, 0x63, 0x63, 0x61, 0x23, 0x03, 0x02, 0x02, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 64
    0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF8, 0x38, 0x38, 0xF8, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF8, 0x7F, 0x6F, 0x61, 0x60, 0x60, 0x60, 0x67, 0x7F, 0xFC, 0xE0, 0x00, 0x00, 0x08, 0x0E, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0F, 0x0F, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 65
    0xF8, 0xF8, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xB8, 0xF0, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x0E, 0x0F, 0x1D, 0xF8, 0xF0, 0x0F, 0x0F, 0x0F, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x06, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 66
    0x00, 0x80, 0xE0, 0xF0, 0x38, 0x18, 0x18, 0x0C, 0x0C, 0x0C, 0x1C, 0x18, 0x18, 0x38, 0x30, 0x1E, 0xFF, 0xF3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x07, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 67
    0xF8, 0xF8, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x30, 0x70, 0xE0, 0xC0, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xF3, 0xFF, 0x3F, 0x0F, 0x0F, 0x0F, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x06, 0x07, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 68
    0xF8, 0xF8, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0xFF, 0xFF, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x0F, 0x0F, 0x0F, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 69
    0xF8, 0xF8, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0xFF, 0xFF, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 70
    0x00, 0x80, 0xE0, 0xF0, 0x30, 0x18, 0x18, 0x08, 0x0C, 0x0C, 0x0C, 0x0C, 0x18, 0x18, 0x38, 0x30, 0x1E, 0xFF, 0xF3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x38, 0xF8, 0xF8, 0x00, 0x00, 0x03, 0x03, 0x07, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 71
    0xF8, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0xF8, 0xFF, 0xFF, 0xFF, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 72
    0x08, 0x08, 0xF8, 0xF8, 0x08, 0x08, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x0C, 0x0C, 0x0F, 0x0F, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 73
    0x00, 0x00, 0x08, 0x08, 0x08, 0xF8, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x07, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 74
    0xF8, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0x70, 0x38, 0x18, 0x08, 0x00, 0xFF, 0xFF, 0xFF, 0x1C, 0x1E, 0x1F, 0x7F, 0xF1, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0E, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 75
    0xF8, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 76
    0xF8, 0xF8, 0xF8, 0x78, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0x78, 0x38, 0xF8, 0xF8, 0xFF, 0xFF, 0xFF, 0x00, 0x01, 0x07, 0x1E, 0x78, 0x70, 0x3E, 0x07, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 77
    0xF8, 0xF8, 0xF8, 0x38, 0xF0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0xF8, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0x0F, 0x3E, 0xF8, 0xE0, 0x80, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 78
    0x00, 0xC0, 0xE0, 0xF0, 0x38, 0x18, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x18, 0x38, 0xF0, 0xE0, 0x80, 0x00, 0x1E, 0xFF, 0xF3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xF3, 0xFF, 0x3E, 0x00, 0x00, 0x03, 0x07, 0x06, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x06, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 79
    0xF8, 0xF8, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x38, 0x70, 0xE0, 0xC0, 0xFF, 0xFF, 0xFF, 0x10, 0x10, 0x18, 0x18, 0x18, 0x1C, 0x0E, 0x07, 0x03, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 80
    0x00, 0xC0, 0xE0, 0xF0, 0x38, 0x18, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x18, 0x38, 0xF0, 0xE0, 0x80, 0x00, 0x1E, 0xFF, 0xF3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE7, 0xFF, 0x1E, 0x00, 0x00, 0x03, 0x07, 0x06, 0x0E, 0x0C, 0x0C, 0x0C, 0x1C, 0x7C, 0xFE, 0xC6, 0xC7, 0x83, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, // 81
    0xF8, 0xF8, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0xF0, 0xC0, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x18, 0x18, 0x18, 0x38, 0x78, 0xEC, 0xC7, 0x87, 0x01, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x0F, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 82
    0xE0, 0xF0, 0x38, 0x18, 0x1C, 0x0C, 0x0C, 0x0C, 0x1C, 0x18, 0x18, 0x18, 0x00, 0x03, 0x07, 0x07, 0x0E, 0x0C, 0x0C, 0x0C, 0x1C, 0x1C, 0x18, 0x78, 0xF0, 0xE0, 0x06, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 83
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0xF8, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 84
    0xF8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x03, 0x07, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x07, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 85
    0x38, 0xF8, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF8, 0x78, 0x08, 0x00, 0x01, 0x07, 0x3F, 0xFC, 0xE0, 0x00, 0x00, 0xC0, 0xF0, 0x7E, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0F, 0x0F, 0x0E, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 86
    0x08, 0xF8, 0xF8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x78, 0xF8, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF8, 0x78, 0x00, 0x00, 0x0F, 0x7F, 0xF8, 0x80, 0x00, 0xF0, 0x7F, 0x07, 0x00, 0x00, 0x0F, 0xFF, 0xF0, 0x00, 0xC0, 0xFC, 0x7F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 87
    0x00, 0x18, 0x38, 0xF0, 0xE0, 0x80, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0x78, 0x38, 0x18, 0x00, 0x00, 0x00, 0x80, 0xE1, 0x77, 0x3F, 0x1E, 0x7F, 0xF3, 0xC0, 0x80, 0x00, 0x00, 0x08, 0x0C, 0x0F, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 88
    0x18, 0x78, 0xF0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0x38, 0x08, 0x00, 0x00, 0x00, 0x03, 0x07, 0xFE, 0xFC, 0xFE, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 89
    0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x98, 0xF8, 0xF8, 0x38, 0x18, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0x70, 0x3C, 0x0E, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x0C, 0x0E, 0x0F, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 90
    0xFC, 0xFC, 0x04, 0x04, 0x04, 0x04, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, // 91
    0x0C, 0x3C, 0xF8, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x3E, 0xF8, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3F, 0x78, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 92
    0x04, 0x04, 0x04, 0x04, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, // 93
    0x00, 0x00, 0x80, 0xC0, 0xE0, 0x38, 0x18, 0x38, 0x70, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x0C, 0x0E, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 95
    0x03, 0x0F, 0x1C, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 96
    0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x80, 0xE1, 0xE1, 0x31, 0x31, 0x31, 0x11, 0x19, 0x19, 0xFF, 0xFF, 0x03, 0x07, 0x0F, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x06, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 97
    0xFC, 0xFC, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x8F, 0xFE, 0xF8, 0x0F, 0x0F, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 98
    0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0xF8, 0xFE, 0x8F, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x03, 0x07, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 99
    0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0xFC, 0xFC, 0xF8, 0xFE, 0x8F, 0x03, 0x01, 0x00, 0x00, 0x01, 0x01, 0x03, 0xFF, 0xFF, 0x00, 0x03, 0x07, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x06, 0x06, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 100
    0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x78, 0xFE, 0xFF, 0x33, 0x31, 0x31, 0x30, 0x31, 0x31, 0x33, 0x3F, 0x3C, 0x00, 0x03, 0x07, 0x06, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 101
    0x80, 0xE0, 0xF8, 0xBC, 0x8C, 0x8C, 0x8C, 0x01, 0xFF, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 102
    0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x78, 0xFE, 0xCF, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0xFF, 0xFE, 0x00, 0x03, 0xC7, 0x86, 0x8E, 0x8C, 0x8C, 0x86, 0xC6, 0xF7, 0x7F, 0x0F, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, // 103
    0xFC, 0xFC, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0xFF, 0xFF, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x03, 0xFF, 0xFE, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 104
    0x9C, 0x9C, 0x00, 0xFF, 0xFF, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, // 105
    0x00, 0x80, 0x80, 0x80, 0x9C, 0x9C, 0x00, 0x01, 0x01, 0x01, 0xFF, 0xFF, 0x80, 0x80, 0x80, 0xC0, 0xFF, 0x7F, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, // 106
    0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xFF, 0xFF, 0xE0, 0x70, 0x78, 0xFC, 0xCE, 0x87, 0x03, 0x01, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0E, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 107
    0xFC, 0xFC, 0xFF, 0xFF, 0x0F, 0x0F, 0x00, 0x00, // 108
    0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0xFF, 0xFF, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x07, 0xFF, 0xFF, 0x03, 0x01, 0x01, 0x01, 0x01, 0x03, 0xFF, 0xFF, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 109
    0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0xFF, 0xFF, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x03, 0xFF, 0xFE, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 110
    0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0xF8, 0xFE, 0x8F, 0x03, 0x01, 0x00, 0x00, 0x01, 0x01, 0x07, 0xFF, 0xFC, 0x00, 0x03, 0x07, 0x0E, 0x1C, 0x18, 0x18, 0x1C, 0x0C, 0x07, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 111
    0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x8F, 0xFE, 0x78, 0xFF, 0xFF, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x06, 0x07, 0x01, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 112
    0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x78, 0xFE, 0xCF, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0xFF, 0xFF, 0x00, 0x03, 0x07, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x06, 0x07, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, // 113
    0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0x07, 0x03, 0x01, 0x01, 0x01, 0x01, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 114
    0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x1F, 0x3F, 0x31, 0x31, 0x71, 0x61, 0x61, 0xE1, 0xC3, 0x06, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 115
    0x80, 0xF8, 0xF8, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01, 0xFF, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x03, 0x07, 0x0F, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 116
    0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x07, 0x0F, 0x0C, 0x0C, 0x0C, 0x0C, 0x06, 0x06, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 117
    0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x01, 0x07, 0x3F, 0xF8, 0xE0, 0x00, 0x00, 0xC0, 0xF8, 0x3E, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 118
    0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x01, 0x1F, 0xFF, 0xF0, 0x00, 0x80, 0xF8, 0x3F, 0x07, 0x0F, 0x7E, 0xF0, 0x80, 0x80, 0xF8, 0x7F, 0x07, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 119
    0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x01, 0x03, 0x8F, 0xDC, 0xF8, 0xF8, 0xFC, 0x8E, 0x07, 0x01, 0x00, 0x08, 0x0C, 0x0F, 0x03, 0x01, 0x00, 0x00, 0x01, 0x03, 0x0F, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 120
    0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x01, 0x07, 0x3F, 0xFC, 0xE0, 0x80, 0x00, 0xE0, 0xF8, 0x3E, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x80, 0xF3, 0x7F, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 121
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x01, 0x01, 0x81, 0xC1, 0xE1, 0x71, 0x1D, 0x0F, 0x07, 0x03, 0x00, 0x0C, 0x0E, 0x0F, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 122
    0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0x0C, 0x0C, 0x04, 0x04, 0x30, 0x30, 0x30, 0x78, 0xCE, 0x87, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7F, 0xFE, 0xC0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, // 123
    0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x80, // 124
    0x04, 0x04, 0x0C, 0x0C, 0x3C, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0xCF, 0x58, 0x70, 0x30, 0x30, 0x80, 0x80, 0x80, 0xC0, 0xF0, 0x7F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 125
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x78, 0x1C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x60, 0x60, 0x60, 0x3E, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 126
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\CenturyGothic10x16.h ===



/*
 *
 * CenturyGothic10x16
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : CenturyGothic10x16.h
 * Date                : 07.06.2020
 * Font size in bytes  : 10518
 * Font width          : 10
 * Font height         : 16
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef _CenturyGothic10x16_H
#define _CenturyGothic10x16_H

#define CenturyGothic10x16_WIDTH 10
#define CenturyGothic10x16_HEIGHT 16

GLCDFONTDECL(CenturyGothic10x16) = {
    //0x29, 0x16, // size
    0x05, 0x84, // size
    0x0A,       // width
    0x10,       // height
    0x20,       // first char
    0xA2,       // char count

    // char widths
    0x04, 0x01, 0x04, 0x09, 0x08, 0x0B, 0x09, 0x01, 0x03, 0x02,
    0x05, 0x07, 0x02, 0x04, 0x02, 0x06, 0x08, 0x03, 0x08, 0x08,
    0x08, 0x08, 0x07, 0x07, 0x08, 0x07, 0x02, 0x02, 0x08, 0x08,
    0x08, 0x06, 0x0C, 0x0B, 0x06, 0x0B, 0x09, 0x06, 0x05, 0x0C,
    0x07, 0x01, 0x05, 0x06, 0x05, 0x0D, 0x08, 0x0C, 0x06, 0x0C,
    0x07, 0x07, 0x07, 0x07, 0x0B, 0x0D, 0x07, 0x09, 0x07, 0x03,
    0x09, 0x03, 0x09, 0x08, 0x02, 0x09, 0x09, 0x08, 0x09, 0x08,
    0x04, 0x09, 0x08, 0x01, 0x02, 0x06, 0x01, 0x0D, 0x08, 0x08,
    0x09, 0x09, 0x04, 0x05, 0x05, 0x08, 0x09, 0x0D, 0x08, 0x08,
    0x07, 0x05, 0x01, 0x05, 0x08, 0x08,

    0x08, 0x07, 0x03, 0x08, 0x0D, 0x07, //р - я
    0x08, 0x05, 0x0B, 0x0D, 0x06, 0x07, 0x05, 0x07, 0x0A, 0x04,

    0x09, 0x06, 0x06, 0x04,
    0x0A, 0x06, 0x0B, 0x06, 0x08, 0x08, 0x06, 0x09, 0x0B, 0x06,
    0x0A, 0x06, 0x06, 0x09, 0x05, 0x07, 0x0A, 0x07, 0x09, 0x07,
    0x0A, 0x0D, 0x09, 0x09, 0x06, 0x09, 0x0D, 0x07, 0x08, 0x07,
    0x05, 0x04, 0x08, 0x07, 0x0B, 0x05, 0x07, 0x07, 0x05, 0x08,
    0x0A, 0x06, 0x07, 0x07, 0x06, 0x07,

    // font data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,                                                                                                             // 32
    0xFE, 0x1B,                                                                                                                                                 // 33
    0x1E, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00,                                                                                                             // 34
    0x10, 0x10, 0xF8, 0x16, 0x10, 0x10, 0xF8, 0x16, 0x10, 0x01, 0x1F, 0x01, 0x01, 0x01, 0x1F, 0x03, 0x01, 0x01,                                                 // 35
    0x00, 0x1C, 0x22, 0x42, 0xFF, 0x42, 0x84, 0x00, 0x04, 0x08, 0x10, 0x10, 0x7F, 0x10, 0x10, 0x0F,                                                             // 36
    0x1C, 0x22, 0x22, 0x22, 0x1E, 0xC2, 0x22, 0x1A, 0x06, 0x02, 0x00, 0x00, 0x10, 0x08, 0x06, 0x01, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E,                         // 37
    0x00, 0x1C, 0xA2, 0xC2, 0x22, 0x1C, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x10, 0x10, 0x11, 0x0A, 0x0C, 0x0C, 0x12,                                                 // 38
    0x1E, 0x00,                                                                                                                                                 // 39
    0xE0, 0x1C, 0x02, 0x1F, 0x60, 0x80,                                                                                                                         // 40
    0x06, 0xF8, 0xC0, 0x3F,                                                                                                                                     // 41
    0x24, 0x18, 0x7E, 0x18, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00,                                                                                                 // 42
    0x80, 0x80, 0x80, 0xF0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,                                                                         // 43
    0x00, 0x00, 0x60, 0x18,                                                                                                                                     // 44
    0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,                                                                                                             // 45
    0x00, 0x00, 0x18, 0x18,                                                                                                                                     // 46
    0x00, 0x00, 0x00, 0xE0, 0x1C, 0x02, 0x40, 0x38, 0x07, 0x00, 0x00, 0x00,                                                                                     // 47
    0xF8, 0x04, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF8, 0x07, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, 0x07,                                                             // 48
    0x02, 0x02, 0xFE, 0x00, 0x00, 0x1F,                                                                                                                         // 49
    0x18, 0x04, 0x02, 0x02, 0x02, 0x82, 0x44, 0x38, 0x10, 0x18, 0x14, 0x12, 0x11, 0x10, 0x10, 0x10,                                                             // 50
    0x08, 0x04, 0x02, 0x42, 0x42, 0x44, 0xB8, 0x00, 0x0C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x07,                                                             // 51
    0x00, 0x00, 0x80, 0x60, 0x10, 0x08, 0xFE, 0x00, 0x02, 0x03, 0x02, 0x02, 0x02, 0x02, 0x1F, 0x02,                                                             // 52
    0x00, 0x70, 0x2E, 0x22, 0x22, 0x22, 0x42, 0x82, 0x04, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, 0x07,                                                             // 53
    0x00, 0xC0, 0x60, 0x58, 0x44, 0x82, 0x00, 0x07, 0x08, 0x10, 0x10, 0x10, 0x08, 0x07,                                                                         // 54
    0x02, 0x02, 0x02, 0xC2, 0x32, 0x0E, 0x02, 0x10, 0x0C, 0x03, 0x00, 0x00, 0x00, 0x00,                                                                         // 55
    0x00, 0x98, 0x64, 0x42, 0x42, 0x64, 0x98, 0x00, 0x07, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, 0x07,                                                             // 56
    0x38, 0x44, 0x82, 0x82, 0x82, 0x84, 0x78, 0x00, 0x10, 0x08, 0x04, 0x03, 0x00, 0x00,                                                                         // 57
    0x30, 0x30, 0x18, 0x18,                                                                                                                                     // 58
    0x30, 0x30, 0x60, 0x18,                                                                                                                                     // 59
    0x80, 0x80, 0x40, 0x20, 0x20, 0x10, 0x10, 0x08, 0x00, 0x00, 0x01, 0x02, 0x02, 0x04, 0x04, 0x08,                                                             // 60
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,                                                             // 61
    0x08, 0x10, 0x10, 0x20, 0x20, 0x40, 0x80, 0x80, 0x08, 0x04, 0x04, 0x02, 0x02, 0x01, 0x00, 0x00,                                                             // 62
    0x0C, 0x82, 0x42, 0x22, 0x22, 0x9C, 0x00, 0x01, 0x02, 0x1A, 0x1A, 0x01,                                                                                     // 63
    0xF0, 0x08, 0x04, 0xC2, 0x22, 0x12, 0x12, 0xE2, 0x12, 0x04, 0x08, 0xF0, 0x03, 0x04, 0x08, 0x11, 0x12, 0x12, 0x12, 0x11, 0x12, 0x12, 0x09, 0x04,             // 64
    0x00, 0x00, 0x80, 0x60, 0x1C, 0x02, 0x1C, 0x60, 0x80, 0x00, 0x00, 0x10, 0x0E, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0E, 0x10,                         // 65
    0xFE, 0x42, 0x42, 0x64, 0x98, 0x00, 0x1F, 0x10, 0x10, 0x10, 0x08, 0x07,                                                                                     // 66
    0xF0, 0x08, 0x04, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x04, 0x08, 0x03, 0x04, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x04,                         // 67
    0xFE, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x08, 0xF0, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x04, 0x03,                                                 // 68
    0xFE, 0x42, 0x42, 0x42, 0x42, 0x42, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x10,                                                                                     // 69
    0xFE, 0x42, 0x42, 0x42, 0x42, 0x1F, 0x00, 0x00, 0x00, 0x00,                                                                                                 // 70
    0xF0, 0x08, 0x04, 0x02, 0x02, 0x02, 0x02, 0x82, 0x84, 0x84, 0x88, 0x80, 0x03, 0x04, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x04, 0x03,             // 71
    0xFE, 0x40, 0x40, 0x40, 0x40, 0x40, 0xFE, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,                                                                         // 72
    0xFE, 0x1F,                                                                                                                                                 // 73
    0x00, 0x00, 0x00, 0x00, 0xFE, 0x08, 0x10, 0x10, 0x08, 0x07,                                                                                                 // 74
    0xFE, 0x60, 0x90, 0x08, 0x04, 0x02, 0x1F, 0x00, 0x01, 0x02, 0x0C, 0x10,                                                                                     // 75
    0xFE, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x10, 0x10, 0x10, 0x10,                                                                                                 // 76
    0x00, 0xF8, 0x06, 0x38, 0xC0, 0x00, 0x00, 0x00, 0xC0, 0x38, 0x06, 0xF8, 0x00, 0x1C, 0x03, 0x00, 0x00, 0x01, 0x0E, 0x10, 0x0E, 0x01, 0x00, 0x00, 0x03, 0x1C, // 77
    0xFE, 0x08, 0x30, 0x40, 0x80, 0x00, 0x00, 0xFE, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x1F,                                                             // 78
    0xF0, 0x08, 0x04, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x08, 0xF0, 0x03, 0x04, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x04, 0x03,             // 79
    0xFE, 0x42, 0x42, 0x42, 0x24, 0x18, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00,                                                                                     // 80
    0xF0, 0x08, 0x04, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x08, 0xF0, 0x03, 0x04, 0x08, 0x10, 0x10, 0x10, 0x11, 0x12, 0x0C, 0x08, 0x16, 0x21,             // 81
    0xFE, 0x42, 0xC2, 0x42, 0x42, 0x24, 0x18, 0x1F, 0x00, 0x00, 0x01, 0x06, 0x08, 0x10,                                                                         // 82
    0x00, 0x18, 0x24, 0x42, 0x42, 0x84, 0x08, 0x04, 0x08, 0x10, 0x10, 0x10, 0x08, 0x07,                                                                         // 83
    0x02, 0x02, 0x02, 0xFE, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,                                                                         // 84
    0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x07, 0x08, 0x10, 0x10, 0x10, 0x08, 0x07,                                                                         // 85
    0x02, 0x1C, 0x60, 0x80, 0x00, 0x00, 0x00, 0x80, 0x60, 0x1C, 0x02, 0x00, 0x00, 0x00, 0x01, 0x0E, 0x10, 0x0E, 0x01, 0x00, 0x00, 0x00,                         // 86
    0x06, 0x78, 0x80, 0x00, 0x80, 0x78, 0x06, 0x78, 0x80, 0x00, 0x80, 0x78, 0x06, 0x00, 0x00, 0x07, 0x18, 0x07, 0x00, 0x00, 0x00, 0x07, 0x18, 0x07, 0x00, 0x00, // 87
    0x06, 0x08, 0x30, 0xC0, 0x30, 0x08, 0x06, 0x18, 0x06, 0x01, 0x00, 0x03, 0x04, 0x18,                                                                         // 88
    0x02, 0x04, 0x18, 0x60, 0x80, 0x60, 0x18, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00,                                                 // 89
    0x02, 0x02, 0x02, 0xC2, 0x32, 0x0E, 0x02, 0x10, 0x1C, 0x13, 0x10, 0x10, 0x10, 0x10,                                                                         // 90
    0xFE, 0x02, 0x02, 0xFF, 0x80, 0x80,                                                                                                                         // 91
    0x02, 0x0C, 0x10, 0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x08, 0x30, 0x40,                                                 // 92
    0x02, 0x02, 0xFE, 0x80, 0x80, 0xFF,                                                                                                                         // 93
    0x00, 0x80, 0x70, 0x0C, 0x02, 0x0C, 0x70, 0x80, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,                                                 // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,                                                             // 95
    0x02, 0x04, 0x00, 0x00,                                                                                                                                     // 96
    0xC0, 0x20, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20, 0xF0, 0x07, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x1F,                                                 // 97
    0xFE, 0x20, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20, 0xC0, 0x1F, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x07,                                                 // 98
    0xC0, 0x20, 0x10, 0x10, 0x10, 0x10, 0x20, 0x40, 0x07, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, 0x04,                                                             // 99
    0xC0, 0x20, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20, 0xFE, 0x07, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x1F,                                                 // 100
    0xC0, 0x20, 0x10, 0x10, 0x10, 0x10, 0x20, 0xC0, 0x07, 0x09, 0x11, 0x11, 0x11, 0x11, 0x09, 0x05,                                                             // 101
    0x10, 0xFC, 0x12, 0x12, 0x00, 0x1F, 0x00, 0x00,                                                                                                             // 102
    0xC0, 0x20, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20, 0xF0, 0x27, 0x48, 0x90, 0x90, 0x90, 0x90, 0x90, 0x48, 0x3F,                                                 // 103
    0xFE, 0x20, 0x10, 0x10, 0x10, 0x10, 0x20, 0xC0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,                                                             // 104
    0xF6, 0x1F,                                                                                                                                                 // 105
    0x00, 0xF6, 0x80, 0x7F,                                                                                                                                     // 106
    0xFE, 0x00, 0x80, 0x40, 0x20, 0x10, 0x1F, 0x01, 0x02, 0x04, 0x08, 0x10,                                                                                     // 107
    0xFE, 0x1F,                                                                                                                                                 // 108
    0xF0, 0x20, 0x10, 0x10, 0x10, 0x20, 0xC0, 0x20, 0x10, 0x10, 0x10, 0x20, 0xC0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, // 109
    0xF0, 0x20, 0x10, 0x10, 0x10, 0x10, 0x20, 0xC0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,                                                             // 110
    0xC0, 0x20, 0x10, 0x10, 0x10, 0x10, 0x20, 0xC0, 0x07, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, 0x07,                                                             // 111
    0xF0, 0x20, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20, 0xC0, 0xFF, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x07,                                                 // 112
    0xC0, 0x20, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20, 0xF0, 0x07, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0xFF,                                                 // 113
    0xF0, 0x20, 0x10, 0x10, 0x1F, 0x00, 0x00, 0x00,                                                                                                             // 114
    0x60, 0x90, 0x10, 0x10, 0x20, 0x08, 0x10, 0x11, 0x11, 0x0E,                                                                                                 // 115
    0x10, 0x10, 0xFE, 0x10, 0x10, 0x00, 0x00, 0x1F, 0x00, 0x00,                                                                                                 // 116
    0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x07, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, 0x07,                                                             // 117
    0x10, 0x60, 0x80, 0x00, 0x00, 0x00, 0x80, 0x60, 0x10, 0x00, 0x00, 0x03, 0x0C, 0x10, 0x0C, 0x03, 0x00, 0x00,                                                 // 118
    0x10, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x10, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x10, 0x00, 0x00, 0x07, 0x18, 0x07, 0x00, 0x00, 0x00, 0x07, 0x18, 0x07, 0x00, 0x00, // 119
    0x10, 0x20, 0x40, 0x80, 0x80, 0x40, 0x20, 0x10, 0x10, 0x08, 0x04, 0x03, 0x02, 0x04, 0x08, 0x10,                                                             // 120
    0x10, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x10, 0x00, 0x00, 0x83, 0x7C, 0x0C, 0x03, 0x00, 0x00,                                                             // 121
    0x10, 0x10, 0x10, 0x10, 0xD0, 0x30, 0x10, 0x10, 0x18, 0x16, 0x11, 0x10, 0x10, 0x10,                                                                         // 122
    0x00, 0x80, 0xFC, 0x02, 0x02, 0x01, 0x02, 0x7E, 0x80, 0x80,                                                                                                 // 123
    0xFE, 0xFF,                                                                                                                                                 // 124
    0x02, 0x02, 0xFC, 0x80, 0x00, 0x80, 0x80, 0x7E, 0x02, 0x01,                                                                                                 // 125
    0x80, 0x40, 0x40, 0x40, 0x80, 0x80, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,                                                             // 126
    0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xF8, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1F,                                                             // 127

    0xC0, 0x80, 0x40, 0x40, 0x40, 0x40, 0x80, 0x00, 0xFF, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, 0x07,                                                             // 1088
    0x00, 0x80, 0x40, 0x40, 0x40, 0x40, 0x80, 0x07, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08,                                                                         // 1089
    0x40, 0xC0, 0x40, 0x00, 0x1F, 0x00,                                                                                                                         // 1090
    0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x00, 0x01, 0x86, 0x78, 0x18, 0x06, 0x01, 0x00,                                                             // 1091
    0x00, 0x80, 0x40, 0x40, 0x40, 0x80, 0xF8, 0x80, 0x40, 0x40, 0x40, 0x80, 0x00, 0x07, 0x08, 0x10, 0x10, 0x10, 0x08, 0xFF, 0x08, 0x10, 0x10, 0x10, 0x08, 0x07, // 1092
    0x40, 0x80, 0x00, 0x00, 0x00, 0x80, 0x40, 0x10, 0x08, 0x05, 0x02, 0x05, 0x08, 0x10,                                                                         // 1093
    0xC0, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x1F, 0x10, 0x70,                                                             // 1094
    0xC0, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x02, 0x02, 0x02, 0x1F,                                                                                                 // 1095
    0xC0, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x1F,                         // 1096
    0xC0, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x1F, 0x10, 0x70, // 1097
    0x40, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x12, 0x12, 0x12, 0x0C,                                                                                     // 1098
    0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x1F, 0x12, 0x12, 0x12, 0x0C, 0x00, 0x1F,                                                                         // 1099
    0xC0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x12, 0x12, 0x12, 0x0C,                                                                                                 // 1100
    0x80, 0x40, 0x40, 0x40, 0x40, 0x80, 0x00, 0x08, 0x10, 0x10, 0x12, 0x12, 0x0A, 0x07,                                                                         // 1101
    0xC0, 0x00, 0x00, 0x00, 0x80, 0x40, 0x40, 0x40, 0x80, 0x00, 0x1F, 0x02, 0x02, 0x07, 0x08, 0x10, 0x10, 0x10, 0x08, 0x07,                                     // 1102
    0x80, 0x40, 0x40, 0xC0, 0x19, 0x06, 0x02, 0x1F,                                                                                                             // 1103
    0x00, 0x00, 0x80, 0x70, 0x08, 0x70, 0x80, 0x00, 0x00, 0x10, 0x0E, 0x03, 0x02, 0x02, 0x02, 0x03, 0x0E, 0x10,                                                 // 1040
    0xF8, 0x88, 0x88, 0x88, 0x88, 0x00, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x0F,                                                                                     // 1041
    0xF8, 0x88, 0x88, 0x88, 0xF0, 0x00, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x0F,                                                                                     // 1042
    0xF8, 0x08, 0x08, 0x08, 0x1F, 0x00, 0x00, 0x00,                                                                                                             // 1043
    0x00, 0x00, 0x80, 0x60, 0x18, 0x18, 0xE0, 0x00, 0x00, 0x00, 0x70, 0x1C, 0x13, 0x10, 0x10, 0x10, 0x10, 0x13, 0x1C, 0x70,                                     // 1044
    0xF8, 0x88, 0x88, 0x88, 0x88, 0x88, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x10,                                                                                     // 1045
    0x08, 0x10, 0x20, 0x40, 0x80, 0xF8, 0x80, 0x40, 0x20, 0x10, 0x08, 0x10, 0x08, 0x06, 0x01, 0x00, 0x1F, 0x00, 0x01, 0x06, 0x08, 0x10,                         // 1046
    0x10, 0x08, 0x88, 0x88, 0x88, 0x70, 0x0C, 0x10, 0x10, 0x10, 0x10, 0x0F,                                                                                     // 1047
    0xF8, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0xF8, 0x1F, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x1F,                                                             // 1048
    0xF8, 0x00, 0x01, 0x02, 0x82, 0x41, 0x20, 0xF8, 0x1F, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x1F,                                                             // 1049
    0xF8, 0xC0, 0x20, 0x10, 0x10, 0x08, 0x1F, 0x00, 0x01, 0x06, 0x08, 0x10,                                                                                     // 1050
    0x00, 0x00, 0x80, 0x70, 0x08, 0x70, 0x80, 0x00, 0x00, 0x10, 0x0E, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0E, 0x10,                                                 // 1051
    0xE0, 0x18, 0x60, 0x80, 0x00, 0x00, 0x00, 0x80, 0x60, 0x18, 0xE0, 0x1F, 0x00, 0x00, 0x03, 0x0C, 0x10, 0x0C, 0x03, 0x00, 0x00, 0x1F,                         // 1052
    0xF8, 0x80, 0x80, 0x80, 0x80, 0xF8, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x1F,                                                                                     // 1053
    0xC0, 0x20, 0x10, 0x08, 0x08, 0x08, 0x08, 0x10, 0x20, 0xC0, 0x03, 0x04, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, 0x04, 0x03,                                     // 1054
    0xF8, 0x08, 0x08, 0x08, 0x08, 0xF8, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x1F,                                                                                     // 1055
    0xF8, 0x88, 0x88, 0x88, 0x88, 0x70, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00,                                                                                     // 1056
    0xC0, 0x20, 0x10, 0x08, 0x08, 0x08, 0x08, 0x10, 0x20, 0x03, 0x04, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, 0x04,                                                 // 1057
    0x08, 0x08, 0xF8, 0x08, 0x08, 0x00, 0x00, 0x1F, 0x00, 0x00,                                                                                                 // 1058
    0x18, 0x60, 0x80, 0x00, 0x80, 0x60, 0x18, 0x08, 0x10, 0x09, 0x06, 0x01, 0x00, 0x00,                                                                         // 1059
    0xE0, 0x10, 0x10, 0x10, 0xF8, 0x10, 0x10, 0x10, 0x10, 0xE0, 0x01, 0x02, 0x02, 0x02, 0x1F, 0x02, 0x02, 0x02, 0x02, 0x01,                                     // 1060
    0x08, 0x30, 0x40, 0x80, 0x40, 0x30, 0x08, 0x10, 0x0C, 0x02, 0x01, 0x02, 0x0C, 0x10,                                                                         // 1061
    0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1F, 0x10, 0x70,                                                 // 1062
    0x78, 0x80, 0x80, 0x80, 0x80, 0x80, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,                                                                         // 1063
    0xF8, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x1F, 0x10, 0x10, 0x10, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x1F,                                     // 1064
    0xF8, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x1F, 0x10, 0x10, 0x10, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x1F, 0x10, 0x10, 0x70, // 1065
    0x08, 0x08, 0xF8, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F,                                                 // 1066
    0xF8, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0xF8, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F, 0x00, 0x1F,                                                 // 1067
    0xF8, 0x80, 0x80, 0x80, 0x80, 0x00, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x0F,                                                                                     // 1068
    0x30, 0x10, 0x08, 0x08, 0x88, 0x88, 0x90, 0xA0, 0xC0, 0x0C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x04, 0x03,                                                 // 1069
    0xF8, 0x80, 0x80, 0xC0, 0x20, 0x10, 0x08, 0x08, 0x08, 0x08, 0x10, 0x20, 0xC0, 0x1F, 0x00, 0x00, 0x03, 0x04, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, 0x04, 0x03, // 1070
    0x70, 0x88, 0x88, 0x88, 0x88, 0x88, 0xF8, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x1F,                                                                         // 1071
    0x00, 0x80, 0x40, 0x40, 0x40, 0x40, 0x80, 0xC0, 0x07, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, 0x1F,                                                             // 1072
    0xE0, 0x90, 0x48, 0x48, 0x48, 0x88, 0x08, 0x07, 0x08, 0x10, 0x10, 0x10, 0x08, 0x07,                                                                         // 1073
    0xC0, 0x40, 0x40, 0x40, 0x80, 0x1F, 0x12, 0x12, 0x12, 0x0D,                                                                                                 // 1074
    0xC0, 0x40, 0x40, 0x40, 0x1F, 0x00, 0x00, 0x00,                                                                                                             // 1075
    0x00, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x70, 0x1C, 0x13, 0x10, 0x10, 0x13, 0x1C, 0x70,                                                             // 1076
    0x00, 0x80, 0x40, 0x40, 0x40, 0x80, 0x00, 0x07, 0x0A, 0x12, 0x12, 0x12, 0x12, 0x0B,                                                                         // 1077
    0x00, 0x40, 0x80, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x80, 0x40, 0x00, 0x10, 0x08, 0x04, 0x05, 0x02, 0x1F, 0x02, 0x05, 0x04, 0x08, 0x10,                         // 1078
    0x80, 0x40, 0x40, 0x40, 0x80, 0x08, 0x10, 0x12, 0x12, 0x0D,                                                                                                 // 1079
    0xC0, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0x1F, 0x08, 0x04, 0x02, 0x01, 0x00, 0x1F,                                                                         // 1080
    0xC0, 0x00, 0x08, 0x10, 0x10, 0x88, 0xC0, 0x1F, 0x08, 0x04, 0x02, 0x01, 0x00, 0x1F,                                                                         // 1081
    0xC0, 0x00, 0x00, 0x80, 0x40, 0x1F, 0x02, 0x05, 0x08, 0x10,                                                                                                 // 1082
    0x00, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x10, 0x0C, 0x03, 0x00, 0x00, 0x03, 0x0C, 0x10,                                                             // 1083
    0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x18, 0x07, 0x00, 0x07, 0x18, 0x18, 0x07, 0x00, 0x07, 0x18,                                     // 1084
    0xC0, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x1F, 0x02, 0x02, 0x02, 0x02, 0x1F,                                                                                     // 1085
    0x00, 0x80, 0x40, 0x40, 0x40, 0x80, 0x00, 0x07, 0x08, 0x10, 0x10, 0x10, 0x08, 0x07,                                                                         // 1086
    0x00, 0x98, 0x58, 0x40, 0x58, 0x98, 0x00, 0x07, 0x0A, 0x12, 0x12, 0x12, 0x12, 0x0B,                                                                         // 1105
    0xC0, 0x40, 0x40, 0x40, 0x40, 0xC0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x1F,                                                                                     // 1087

    0xF0, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF0, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1F, // 1104

};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Cooper19.h ===

/*
 *
 * Cooper19
 * Cooper std black size20
 *
 * created with GLCDFontCreator
 * original framework by F. Maximilian Thiele
 * Modified By Siddharth Kaul
 *
 *
 * File Name           : cooper_std_black_size18.h
 * Date                : 10.11.2012
 * Font size in bytes  : 19140
 * Font width          : 10
 * Font height         : 19
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef _Cooper19_H
#define _Cooper19_H

#define Cooper19_WIDTH 10
#define Cooper19_HEIGHT 19

GLCDFONTDECL(Cooper19) = {
    0x4A, 0xC4, // size
    0x0A, // width
    0x13, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x04, 0x04, 0x09, 0x07, 0x0A, 0x0F, 0x11, 0x04, 0x08, 0x08, 
    0x08, 0x08, 0x05, 0x05, 0x04, 0x09, 0x0B, 0x0A, 0x0B, 0x0B, 
    0x0B, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x04, 0x05, 0x09, 0x09, 
    0x09, 0x09, 0x0C, 0x0F, 0x0C, 0x0D, 0x0F, 0x0D, 0x0D, 0x0F, 
    0x0D, 0x06, 0x0C, 0x0F, 0x0C, 0x10, 0x10, 0x0E, 0x0D, 0x0E, 
    0x0E, 0x0B, 0x0C, 0x0E, 0x10, 0x14, 0x0F, 0x0F, 0x0D, 0x06, 
    0x09, 0x06, 0x09, 0x09, 0x05, 0x0A, 0x0C, 0x09, 0x0B, 0x0A, 
    0x08, 0x0B, 0x0D, 0x06, 0x06, 0x0D, 0x06, 0x12, 0x0D, 0x0B, 
    0x0B, 0x0B, 0x0A, 0x09, 0x09, 0x0D, 0x0C, 0x13, 0x0C, 0x0B, 
    0x09, 0x07, 0x02, 0x07, 0x08, 0x09, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x20 <space>
    0x78, 0xFC, 0xFC, 0x78, 0x30, 0x7B, 0x79, 0x30, 0x00, 0x00, 0x00, 0x00, // 33
    0x78, 0xFC, 0xFC, 0x78, 0x00, 0x78, 0xFC, 0xFC, 0x78, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 34
    0x00, 0x00, 0xE0, 0x20, 0xE0, 0x60, 0x00, 0x08, 0x69, 0x3F, 0x49, 0x7F, 0x09, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 35
    0xC0, 0xE0, 0xF0, 0xF8, 0xB8, 0x30, 0x20, 0x70, 0xE0, 0xC0, 0x7B, 0xE7, 0xE7, 0xCF, 0xCF, 0xCF, 0xFF, 0x7E, 0x7E, 0x38, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // 36
    0x30, 0x78, 0xFC, 0xE4, 0xCC, 0xFC, 0x78, 0x38, 0xC0, 0x30, 0x1C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x60, 0x38, 0x0C, 0x03, 0x18, 0x3C, 0x7E, 0x62, 0x7E, 0x3E, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 37
    0x00, 0xB0, 0xF8, 0xFC, 0xFC, 0xCC, 0xCC, 0x1C, 0x08, 0x80, 0xC0, 0xC0, 0xD8, 0xF8, 0xF8, 0x78, 0x30, 0x07, 0x1F, 0x3F, 0x3F, 0x7F, 0x78, 0x70, 0x60, 0x67, 0x63, 0x33, 0x3F, 0x3F, 0x1F, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 38
    0x78, 0xFC, 0xFC, 0x78, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // 39
    0xC0, 0xF8, 0xFC, 0xFE, 0x0F, 0x07, 0x03, 0x03, 0x07, 0x3F, 0x7F, 0xFF, 0xE0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, // 40
    0x03, 0x03, 0x07, 0x0F, 0xFE, 0xFC, 0xF8, 0xC0, 0x80, 0x80, 0xC0, 0xE0, 0xFF, 0x7F, 0x3F, 0x07, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, // 41
    0x20, 0xB0, 0xF0, 0xFC, 0xFC, 0xF0, 0xB0, 0x30, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 42
    0x00, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x3F, 0x3F, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 43
    0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x7C, 0xF8, 0xF8, 0x70, 0x00, 0x40, 0x60, 0x20, 0x00, // 44
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0E, 0x0E, 0x0E, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, // 45
    0x00, 0x00, 0x00, 0x00, 0x38, 0x78, 0x78, 0x38, 0x00, 0x00, 0x00, 0x00, // 46
    0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF8, 0x3C, 0x0C, 0x80, 0xC0, 0xF8, 0x3E, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 47
    0x80, 0xC0, 0xE0, 0xF0, 0x70, 0x70, 0xF0, 0xE0, 0xE0, 0xC0, 0x00, 0x07, 0x1F, 0x3F, 0x3F, 0x78, 0x70, 0x70, 0x3F, 0x3F, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 48
    0x00, 0x60, 0x60, 0xE0, 0xF0, 0xF0, 0xF0, 0x30, 0x00, 0x00, 0x20, 0x20, 0x60, 0x7F, 0x7F, 0x7F, 0x7F, 0x60, 0x60, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 49
    0xC0, 0xE0, 0x60, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xC0, 0x00, 0x60, 0x70, 0x78, 0x7E, 0x7F, 0x7F, 0x7F, 0x77, 0xF3, 0x78, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 50
    0xC0, 0x40, 0x60, 0x60, 0xE0, 0xE0, 0xE0, 0xE0, 0xC0, 0x00, 0x00, 0x80, 0x80, 0x8C, 0x8E, 0x8F, 0xCF, 0xFF, 0xFF, 0xFC, 0x7C, 0x38, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, // 51
    0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF0, 0xF0, 0x00, 0x78, 0x7C, 0x76, 0x73, 0x71, 0x70, 0xFF, 0xFF, 0xFF, 0xFF, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, // 52
    0x00, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0x60, 0x8E, 0x8F, 0x8F, 0x9E, 0xFE, 0xFE, 0xFC, 0xFC, 0x7C, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, // 53
    0x80, 0xE0, 0xF0, 0xF8, 0xF8, 0x88, 0x80, 0x80, 0x80, 0x00, 0x07, 0x1F, 0x3F, 0x7F, 0x79, 0x73, 0x7F, 0x3F, 0x1F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 54
    0xE0, 0xF0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0x60, 0x01, 0x01, 0x00, 0x00, 0xC0, 0xF0, 0xFC, 0xFF, 0x1F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, // 55
    0x00, 0xE0, 0xF0, 0xF8, 0xF8, 0xD8, 0x98, 0x98, 0xF8, 0xF0, 0x60, 0x1C, 0x3E, 0x3F, 0x73, 0x63, 0x67, 0x67, 0x7F, 0x3F, 0x3F, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 56
    0x80, 0xE0, 0xE0, 0xF0, 0x70, 0x70, 0xF0, 0xF0, 0xE0, 0xE0, 0x80, 0x07, 0x0F, 0x1F, 0x9F, 0xDC, 0xF8, 0xF8, 0xFF, 0x7F, 0x3F, 0x0F, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, // 57
    0x80, 0xC0, 0xC0, 0x80, 0x31, 0x7B, 0x7B, 0x31, 0x00, 0x00, 0x00, 0x00, // 58
    0x00, 0x80, 0xC0, 0xC0, 0x80, 0x38, 0x7D, 0xFB, 0xFB, 0x71, 0x00, 0x40, 0x60, 0x20, 0x00, // 59
    0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0x06, 0x0E, 0x0F, 0x1F, 0x1B, 0x19, 0x31, 0x31, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 60
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 61
    0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x31, 0x31, 0x19, 0x1B, 0x1F, 0x0F, 0x0E, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 62
    0x20, 0x78, 0x78, 0x3C, 0xCC, 0xFC, 0xFC, 0xF8, 0x70, 0x00, 0x00, 0x30, 0x7A, 0x7B, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 63
    0xC0, 0x30, 0x18, 0x88, 0x84, 0xC4, 0x44, 0xC4, 0xC4, 0x68, 0x18, 0xE0, 0x0F, 0x38, 0x2E, 0x2F, 0x4F, 0x44, 0x4E, 0x4F, 0x2F, 0x34, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 64
    0x00, 0x00, 0x00, 0x00, 0xC0, 0xF8, 0x7C, 0xFC, 0xF8, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x78, 0x7F, 0x6F, 0x0D, 0x0C, 0x0D, 0x6F, 0x7F, 0x7F, 0x7F, 0x7C, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 65
    0x0C, 0xFC, 0xFC, 0xFC, 0xFC, 0x8C, 0x8C, 0xFC, 0xFC, 0xF8, 0x38, 0x00, 0x60, 0x7F, 0x7F, 0x7F, 0x7F, 0x61, 0x61, 0x7F, 0x7F, 0x3F, 0x3F, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 66
    0x80, 0xE0, 0xF0, 0xF8, 0xF8, 0x3C, 0x1C, 0x1C, 0x1C, 0x3C, 0x78, 0xF8, 0xF0, 0x07, 0x0F, 0x1F, 0x3F, 0x3F, 0x7E, 0x78, 0x70, 0x70, 0x70, 0x30, 0x38, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 67
    0x00, 0x0C, 0xFC, 0xFC, 0xFC, 0xFC, 0x0C, 0x0C, 0x1C, 0x3C, 0xFC, 0xF8, 0xF8, 0xF0, 0xC0, 0x40, 0x60, 0x7F, 0x7F, 0x7F, 0x7F, 0x60, 0x60, 0x60, 0x70, 0x3F, 0x3F, 0x3F, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 68
    0x08, 0x0C, 0xFC, 0xFC, 0xFC, 0xFC, 0x8C, 0x8C, 0xEC, 0xCC, 0x1C, 0x1C, 0x10, 0x40, 0x60, 0x7F, 0x7F, 0x7F, 0x7F, 0x61, 0x61, 0x67, 0x63, 0x70, 0x78, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 69
    0x00, 0x0C, 0xFC, 0xFC, 0xFC, 0xFC, 0x0C, 0x0C, 0xCC, 0x9C, 0x1C, 0x7C, 0x30, 0x40, 0x60, 0x7F, 0x7F, 0x7F, 0x7F, 0x63, 0x43, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 70
    0xC0, 0xE0, 0xF0, 0xF8, 0xF8, 0x1C, 0x0C, 0x0C, 0x0C, 0x1C, 0x3C, 0x3C, 0x38, 0x00, 0x00, 0x03, 0x0F, 0x1F, 0x3F, 0x3F, 0x7E, 0x78, 0x70, 0x73, 0x7F, 0x3F, 0x3F, 0x0F, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 71
    0x08, 0xFC, 0xFC, 0xFC, 0xFC, 0x8C, 0x80, 0x8C, 0xFC, 0xFC, 0xFC, 0xFC, 0x0C, 0x60, 0x7F, 0x7F, 0x7F, 0x7F, 0x21, 0x01, 0x61, 0x7F, 0x7F, 0x7F, 0x7F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 72
    0x0C, 0xFC, 0xFC, 0xFC, 0xFC, 0x0C, 0x60, 0x7F, 0x7F, 0x7F, 0x7F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 73
    0x00, 0x00, 0x00, 0x00, 0x08, 0x1C, 0xFC, 0xFC, 0xFC, 0xFC, 0x0C, 0x08, 0x1C, 0x3C, 0x7C, 0x7C, 0x60, 0x70, 0x7F, 0x3F, 0x3F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 74
    0x0C, 0xFC, 0xFC, 0xFC, 0xFC, 0xCC, 0xE0, 0xFC, 0xFC, 0x1C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x60, 0x7F, 0x7F, 0x7F, 0x7F, 0x67, 0x07, 0x0F, 0x3F, 0x7F, 0x7E, 0x7C, 0x70, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 75
    0x08, 0x0C, 0xFC, 0xFC, 0xFC, 0xFC, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x7F, 0x7F, 0x7F, 0x7F, 0x60, 0x60, 0x60, 0x70, 0x7C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 76
    0x08, 0x1C, 0xFC, 0xFC, 0xFC, 0xF8, 0xF0, 0xC0, 0x80, 0xC0, 0xF0, 0xFC, 0xFC, 0xFC, 0xFC, 0x0C, 0x60, 0x7C, 0x7F, 0x7F, 0x61, 0x07, 0x1F, 0x7F, 0x1F, 0x07, 0x61, 0x7F, 0x7F, 0x7F, 0x7F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 77
    0x08, 0x1C, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x8C, 0xFC, 0xFC, 0x0C, 0x08, 0x00, 0x60, 0x7F, 0x7F, 0x7F, 0x61, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 78
    0x80, 0xE0, 0xF0, 0xF8, 0xF8, 0x1C, 0x1C, 0x3C, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0x80, 0x03, 0x0F, 0x1F, 0x3F, 0x3F, 0x7E, 0x78, 0x70, 0x70, 0x3F, 0x3F, 0x1F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 79
    0x08, 0x0C, 0xFC, 0xFC, 0xFC, 0xFC, 0x0C, 0x0C, 0x9C, 0xFC, 0xF8, 0xF8, 0xF0, 0x00, 0x60, 0x7F, 0x7F, 0x7F, 0x7F, 0x63, 0x23, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 80
    0x80, 0xE0, 0xF0, 0xF8, 0xF8, 0x1C, 0x1C, 0x3C, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0x80, 0x87, 0xDF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0xF0, 0xF0, 0xBF, 0x9F, 0x9F, 0x8F, 0x87, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x60, 0x60, 0x60, 0x60, 0x60, 0x20, 0x00, // 81
    0x0C, 0xFC, 0xFC, 0xFC, 0xFC, 0x8C, 0x8C, 0xFC, 0xFC, 0xFC, 0x78, 0x30, 0x00, 0x00, 0x70, 0x7F, 0x7F, 0x7F, 0x7F, 0x61, 0x01, 0x0F, 0x3F, 0x7F, 0x7F, 0x7E, 0x78, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 82
    0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xCC, 0xCC, 0x98, 0x98, 0x38, 0x30, 0x3C, 0x39, 0x73, 0x63, 0x67, 0x67, 0x7F, 0x7F, 0x3F, 0x3F, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 83
    0x78, 0x3C, 0x1C, 0x0C, 0xFC, 0xFC, 0xFC, 0xFC, 0x0C, 0x1C, 0x3C, 0x38, 0x00, 0x00, 0x20, 0x70, 0x7F, 0x7F, 0x7F, 0x7F, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 84
    0x0C, 0xFC, 0xFC, 0xFC, 0xFC, 0x0C, 0x00, 0x00, 0x00, 0x0C, 0xFC, 0xFC, 0xFC, 0x0C, 0x00, 0x0F, 0x1F, 0x3F, 0x3F, 0x78, 0x70, 0x70, 0x70, 0x38, 0x3F, 0x1F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 85
    0x08, 0x0C, 0x3C, 0xFC, 0xFC, 0xFC, 0xFC, 0xC8, 0x00, 0x00, 0xC8, 0xFC, 0x7C, 0x1C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1F, 0x7F, 0x7F, 0x7F, 0x1F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 86
    0x08, 0x3C, 0xFC, 0xFC, 0xFC, 0xFC, 0x80, 0x0C, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xCC, 0x80, 0x8C, 0xFC, 0xFC, 0x1C, 0x0C, 0x00, 0x00, 0x01, 0x07, 0x3F, 0x7F, 0x7F, 0x3F, 0x0F, 0x01, 0x03, 0x0F, 0x3F, 0x7F, 0x7F, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 87
    0x08, 0x1C, 0x3C, 0x7C, 0xFC, 0xFC, 0xFC, 0xE8, 0xEC, 0x7C, 0x3C, 0x1C, 0x0C, 0x0C, 0x00, 0x60, 0x60, 0x70, 0x78, 0x7F, 0x2F, 0x07, 0x7F, 0x7F, 0x7F, 0x7E, 0x7C, 0x78, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 88
    0x08, 0x18, 0x3C, 0x7C, 0xFC, 0xFC, 0xF8, 0xE8, 0xC0, 0xF8, 0xFC, 0x3C, 0x1C, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x20, 0x60, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 89
    0x70, 0x7C, 0x1C, 0x0C, 0x88, 0xF8, 0xF8, 0xF8, 0xFC, 0xFC, 0x3C, 0x0C, 0x00, 0x40, 0x70, 0x7C, 0x7F, 0x7F, 0x7F, 0x7F, 0x67, 0x61, 0x60, 0x70, 0x7C, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 90
    0xFF, 0xFF, 0xFF, 0x03, 0x03, 0x03, 0xFF, 0xFF, 0xFF, 0x80, 0x80, 0x80, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 91
    0x0C, 0x1C, 0x78, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1F, 0x7C, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, // 92
    0x03, 0x03, 0x03, 0xFF, 0xFF, 0xFF, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xFF, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 93
    0x00, 0x00, 0xC0, 0xF8, 0x38, 0xF8, 0xC0, 0x00, 0x00, 0x0C, 0x0F, 0x07, 0x01, 0x00, 0x01, 0x07, 0x0F, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 95
    0x0C, 0x0C, 0x1C, 0x1C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 96
    0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x38, 0x7B, 0x7D, 0x7D, 0x64, 0x3F, 0x7F, 0x7F, 0x7F, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 97
    0x10, 0xF8, 0xF8, 0xF8, 0xFC, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x7F, 0x61, 0x61, 0x63, 0x3F, 0x3F, 0x1F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 98
    0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x0E, 0x3F, 0x3F, 0x7F, 0x78, 0x70, 0x71, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 99
    0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC8, 0xF8, 0xFC, 0xFC, 0xFC, 0x00, 0x0E, 0x3F, 0x7F, 0x7F, 0x61, 0x20, 0x7F, 0x7F, 0x7F, 0x7F, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 100
    0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x0E, 0x3F, 0x3F, 0x7F, 0x76, 0x66, 0x66, 0x67, 0x37, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 101
    0x30, 0xF8, 0xFC, 0xEC, 0xCC, 0x9C, 0xB8, 0x98, 0x00, 0x61, 0x7F, 0x7F, 0x7F, 0x7F, 0x71, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 102
    0x00, 0x80, 0xC0, 0xC0, 0x40, 0x40, 0x40, 0xC0, 0xC0, 0xC0, 0x60, 0x9B, 0xFF, 0xFF, 0x77, 0x74, 0x74, 0x74, 0xF7, 0xF3, 0xF1, 0x60, 0x00, 0x20, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x20, 0x20, 0x00, // 103
    0x18, 0xF8, 0xFC, 0xFC, 0xFC, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x60, 0x7F, 0x7F, 0x7F, 0x7F, 0x41, 0x01, 0x43, 0x7F, 0x7F, 0x7F, 0x7F, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 104
    0x98, 0x98, 0xDC, 0xDC, 0xC8, 0x00, 0x61, 0x7F, 0x7F, 0x7F, 0x7F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 105
    0x18, 0x98, 0x9C, 0xDC, 0xC8, 0xC0, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x60, 0x60, 0x60, 0x20, 0x20, // 106
    0x10, 0xF8, 0xF8, 0xF8, 0xFC, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x60, 0x7F, 0x7F, 0x7F, 0x7F, 0x2F, 0x1F, 0x7F, 0x7F, 0x78, 0x70, 0x60, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 107
    0x18, 0xF8, 0xFC, 0xFC, 0xFC, 0x00, 0x60, 0x7F, 0x7F, 0x7F, 0x7F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 108
    0x00, 0x80, 0x80, 0xC0, 0xC0, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x41, 0x7F, 0x7F, 0x7F, 0x7F, 0x63, 0x41, 0x7F, 0x7F, 0x7F, 0x7F, 0x63, 0x01, 0x7F, 0x7F, 0x7F, 0x7F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 109
    0x00, 0x80, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x61, 0x7F, 0x7F, 0x7F, 0x7F, 0x41, 0x01, 0x63, 0x7F, 0x7F, 0x7F, 0x7F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 110
    0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x1E, 0x3F, 0x3F, 0x7F, 0x78, 0x60, 0x61, 0x3F, 0x3F, 0x1F, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 111
    0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xC0, 0xC0, 0x00, 0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0x21, 0x61, 0x7F, 0x7F, 0x3F, 0x0F, 0x20, 0x60, 0x60, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, // 112
    0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x1E, 0x3F, 0x7F, 0x7F, 0x70, 0x60, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x60, 0x60, 0x60, 0x60, 0x60, // 113
    0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0xC0, 0xC0, 0xC0, 0x80, 0x60, 0x7F, 0x7F, 0x7F, 0x7F, 0x61, 0x23, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 114
    0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x18, 0x73, 0x67, 0x6F, 0x7F, 0x7E, 0x3C, 0x1D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 115
    0x80, 0xC0, 0xE0, 0xE0, 0xF0, 0xF0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x3F, 0x7F, 0x7F, 0x7F, 0x70, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 116
    0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x3F, 0x7F, 0x7F, 0x7F, 0x60, 0x20, 0x20, 0x7F, 0x7F, 0x7F, 0x7F, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 117
    0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0xC0, 0xC0, 0xC0, 0x40, 0x00, 0x00, 0x03, 0x0F, 0x3F, 0x7F, 0x7E, 0x1C, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 118
    0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x01, 0x07, 0x1F, 0x3F, 0x7F, 0x7E, 0x1E, 0x07, 0x0F, 0x3F, 0x7F, 0x7E, 0x1C, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 119
    0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0xC0, 0xC0, 0xC0, 0x40, 0x40, 0x60, 0x71, 0x7F, 0x0F, 0x7F, 0x7F, 0x7E, 0x7B, 0x71, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 120
    0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0xC3, 0x8F, 0x3F, 0xFF, 0xFF, 0x7C, 0x1E, 0x07, 0x00, 0x00, 0x20, 0x60, 0x60, 0x60, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // 121
    0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x40, 0x61, 0x71, 0x7C, 0x7F, 0x7F, 0x7F, 0x67, 0x71, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 122
    0x00, 0x00, 0xFC, 0xFE, 0xFE, 0x02, 0x02, 0x01, 0x01, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, // 123
    0xFE, 0xFE, 0xFF, 0xFF, 0xE0, 0xE0, // 124
    0x02, 0x02, 0xFE, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x01, 0x01, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, // 125
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0E, 0x06, 0x06, 0x0C, 0x0C, 0x0E, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 126
    0xFC, 0x1C, 0x24, 0xC4, 0x04, 0xC4, 0x24, 0x1C, 0xFC, 0x7F, 0x70, 0x48, 0x46, 0x41, 0x46, 0x48, 0x70, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Cooper21.h ===

/*
 *
 * Cooper21
 * Cooper std black size20
 *
 * created with GLCDFontCreator
 * original framework by F. Maximilian Thiele
 * Modified By Siddharth Kaul
 *
 *
 * File Name           : cooper21.h
 * Date                : 10.11.2012
 * Font size in bytes  : 23979
 * Font width          : 10
 * Font height         : 21
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef _Cooper21_H
#define _Cooper21_H

#define Cooper21_WIDTH 10
#define Cooper21_HEIGHT 21

GLCDFONTDECL(Cooper21) = {
    0x5D, 0xAB, // size
    0x0A, // width
    0x15, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x05, 0x05, 0x0A, 0x09, 0x0B, 0x11, 0x12, 0x05, 0x0A, 0x09, 
    0x08, 0x0A, 0x05, 0x06, 0x05, 0x0A, 0x0C, 0x0B, 0x0C, 0x0C, 
    0x0C, 0x0B, 0x0D, 0x0C, 0x0C, 0x0C, 0x05, 0x05, 0x0A, 0x0A, 
    0x0A, 0x0A, 0x0F, 0x12, 0x0F, 0x0E, 0x10, 0x0F, 0x0E, 0x10, 
    0x10, 0x09, 0x0E, 0x12, 0x0D, 0x12, 0x12, 0x0F, 0x0E, 0x0F, 
    0x10, 0x0C, 0x0F, 0x11, 0x11, 0x16, 0x10, 0x10, 0x0E, 0x08, 
    0x0A, 0x08, 0x0A, 0x0A, 0x05, 0x0C, 0x0D, 0x0B, 0x0E, 0x0B, 
    0x09, 0x0C, 0x0E, 0x07, 0x06, 0x10, 0x08, 0x14, 0x0E, 0x0D, 
    0x0E, 0x0E, 0x0B, 0x09, 0x0A, 0x0E, 0x0D, 0x15, 0x0D, 0x0D, 
    0x0B, 0x08, 0x02, 0x08, 0x0A, 0x0A, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x20 <space>
    0x78, 0xFC, 0xFC, 0xFC, 0x78, 0x60, 0xF1, 0xF3, 0xF1, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, // 33
    0x78, 0xFC, 0xFC, 0xFC, 0x78, 0x78, 0xFC, 0xFC, 0xFC, 0x78, 0x00, 0x01, 0x03, 0x01, 0x00, 0x00, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 34
    0x00, 0x00, 0x00, 0xE0, 0x20, 0x00, 0xE0, 0x60, 0x00, 0x1B, 0xDB, 0xFF, 0x1F, 0x9B, 0xFF, 0x1F, 0x1B, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 35
    0xC0, 0xE0, 0xF0, 0xF0, 0xFC, 0xBC, 0x30, 0x70, 0x70, 0xF0, 0x40, 0x79, 0x77, 0xE7, 0xCF, 0xCF, 0xCF, 0xFF, 0xFF, 0x7E, 0x7E, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, // 36
    0x70, 0xF8, 0xF8, 0xCC, 0x9C, 0xFC, 0xF8, 0x70, 0x80, 0xC0, 0x70, 0x38, 0x0C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x81, 0xC1, 0x71, 0x18, 0x0E, 0x03, 0x39, 0x7C, 0xFC, 0xE6, 0xCE, 0xFE, 0x7C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 37
    0x70, 0xF8, 0xF8, 0xFC, 0xFC, 0x8C, 0x8C, 0x1C, 0x18, 0x80, 0x80, 0xC0, 0xE8, 0xFC, 0xFC, 0xFC, 0x7C, 0x38, 0x0E, 0x3F, 0x7F, 0x7F, 0xFF, 0xF1, 0xE1, 0xCE, 0xCF, 0xC7, 0xE7, 0x7F, 0x7F, 0x7F, 0x3D, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 38
    0x78, 0xFC, 0xFC, 0xFC, 0x78, 0x00, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 39
    0xC0, 0xF0, 0xFC, 0xFE, 0xFE, 0x1F, 0x07, 0x03, 0x03, 0x02, 0x0F, 0x3F, 0xFF, 0xFF, 0xFF, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x18, 0x18, 0x18, 0x18, 0x10, // 40
    0x03, 0x03, 0x07, 0x1F, 0xFE, 0xFE, 0xFC, 0xF0, 0xC0, 0x00, 0x00, 0x80, 0xE0, 0xFF, 0xFF, 0xFF, 0x3F, 0x0F, 0x18, 0x18, 0x18, 0x18, 0x08, 0x08, 0x00, 0x00, 0x00, // 41
    0x10, 0xB0, 0xF0, 0xFC, 0xFC, 0xF0, 0xB0, 0x30, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 42
    0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0xFF, 0xFF, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 43
    0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0x00, 0x60, 0x78, 0x38, 0x08, // 44
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x1E, 0x1E, 0x1E, 0x1E, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 45
    0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xF8, 0xF8, 0xF8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, // 46
    0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xFC, 0x3C, 0x0C, 0x00, 0x80, 0xE0, 0xF8, 0x3E, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x30, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 47
    0x00, 0xC0, 0xE0, 0xE0, 0xF0, 0x70, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x00, 0x0F, 0x3F, 0x7F, 0x7F, 0xFF, 0xF0, 0xE0, 0xFF, 0x7F, 0x7F, 0x3F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 48
    0x40, 0x40, 0x60, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0x30, 0x20, 0x00, 0x40, 0xC0, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xC0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 49
    0x80, 0xC0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xC0, 0x00, 0x81, 0xC1, 0xE1, 0xF0, 0xFC, 0xFF, 0xFF, 0xFF, 0xE7, 0xE3, 0xF1, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, // 50
    0xC0, 0x40, 0x60, 0x60, 0xE0, 0xE0, 0xE0, 0xE0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x08, 0x1C, 0x0E, 0x0F, 0x9F, 0xFF, 0xFF, 0xFD, 0xFC, 0xF8, 0x70, 0x08, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x08, 0x08, 0x08, 0x00, 0x00, // 51
    0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0xF0, 0xF8, 0xF8, 0xF8, 0x00, 0x70, 0x7C, 0x7E, 0x73, 0x71, 0x70, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, // 52
    0x00, 0xC0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x70, 0x0E, 0x1F, 0x1F, 0x1F, 0x3E, 0xFE, 0xFC, 0xFC, 0xFC, 0xF8, 0x70, 0x08, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x08, 0x08, 0x00, 0x00, // 53
    0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xF8, 0x30, 0x10, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x3F, 0x7F, 0x7F, 0xFF, 0xF3, 0xE3, 0xE7, 0xFF, 0x7F, 0x7F, 0x3F, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 54
    0xE0, 0xF8, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x70, 0x01, 0x01, 0x01, 0x00, 0x80, 0xE0, 0xF8, 0xFE, 0x7F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, // 55
    0x00, 0xE0, 0xF0, 0xF0, 0xF8, 0xF8, 0x98, 0x98, 0xF8, 0xF0, 0xF0, 0xE0, 0x18, 0x7C, 0x7F, 0xE7, 0xC7, 0xCF, 0xCF, 0xFF, 0xFF, 0x7F, 0x7E, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 56
    0x80, 0xC0, 0xE0, 0xE0, 0xF0, 0x70, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x80, 0x07, 0x0F, 0x1F, 0x1F, 0x9F, 0xDC, 0xF8, 0xFF, 0xFF, 0x3F, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x08, 0x08, 0x18, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, // 57
    0xC0, 0xE0, 0xE0, 0xE0, 0xC0, 0x71, 0xFB, 0xFB, 0xFB, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, // 58
    0xC0, 0xE0, 0xE0, 0xE0, 0xC0, 0xF1, 0xF3, 0xF3, 0xF3, 0xE1, 0x00, 0x60, 0x78, 0x38, 0x08, // 59
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0x0C, 0x0E, 0x1E, 0x1F, 0x3F, 0x33, 0x33, 0x71, 0x61, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 60
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 61
    0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x61, 0x71, 0x33, 0x33, 0x3F, 0x1F, 0x1E, 0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 62
    0x70, 0x78, 0x78, 0x1C, 0xCC, 0xFC, 0xFC, 0xF8, 0xF8, 0x70, 0x00, 0x00, 0x60, 0xF3, 0xF3, 0xF3, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 63
    0x00, 0xC0, 0x30, 0x18, 0x88, 0xC8, 0xE4, 0xE4, 0x64, 0xC4, 0xEC, 0xE8, 0x18, 0xF0, 0xE0, 0x07, 0x3F, 0x70, 0x5E, 0x5F, 0x9F, 0x89, 0x8C, 0x9E, 0x9F, 0x5F, 0x68, 0x2C, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 64
    0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFC, 0x7C, 0xFE, 0xFC, 0xF8, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xFC, 0xFF, 0xCF, 0x0D, 0x0C, 0x0C, 0x4F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF0, 0xE0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 65
    0x00, 0x0C, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x0C, 0x0C, 0xFC, 0xFC, 0xFC, 0xF8, 0x70, 0x00, 0x80, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, 0xFF, 0x7F, 0x7E, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 66
    0x80, 0xE0, 0xF0, 0xF8, 0xF8, 0x3C, 0x1C, 0x1C, 0x1C, 0x3C, 0x78, 0xF8, 0xF8, 0xF0, 0x07, 0x1F, 0x3F, 0x7F, 0x7F, 0xFE, 0xF8, 0xF8, 0xF0, 0xF0, 0x70, 0x70, 0x78, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 67
    0x00, 0x0C, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x0C, 0x0C, 0x1C, 0x3C, 0xF8, 0xF8, 0xF8, 0xF0, 0xC0, 0x40, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xC0, 0xE0, 0xF0, 0x7F, 0x7F, 0x3F, 0x3F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 68
    0x08, 0x1C, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x0C, 0x0C, 0xCC, 0xCC, 0x1C, 0x3C, 0x38, 0x00, 0x80, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0xC3, 0xCF, 0xC7, 0xE0, 0xF0, 0x78, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 69
    0x08, 0x0C, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x0C, 0x0C, 0xCC, 0x9C, 0x1C, 0x7C, 0x78, 0x40, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0x43, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 70
    0x80, 0xE0, 0xF0, 0xF8, 0xF8, 0x3C, 0x0C, 0x0C, 0x0C, 0x1C, 0x3C, 0x7C, 0x7C, 0x78, 0x00, 0x00, 0x07, 0x1F, 0x3F, 0x7F, 0x7F, 0x7C, 0xF0, 0xE0, 0xE4, 0xE6, 0x7E, 0x7E, 0x3E, 0x1E, 0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 71
    0x00, 0x18, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x1C, 0x00, 0x18, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x1C, 0x40, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x43, 0x03, 0x43, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 72
    0x08, 0x1C, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x0C, 0x08, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 73
    0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x1C, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x1C, 0x08, 0x38, 0x78, 0x7C, 0xF8, 0xF8, 0xC0, 0xE0, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 74
    0x08, 0x1C, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x8C, 0xC0, 0xF8, 0xFC, 0x3C, 0x1C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0x0F, 0x1F, 0x3F, 0x7F, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 75
    0x08, 0x1C, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xE0, 0xF0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 76
    0x08, 0x1C, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF0, 0x80, 0x00, 0xC0, 0xF0, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0x1C, 0xC0, 0xE0, 0xFF, 0xFF, 0xFF, 0xC3, 0x0F, 0x3F, 0x7F, 0x3F, 0x0F, 0x43, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 77
    0x08, 0x1C, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0xC0, 0x88, 0x0C, 0xFC, 0xFC, 0xFC, 0x1C, 0x08, 0x80, 0xE0, 0xFF, 0xFF, 0xFF, 0xE3, 0x43, 0x07, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 78
    0x80, 0xE0, 0xF0, 0xF8, 0xF8, 0x3C, 0x1C, 0x1C, 0x3C, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0x80, 0x07, 0x1F, 0x3F, 0x7F, 0x7F, 0xFE, 0xF0, 0xE0, 0xE0, 0xF0, 0x7F, 0x7F, 0x3F, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 79
    0x08, 0x0C, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x0C, 0x1C, 0xFC, 0xFC, 0xF8, 0xF8, 0xE0, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x46, 0x06, 0x07, 0x07, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 80
    0x80, 0xE0, 0xF0, 0xF8, 0xF8, 0x3C, 0x1C, 0x1C, 0x3C, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0x80, 0x0F, 0xBF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF0, 0xE0, 0xE0, 0xE1, 0xFF, 0x7F, 0x3F, 0x3F, 0x0F, 0x08, 0x08, 0x08, 0x18, 0x18, 0x38, 0x38, 0x38, 0x78, 0x78, 0x78, 0x70, 0x70, 0x30, 0x10, // 81
    0x08, 0x0C, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x0C, 0x0C, 0xFC, 0xFC, 0xFC, 0xF8, 0x70, 0x00, 0x00, 0x80, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0x03, 0x1F, 0x7F, 0xFF, 0xFE, 0xFC, 0xF8, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 82
    0xE0, 0xF8, 0xF8, 0xFC, 0xFC, 0xCC, 0xCC, 0x8C, 0x9C, 0x3C, 0x3C, 0x30, 0x78, 0x73, 0xE3, 0xC7, 0xC7, 0xCF, 0xCF, 0xFF, 0x7F, 0x7F, 0x7F, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 83
    0x60, 0x78, 0x7C, 0x3C, 0x1C, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x1C, 0x3C, 0x7C, 0x7C, 0x70, 0x00, 0x00, 0x00, 0x40, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 84
    0x0C, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x0C, 0x08, 0x00, 0x00, 0x08, 0x0C, 0xFC, 0xFC, 0xFC, 0x0C, 0x08, 0x00, 0x1F, 0x3F, 0x7F, 0x7F, 0x7F, 0xF8, 0xE0, 0xE0, 0xE0, 0x60, 0x70, 0x7F, 0x3F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 85
    0x08, 0x1C, 0x3C, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x80, 0x00, 0x00, 0xC8, 0xFC, 0xFC, 0x3C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1F, 0x7F, 0xFF, 0xFF, 0x7E, 0x3F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 86
    0x08, 0x1C, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x80, 0x08, 0x9C, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xC8, 0x00, 0x8C, 0xFC, 0xFC, 0x3C, 0x0C, 0x00, 0x00, 0x00, 0x03, 0x1F, 0x7F, 0xFF, 0xFF, 0x7F, 0x1F, 0x07, 0x03, 0x0F, 0x7F, 0xFF, 0xFF, 0x7F, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 87
    0x08, 0x1C, 0x3C, 0x7C, 0xFC, 0xFC, 0xFC, 0xFC, 0xE8, 0xEC, 0x7C, 0x3C, 0x1C, 0x0C, 0x0C, 0x00, 0xC0, 0xC0, 0xE0, 0xF0, 0xF8, 0xFF, 0x0F, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0xF8, 0xF0, 0xE0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 88
    0x0C, 0x0C, 0x1E, 0x7E, 0xFE, 0xFE, 0xFC, 0xFC, 0xE8, 0xC0, 0xFC, 0x7E, 0x3E, 0x1E, 0x0E, 0x04, 0x00, 0x00, 0x00, 0x40, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 89
    0x70, 0x7C, 0x3C, 0x1C, 0x8C, 0xCC, 0xFC, 0xFC, 0xFC, 0xFC, 0x7E, 0x1E, 0x0C, 0x00, 0x80, 0xE0, 0xF8, 0xFE, 0xFF, 0xFF, 0xFF, 0xDF, 0xC7, 0xC1, 0xE0, 0xF0, 0xF8, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 90
    0xFE, 0xFF, 0xFF, 0xFF, 0x03, 0x03, 0x03, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x08, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x10, // 91
    0x0C, 0x3C, 0x7C, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1F, 0x7C, 0xF0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x38, 0x38, // 92
    0x02, 0x03, 0x03, 0x03, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x08, // 93
    0x00, 0x00, 0x80, 0xF0, 0xF8, 0xF8, 0xF0, 0x80, 0x00, 0x00, 0x18, 0x1E, 0x0F, 0x03, 0x00, 0x00, 0x03, 0x0F, 0x1E, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, // 95
    0x0C, 0x0C, 0x1C, 0x1C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 96
    0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x60, 0x73, 0xFB, 0xFB, 0xF9, 0xC8, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 97
    0x10, 0xF8, 0xF8, 0xF8, 0xFC, 0xFC, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x7F, 0x7F, 0x7F, 0x7F, 0xFF, 0xC1, 0xC3, 0xFF, 0x7F, 0x7F, 0x3F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 98
    0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x1E, 0x3F, 0x7F, 0x7F, 0xFF, 0xF0, 0xE0, 0xE1, 0xE3, 0x77, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 99
    0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xD0, 0xD8, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x1E, 0x7F, 0x7F, 0xFF, 0xFF, 0xE1, 0xC0, 0x60, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 100
    0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x0E, 0x3F, 0x7F, 0x7F, 0xFF, 0xF6, 0xE6, 0xE7, 0x67, 0x77, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 101
    0x00, 0x70, 0xF8, 0xFC, 0xCC, 0x8C, 0x1C, 0x3C, 0x38, 0x83, 0xC3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE3, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 102
    0x00, 0x80, 0x80, 0xC0, 0xC0, 0x40, 0x40, 0xC0, 0xC0, 0xC0, 0xC0, 0x60, 0x63, 0xF7, 0xFF, 0xFF, 0xCF, 0xC8, 0xC8, 0xCF, 0xE7, 0xC7, 0xC3, 0x80, 0x10, 0x38, 0x78, 0x68, 0x68, 0x68, 0x68, 0x78, 0x38, 0x38, 0x18, 0x08, // 103
    0x18, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x81, 0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 104
    0x98, 0x98, 0xD8, 0xDC, 0xDC, 0xC8, 0x00, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 105
    0x98, 0x98, 0xD8, 0xDC, 0xDC, 0xC8, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x60, 0x78, 0x78, 0x78, 0x38, 0x18, // 106
    0x20, 0x10, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x4E, 0x3F, 0x7F, 0xFF, 0xFD, 0xF8, 0xE0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 107
    0x10, 0x18, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 108
    0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x41, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x81, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x43, 0xFF, 0xFF, 0xFF, 0xFF, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 109
    0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x41, 0x01, 0xC3, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 110
    0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x1C, 0x7F, 0x7F, 0xFF, 0xFF, 0xF0, 0xC0, 0xC3, 0xFF, 0x7F, 0x7F, 0x3F, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 111
    0x00, 0x80, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xC0, 0xC0, 0x00, 0x01, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x00, 0x38, 0x38, 0x78, 0x78, 0x78, 0x78, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 112
    0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x1E, 0x7F, 0x7F, 0xFF, 0xFF, 0xE1, 0x40, 0x41, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x78, 0x78, 0x78, 0x78, 0x78, 0x30, // 113
    0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0x43, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 114
    0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x73, 0xEF, 0xCF, 0xDF, 0xFF, 0xFE, 0xFC, 0x7D, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 115
    0xC0, 0xC0, 0xE0, 0xE0, 0xF0, 0xF8, 0xF0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xE0, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 116
    0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xC0, 0x40, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 117
    0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0x40, 0x00, 0x01, 0x07, 0x0F, 0x3F, 0xFF, 0xFE, 0x7C, 0x3E, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 118
    0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x01, 0x03, 0x0F, 0x3F, 0x7F, 0xFF, 0xFC, 0x3C, 0x0F, 0x0F, 0x1F, 0x3F, 0xFF, 0xFE, 0x7C, 0x1F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 119
    0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE1, 0xF3, 0xFF, 0x0F, 0xDF, 0xFF, 0xFE, 0xFF, 0xF1, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 120
    0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x03, 0x0F, 0x3F, 0xFF, 0xFF, 0xFE, 0xF8, 0x7C, 0x0F, 0x03, 0x00, 0x00, 0x38, 0x78, 0x78, 0x60, 0x60, 0x38, 0x38, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, // 121
    0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x83, 0xE1, 0xF8, 0xFC, 0xFF, 0xFF, 0xFF, 0xCF, 0xC3, 0xE1, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 122
    0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0x01, 0x01, 0x03, 0x03, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x08, 0x18, 0x18, 0x18, 0x10, 0x10, // 123
    0xFE, 0xFE, 0xFF, 0xFF, 0xF8, 0xF8, // 124
    0x01, 0x01, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0x03, 0x03, 0x10, 0x10, 0x18, 0x18, 0x18, 0x08, 0x00, 0x00, // 125
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x1E, 0x1E, 0x0E, 0x0C, 0x0C, 0x1C, 0x1E, 0x1E, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 126
    0xFC, 0x1C, 0x34, 0xC4, 0x84, 0x84, 0xC4, 0x34, 0x1C, 0xFC, 0xFF, 0xE0, 0xB0, 0x8C, 0x87, 0x87, 0x8C, 0xB0, 0xE0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Cooper26.h ===

/*
 *
 * Cooper26
 * Cooper std black size24
 *
 * created with GLCDFontCreator
 * original framework by F. Maximilian Thiele
 * Modified By Siddharth Kaul
 *
 *
 * File Name           : cooper_std_black_size24.h
 * Date                : 10.11.2012
 * Font size in bytes  : 34188
 * Font width          : 10
 * Font height         : 26
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef _Cooper26_H
#define _Cooper26_H

#define Cooper26_WIDTH 10
#define Cooper26_HEIGHT 26

GLCDFONTDECL(Cooper26) = {
    0x85, 0x8C, // size
    0x0A, // width
    0x1A, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x05, 0x05, 0x0C, 0x09, 0x0C, 0x14, 0x16, 0x05, 0x0A, 0x0A, 
    0x09, 0x0B, 0x06, 0x07, 0x05, 0x0C, 0x0D, 0x0D, 0x0E, 0x0F, 
    0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x05, 0x06, 0x0C, 0x0C, 
    0x0C, 0x0B, 0x11, 0x14, 0x11, 0x11, 0x12, 0x10, 0x10, 0x13, 
    0x13, 0x09, 0x0F, 0x14, 0x0F, 0x16, 0x14, 0x12, 0x10, 0x12, 
    0x14, 0x0F, 0x12, 0x14, 0x15, 0x1A, 0x14, 0x13, 0x11, 0x09, 
    0x0C, 0x09, 0x0C, 0x0C, 0x07, 0x0D, 0x0F, 0x0C, 0x0F, 0x0C, 
    0x0A, 0x0E, 0x11, 0x08, 0x07, 0x12, 0x08, 0x18, 0x0F, 0x0E, 
    0x10, 0x10, 0x0D, 0x0A, 0x0B, 0x10, 0x0F, 0x18, 0x0F, 0x0F, 
    0x0D, 0x09, 0x03, 0x09, 0x0B, 0x0C, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x20 <space>
    0xF0, 0xF8, 0xF8, 0xF8, 0xF0, 0x01, 0x8F, 0x9F, 0x8F, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, // 33
    0xF0, 0xF8, 0xF8, 0xF8, 0xF0, 0x00, 0x00, 0xF0, 0xF8, 0xF8, 0xF8, 0xF0, 0x01, 0x07, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 34
    0x00, 0x00, 0x00, 0xC0, 0x40, 0x00, 0xC0, 0xC0, 0x00, 0xCC, 0xCC, 0xFC, 0xFF, 0xCC, 0xFC, 0xFF, 0xCD, 0xCC, 0x00, 0x0E, 0x0F, 0x00, 0x08, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 35
    0x00, 0x80, 0xC0, 0xC0, 0xF0, 0xF0, 0xF0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x8F, 0x3F, 0x3F, 0x7F, 0x7F, 0xFC, 0xFC, 0xF8, 0xF9, 0xF3, 0xE3, 0xC3, 0x07, 0x0F, 0x1E, 0x1C, 0x7C, 0x7C, 0x7C, 0x1F, 0x1F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 36
    0xC0, 0xF0, 0xF0, 0xF8, 0x18, 0x38, 0xF8, 0xF0, 0xF0, 0xE0, 0x00, 0x80, 0xE0, 0x70, 0x38, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x07, 0x0F, 0x0F, 0x0E, 0x87, 0xC7, 0x73, 0x3D, 0xCE, 0xF7, 0xF1, 0xF8, 0x18, 0x38, 0xF8, 0xF0, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x08, 0x0E, 0x07, 0x01, 0x00, 0x00, 0x01, 0x07, 0x07, 0x0F, 0x0F, 0x0E, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 37
    0x00, 0x00, 0xE0, 0xF0, 0xF8, 0xF8, 0xFC, 0x1C, 0x1C, 0x1C, 0x38, 0x38, 0x00, 0x00, 0x00, 0x20, 0xB0, 0xF8, 0xF8, 0xF8, 0xF0, 0xE0, 0x70, 0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xC7, 0x07, 0x02, 0x70, 0x3C, 0x1E, 0x1F, 0x9F, 0xFF, 0xFF, 0xFF, 0xF7, 0x63, 0x01, 0x00, 0x00, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 38
    0xF0, 0xF8, 0xF8, 0xF8, 0xF0, 0x01, 0x07, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 39
    0x00, 0xE0, 0xF8, 0xFC, 0xFE, 0x7E, 0x0F, 0x07, 0x07, 0x07, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x1F, 0x3F, 0x3F, 0x78, 0x70, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 40
    0x07, 0x07, 0x07, 0x0F, 0x7E, 0xFE, 0xFC, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x70, 0x70, 0x70, 0x78, 0x3F, 0x3F, 0x1F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 41
    0x60, 0xE0, 0xE0, 0xF8, 0xF8, 0xC0, 0xE0, 0xE0, 0x40, 0x04, 0x0E, 0x07, 0x03, 0x07, 0x0F, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 42
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x70, 0x70, 0x70, 0xFF, 0xFF, 0xFF, 0x70, 0x70, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 43
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0x00, 0x01, 0x07, 0xCF, 0xFF, 0x7F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 44
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 45
    0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0x80, 0x80, 0x07, 0x0F, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, // 46
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF8, 0x78, 0x18, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF8, 0x7E, 0x1F, 0x07, 0x01, 0x00, 0x00, 0x60, 0x78, 0x7E, 0x3F, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 47
    0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x78, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0x03, 0x0F, 0xFF, 0xFF, 0xFF, 0xFE, 0x78, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 48
    0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0x40, 0x00, 0x00, 0x01, 0x01, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x02, 0x06, 0x06, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 49
    0x00, 0x00, 0x80, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x04, 0x07, 0x07, 0x83, 0xC3, 0xE3, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x87, 0x80, 0x0C, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x1F, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 50
    0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0xE1, 0xE1, 0xF3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xE0, 0xC0, 0x80, 0x20, 0x30, 0x70, 0x70, 0x70, 0x70, 0x70, 0x78, 0x7F, 0x3F, 0x3F, 0x3F, 0x1F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 51
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0x70, 0x18, 0x0C, 0x06, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 52
    0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x70, 0xFE, 0xFF, 0xFF, 0xFF, 0xFB, 0xF3, 0xF3, 0xF3, 0xF3, 0xE3, 0xE3, 0xC3, 0x81, 0x18, 0x30, 0x70, 0x70, 0x70, 0x79, 0x7F, 0x7F, 0x3F, 0x3F, 0x3F, 0x1F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 53
    0x00, 0x00, 0x80, 0xE0, 0xF0, 0xF0, 0xE0, 0x60, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x1C, 0x1C, 0x3E, 0xFE, 0xFC, 0xFC, 0xF8, 0xF0, 0x00, 0x03, 0x07, 0x07, 0x07, 0x0F, 0x0E, 0x0E, 0x0E, 0x07, 0x07, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 54
    0x80, 0xC0, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x87, 0xE7, 0xFF, 0xFF, 0x7F, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x78, 0x7E, 0xFF, 0x7F, 0x1F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 55
    0x00, 0x00, 0xC0, 0xE0, 0xE0, 0xF0, 0xF0, 0x70, 0x70, 0x70, 0xE0, 0xE0, 0xE0, 0xC0, 0xC0, 0xE7, 0xFF, 0xFF, 0x3F, 0x3F, 0x3F, 0x3E, 0x7E, 0xFC, 0xFF, 0xFF, 0xFF, 0xE7, 0x00, 0x03, 0x07, 0x07, 0x07, 0x0F, 0x0E, 0x0E, 0x0E, 0x0F, 0x07, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 56
    0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x3C, 0xFF, 0xFF, 0xFF, 0xFF, 0xE3, 0xC3, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0x7C, 0x00, 0x00, 0x00, 0x21, 0x31, 0x79, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 57
    0x00, 0x80, 0x80, 0x80, 0x00, 0x0F, 0x9F, 0xDF, 0x9F, 0x0F, 0x07, 0x0F, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, // 58
    0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x0F, 0x9F, 0xDF, 0xDF, 0xCF, 0x02, 0x01, 0x07, 0xCF, 0xFF, 0x7F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 59
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xF0, 0xF0, 0xF8, 0xF8, 0xDC, 0x9C, 0x9C, 0x8E, 0x0E, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x07, 0x07, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 60
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 61
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x0E, 0x8E, 0x9C, 0x9C, 0xDC, 0xF8, 0xF8, 0xF0, 0xF0, 0x70, 0x0E, 0x07, 0x07, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 62
    0xC0, 0xE0, 0xF0, 0xF0, 0x78, 0x38, 0xF8, 0xF8, 0xF0, 0xE0, 0xC0, 0x01, 0x03, 0x01, 0x81, 0x9C, 0xBE, 0x1F, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x07, 0x0F, 0x0F, 0x0F, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 63
    0x00, 0x80, 0xC0, 0x60, 0x30, 0x30, 0x10, 0x18, 0x18, 0x18, 0x18, 0x30, 0xB0, 0x30, 0xE0, 0xC0, 0x00, 0x7E, 0xFF, 0x80, 0xF0, 0xF8, 0xFE, 0xFE, 0x4F, 0xF3, 0xFE, 0xFF, 0x7F, 0x63, 0x70, 0x38, 0x1F, 0x07, 0x00, 0x01, 0x03, 0x07, 0x06, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x06, 0x06, 0x02, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 64
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF8, 0xFF, 0xFF, 0xE3, 0xE3, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0xE0, 0x80, 0x00, 0x00, 0x0C, 0x0E, 0x0F, 0x0F, 0x0F, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x04, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 65
    0x10, 0x38, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x38, 0x38, 0x78, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1C, 0x1C, 0x3E, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xF0, 0xE0, 0x04, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 66
    0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF0, 0x70, 0x38, 0x38, 0x38, 0x78, 0x78, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0x3E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x83, 0x83, 0xC3, 0x81, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 67
    0x10, 0x38, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x38, 0x38, 0x38, 0x78, 0xF8, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 68
    0x30, 0x78, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x38, 0x38, 0x38, 0x38, 0x38, 0x78, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1C, 0x1C, 0x7F, 0x7F, 0x3E, 0x00, 0x00, 0xC0, 0x80, 0x0C, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 69
    0x10, 0x38, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x78, 0x38, 0x38, 0x38, 0x38, 0x78, 0x78, 0xF8, 0xF0, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1C, 0x1C, 0x3C, 0x7F, 0x7F, 0x3E, 0x00, 0x01, 0x01, 0x0C, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 70
    0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF0, 0xF0, 0x78, 0x38, 0x38, 0x38, 0x78, 0x78, 0xF8, 0xF8, 0xF8, 0xE0, 0x00, 0x00, 0x3E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x80, 0x00, 0x20, 0x30, 0x38, 0xF8, 0xF8, 0xF9, 0xF9, 0xF8, 0x38, 0x30, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0E, 0x0E, 0x0F, 0x07, 0x07, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 71
    0x20, 0x30, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x38, 0x30, 0x00, 0x10, 0x38, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x38, 0x10, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x04, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x06, 0x04, 0x00, 0x04, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 72
    0x30, 0x38, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x38, 0x10, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x04, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 73
    0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x30, 0x78, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x38, 0x10, 0xC0, 0xE0, 0xE0, 0xE0, 0xC0, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0F, 0x0E, 0x0E, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 74
    0x30, 0x78, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x38, 0x20, 0x80, 0xF0, 0xF8, 0xF8, 0x78, 0x78, 0x38, 0x38, 0x30, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7E, 0x7F, 0x7F, 0xFF, 0xFF, 0xFD, 0xF8, 0xF0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x04, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x04, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 75
    0x30, 0x38, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0x80, 0x0C, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 76
    0x10, 0x38, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0xF8, 0xF8, 0xF8, 0xF8, 0x38, 0x10, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x0F, 0x1F, 0x7F, 0xFF, 0xFF, 0xFE, 0xFC, 0x7E, 0x1F, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x04, 0x0E, 0x0F, 0x0F, 0x0F, 0x0E, 0x04, 0x00, 0x01, 0x07, 0x07, 0x01, 0x00, 0x04, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 77
    0x30, 0x78, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x10, 0x38, 0xF8, 0xF8, 0xF8, 0x38, 0x10, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFE, 0xFE, 0xFC, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x04, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 78
    0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF0, 0xF0, 0x78, 0x78, 0xF8, 0xF8, 0xF0, 0xF0, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x1E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xC0, 0x80, 0x00, 0x01, 0x87, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3C, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 79
    0x30, 0x38, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x38, 0x38, 0x38, 0x78, 0xF8, 0xF0, 0xF0, 0xE0, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x38, 0x38, 0x38, 0x3C, 0x3F, 0x1F, 0x1F, 0x0F, 0x03, 0x04, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 80
    0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF0, 0xF0, 0x78, 0x78, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x80, 0x00, 0x3C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x80, 0x00, 0x00, 0x01, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7C, 0x18, 0x1C, 0x1D, 0x1F, 0x3F, 0x3F, 0x7F, 0x7F, 0x7F, 0x7E, 0xFE, 0xFF, 0xFF, 0xE7, 0xE3, 0x63, 0x61, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 81
    0x10, 0x38, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x38, 0x38, 0x38, 0x78, 0xF8, 0xF8, 0xF8, 0xF0, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1C, 0x1C, 0x1C, 0x3E, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xE1, 0xC0, 0x00, 0x00, 0x04, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0C, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 82
    0x80, 0xE0, 0xF0, 0xF0, 0xF0, 0xF8, 0xF8, 0x38, 0x38, 0x38, 0x78, 0xF8, 0xF8, 0xF0, 0xC0, 0xE3, 0xCF, 0x9F, 0x1F, 0x3F, 0x3F, 0x3F, 0x7F, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 0xF9, 0xF0, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 83
    0x80, 0xF0, 0xF8, 0xF8, 0x78, 0x38, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x38, 0x38, 0xF8, 0xF8, 0xF0, 0xE0, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 84
    0x10, 0x38, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x38, 0x10, 0x00, 0x00, 0x00, 0x10, 0x38, 0xF8, 0xF8, 0xF8, 0x38, 0x10, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 85
    0x30, 0x30, 0x78, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x10, 0x00, 0x00, 0x00, 0x10, 0xF8, 0xF8, 0xF8, 0xF8, 0x38, 0x18, 0x18, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF8, 0xFC, 0x7F, 0x1F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x0F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 86
    0x30, 0x78, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x00, 0x10, 0x38, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x00, 0x00, 0x10, 0xF8, 0xF8, 0xF8, 0x78, 0x10, 0x00, 0x00, 0x03, 0x0F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xFC, 0x7F, 0x1F, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFE, 0x3F, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x0F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 87
    0x10, 0x30, 0x78, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x80, 0x90, 0xF8, 0xF8, 0x78, 0x38, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xE3, 0xF7, 0xFF, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xF9, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x06, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x06, 0x00, 0x04, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 88
    0x18, 0x38, 0x78, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x00, 0x00, 0xF8, 0xF8, 0xF8, 0xF8, 0x38, 0x38, 0x18, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 89
    0xE0, 0xF0, 0xF8, 0x78, 0x38, 0x38, 0x38, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x3C, 0x08, 0x00, 0x01, 0x01, 0x81, 0xE0, 0xF0, 0xFC, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x0F, 0x03, 0x00, 0xC0, 0xC0, 0xC0, 0x0C, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 90
    0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x07, 0x07, 0x06, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x7F, 0x7F, 0x7F, 0x7F, 0x70, 0x70, 0x70, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 91
    0x18, 0x78, 0xF8, 0xF0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x3F, 0x7E, 0xF8, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1F, 0x7F, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 92
    0x06, 0x07, 0x07, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x30, 0x70, 0x70, 0x70, 0x7F, 0x7F, 0x7F, 0x7F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 93
    0x00, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0xF0, 0xE0, 0x80, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xFE, 0x3F, 0x0F, 0x03, 0x03, 0x0F, 0x3F, 0xFE, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 95
    0x08, 0x1C, 0x1C, 0x3C, 0x3C, 0x30, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 96
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xCE, 0xEE, 0xE7, 0x63, 0x63, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0x00, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x0E, 0x06, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 97
    0x40, 0x60, 0xF0, 0xF0, 0xF0, 0xF0, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0E, 0x0F, 0x1F, 0xFF, 0xFF, 0xFE, 0xFE, 0x78, 0x00, 0x00, 0x03, 0x03, 0x03, 0x07, 0x0F, 0x0E, 0x0E, 0x0F, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 98
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFC, 0xFE, 0xFE, 0xFE, 0xCF, 0x87, 0x07, 0x1F, 0x3E, 0xBE, 0x1C, 0x00, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 99
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x30, 0xF0, 0xF8, 0xF8, 0xF8, 0xF8, 0x00, 0xF0, 0xFC, 0xFE, 0xFE, 0xFF, 0x0F, 0x07, 0x07, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x0E, 0x06, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 100
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF8, 0xFC, 0xFE, 0xFF, 0x77, 0x77, 0x7F, 0x7E, 0x7E, 0x7C, 0x78, 0x00, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0E, 0x0E, 0x06, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 101
    0xC0, 0xF0, 0xF0, 0xF8, 0x38, 0x38, 0x78, 0xF8, 0xF0, 0xF0, 0x1D, 0x1F, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0x1C, 0x1C, 0x00, 0x04, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 102
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x38, 0x7C, 0xFE, 0xFE, 0xFF, 0xC3, 0xC3, 0xFF, 0x7F, 0x7F, 0x3F, 0x1F, 0x03, 0x30, 0x7F, 0x7F, 0xFF, 0xFF, 0xDE, 0xDE, 0xDE, 0xDE, 0xFE, 0x7E, 0x7E, 0x3E, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 103
    0x40, 0x70, 0xF0, 0xF0, 0xF8, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x04, 0x04, 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0x00, 0x04, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x04, 0x00, 0x00, 0x0C, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 104
    0x60, 0x70, 0x70, 0x70, 0x78, 0x70, 0x30, 0x00, 0x04, 0x0E, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0x00, 0x04, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 105
    0x60, 0x70, 0x70, 0x70, 0x78, 0x70, 0x30, 0x08, 0x0E, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x60, 0xE0, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 106
    0x40, 0x60, 0xF0, 0xF0, 0xF0, 0xF0, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0xF8, 0xFE, 0xFF, 0xFF, 0xFF, 0xC7, 0x87, 0x02, 0x00, 0x00, 0x04, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x06, 0x00, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 107
    0x20, 0x70, 0xF0, 0xF8, 0xF8, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x04, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 108
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x0C, 0x06, 0x0E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x0C, 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x04, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x06, 0x00, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x06, 0x00, 0x06, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 109
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0x0C, 0x0E, 0x1F, 0xFF, 0xFF, 0xFE, 0xFE, 0xF8, 0x00, 0x0C, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x04, 0x00, 0x0C, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 110
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF8, 0xFC, 0xFE, 0xFE, 0x87, 0x07, 0x0F, 0x1F, 0xFF, 0xFE, 0xFE, 0xFC, 0xF0, 0x00, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 111
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x08, 0x1C, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0x20, 0x70, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xEE, 0x4E, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 112
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFC, 0xFE, 0xFE, 0xFE, 0xFF, 0x0F, 0x07, 0x07, 0x0F, 0xFF, 0xFE, 0xFE, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x4E, 0x6E, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 113
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0E, 0x1F, 0x1F, 0x1F, 0x1F, 0x0E, 0x04, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 114
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0xBE, 0x7E, 0x7F, 0xFF, 0xF7, 0xE7, 0xEF, 0xDF, 0x9E, 0x07, 0x0F, 0x0F, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 115
    0x00, 0x00, 0x80, 0xC0, 0xC0, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x06, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 116
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x04, 0x06, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x0E, 0x06, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 117
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF2, 0xE0, 0x7B, 0x3F, 0x0F, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 118
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x07, 0x1F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFE, 0xF0, 0xE2, 0xF7, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xE0, 0x7B, 0x1F, 0x07, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 119
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x07, 0x8F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0xFF, 0xDF, 0x07, 0x03, 0x03, 0x0C, 0x0C, 0x0F, 0x0F, 0x0F, 0x00, 0x04, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 120
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x07, 0x0F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF2, 0xE0, 0xF2, 0x7F, 0x0F, 0x07, 0x03, 0x10, 0x78, 0xF8, 0xF8, 0xF0, 0xE3, 0x7F, 0x7F, 0x3F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 121
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x1F, 0x8F, 0xC7, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x1F, 0x87, 0x80, 0x04, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 122
    0x00, 0x00, 0xF8, 0xFC, 0xFE, 0xFE, 0xFE, 0x06, 0x06, 0x18, 0x18, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x3F, 0x7F, 0x7F, 0x7F, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 123
    0xFC, 0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, // 124
    0x06, 0x06, 0xFE, 0xFE, 0xFE, 0xFC, 0xF8, 0x00, 0x00, 0x00, 0x00, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0x18, 0x18, 0x60, 0x60, 0x7F, 0x7F, 0x7F, 0x3F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 125
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF0, 0xF0, 0x70, 0x70, 0x60, 0xE0, 0xE0, 0xF0, 0xF0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 126
    0xF8, 0x38, 0x68, 0x88, 0x08, 0x08, 0x08, 0x08, 0x88, 0x68, 0x38, 0xF8, 0xFF, 0x00, 0x00, 0xC1, 0x63, 0x1C, 0x1C, 0x63, 0xC1, 0x00, 0x00, 0xFF, 0x0F, 0x0E, 0x0B, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0B, 0x0E, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Corsiva_12.h ===

/*
 *
 * Corsiva_12
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : corsiva_12.h
 * Date                : 29.01.2005
 * Font size in bytes  : 5690
 * Font width          : 10
 * Font height         : 11
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef CORSIVA_12_H
#define CORSIVA_12_H

#define CORSIVA_12_WIDTH 10
#define CORSIVA_12_HEIGHT 11

GLCDFONTDECL(Corsiva_12) = {
    0x16, 0x3A, // size
    0x0A, // width
    0x0B, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x03, 0x02, 0x02, 0x06, 0x05, 0x07, 0x09, 0x01, 0x03, 0x04, 
    0x02, 0x05, 0x02, 0x03, 0x01, 0x05, 0x05, 0x04, 0x05, 0x04, 
    0x05, 0x06, 0x05, 0x05, 0x05, 0x05, 0x02, 0x03, 0x05, 0x05, 
    0x05, 0x04, 0x07, 0x07, 0x07, 0x06, 0x08, 0x07, 0x07, 0x07, 
    0x0A, 0x05, 0x06, 0x09, 0x07, 0x09, 0x0A, 0x06, 0x07, 0x09, 
    0x09, 0x06, 0x08, 0x08, 0x08, 0x0B, 0x09, 0x09, 0x07, 0x03, 
    0x03, 0x04, 0x03, 0x06, 0x02, 0x04, 0x04, 0x04, 0x06, 0x04, 
    0x06, 0x06, 0x04, 0x03, 0x04, 0x06, 0x03, 0x06, 0x04, 0x04, 
    0x05, 0x05, 0x04, 0x04, 0x04, 0x04, 0x06, 0x08, 0x07, 0x05, 
    0x06, 0x03, 0x01, 0x04, 0x05, 0x06, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 32
    0x80, 0x3E, 0x00, 0x00, // 33
    0x08, 0x06, 0x00, 0x00, // 34
    0xA0, 0x78, 0xAE, 0x78, 0x2E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 35
    0x80, 0x8C, 0xF2, 0xBF, 0x62, 0x00, 0x20, 0x00, 0x00, 0x00, // 36
    0x1C, 0x92, 0x7E, 0x0C, 0xE2, 0x90, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 37
    0x70, 0xC8, 0xA8, 0xB8, 0x6C, 0xBE, 0x02, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, // 38
    0x08, 0x00, // 39
    0xE0, 0x18, 0x06, 0x60, 0x80, 0x00, // 40
    0x00, 0x00, 0xC3, 0x3C, 0x40, 0x20, 0x00, 0x00, // 41
    0x0C, 0x0F, 0x00, 0x00, // 42
    0x10, 0x10, 0x7C, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // 43
    0x00, 0x80, 0x40, 0x20, // 44
    0x20, 0x20, 0x20, 0x00, 0x00, 0x00, // 45
    0x80, 0x00, // 46
    0x00, 0xC0, 0x30, 0x0C, 0x03, 0x60, 0x00, 0x00, 0x00, 0x00, // 47
    0x78, 0x84, 0x82, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, // 48
    0x80, 0x88, 0xFC, 0x86, 0x00, 0x00, 0x00, 0x00, // 49
    0xC0, 0xC4, 0xA2, 0x92, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, // 50
    0xC0, 0x80, 0xDA, 0x76, 0x00, 0x00, 0x00, 0x00, // 51
    0x20, 0x30, 0xA8, 0x7E, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // 52
    0x80, 0x80, 0x84, 0x4A, 0x32, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 53
    0x70, 0xAC, 0x94, 0x72, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // 54
    0xC4, 0x32, 0x0A, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // 55
    0xE0, 0xAC, 0x92, 0x6A, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, // 56
    0x80, 0x9C, 0x52, 0x72, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, // 57
    0x80, 0x08, 0x00, 0x00, // 58
    0x00, 0x80, 0x08, 0x40, 0x20, 0x00, // 59
    0x30, 0x30, 0x48, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, // 60
    0x28, 0x28, 0x28, 0x28, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, // 61
    0x48, 0x48, 0x48, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, // 62
    0x80, 0x36, 0x12, 0x0C, 0x00, 0x00, 0x00, 0x00, // 63
    0x70, 0xCC, 0xB4, 0xAA, 0xBA, 0x62, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 64
    0x00, 0x80, 0x4C, 0x32, 0x2E, 0xFE, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 65
    0x38, 0x24, 0x86, 0xFA, 0x8E, 0x8A, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 66
    0xF0, 0x8C, 0x04, 0x02, 0x82, 0x0C, 0x00, 0x20, 0x20, 0x20, 0x00, 0x00, // 67
    0x38, 0x4C, 0x86, 0xEA, 0x9A, 0x82, 0x46, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 68
    0x38, 0x84, 0xE2, 0x9E, 0x92, 0xBA, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 69
    0x1C, 0x86, 0xE2, 0x9E, 0x12, 0x3A, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 70
    0x70, 0x8C, 0x84, 0x82, 0xD2, 0x32, 0x16, 0x00, 0x80, 0x80, 0xC0, 0x20, 0x00, 0x00, // 71
    0xC0, 0x8C, 0xC2, 0x3A, 0x16, 0x90, 0xF8, 0x86, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 72
    0x80, 0xC0, 0xFA, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // 73
    0x00, 0x00, 0x0C, 0xC2, 0x3A, 0x06, 0x60, 0x40, 0x40, 0x20, 0x00, 0x00, // 74
    0x8C, 0x82, 0xF2, 0x1E, 0x78, 0x88, 0x06, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x40, 0x40, // 75
    0x80, 0xC0, 0xB8, 0x84, 0x82, 0x82, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 76
    0x80, 0x9C, 0x62, 0x1E, 0xF8, 0x60, 0x90, 0xFC, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 77
    0x80, 0x0C, 0xE2, 0x12, 0x0E, 0xF0, 0x70, 0x0C, 0x02, 0x02, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 78
    0x78, 0xC4, 0x82, 0x82, 0x46, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 79
    0x38, 0xCC, 0x86, 0xFA, 0x92, 0x12, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 80
    0x78, 0xC4, 0x82, 0x82, 0x42, 0x26, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x60, 0xC0, 0x80, 0x80, 0x40, // 81
    0x38, 0xA4, 0x86, 0xFA, 0x32, 0xD2, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x40, 0x40, // 82
    0x80, 0x00, 0x0C, 0x92, 0xE2, 0x0E, 0x00, 0x20, 0x20, 0x20, 0x00, 0x00, // 83
    0x1C, 0x86, 0x82, 0xF2, 0x8E, 0x02, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 84
    0x0C, 0x7A, 0x86, 0x80, 0x80, 0x40, 0x30, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 85
    0x0C, 0x06, 0xFE, 0x42, 0x20, 0x10, 0x0C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 86
    0x0C, 0x06, 0xFE, 0x32, 0x08, 0x04, 0xFE, 0x20, 0x10, 0x08, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 87
    0x00, 0x80, 0x40, 0x22, 0x1E, 0xF4, 0x82, 0x01, 0x01, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 88
    0x1C, 0x04, 0x82, 0xC6, 0xBC, 0x8C, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 89
    0x80, 0xC0, 0xA6, 0x92, 0x8A, 0x86, 0xC2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 90
    0x00, 0xF0, 0x0F, 0xC0, 0xA0, 0x00, // 91
    0x07, 0xFC, 0x80, 0x00, 0x00, 0x60, // 92
    0x00, 0x00, 0xF1, 0x0F, 0x80, 0xE0, 0x00, 0x00, // 93
    0x04, 0x02, 0x04, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, // 95
    0x01, 0x02, 0x00, 0x00, // 96
    0xE0, 0x90, 0xC8, 0xB8, 0x00, 0x00, 0x00, 0x00, // 97
    0xE0, 0x9E, 0x49, 0x39, 0x00, 0x00, 0x00, 0x00, // 98
    0xE0, 0x90, 0x88, 0x48, 0x00, 0x00, 0x00, 0x00, // 99
    0xE0, 0x90, 0x48, 0xF8, 0x4E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 100
    0xF0, 0xB0, 0xA8, 0x58, 0x00, 0x00, 0x00, 0x00, // 101
    0x00, 0x90, 0x78, 0x16, 0x01, 0x01, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, // 102
    0x00, 0xE0, 0x90, 0x88, 0xE8, 0x18, 0xE0, 0x80, 0x80, 0xC0, 0x60, 0x00, // 103
    0xE0, 0x1E, 0xD1, 0xB9, 0x00, 0x00, 0x00, 0x00, // 104
    0xE0, 0x38, 0x02, 0x00, 0x00, 0x00, // 105
    0x00, 0x90, 0x78, 0x02, 0x80, 0x60, 0x00, 0x00, // 106
    0xE0, 0x3E, 0xE9, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x40, 0x40, // 107
    0xE0, 0x9C, 0x42, 0x00, 0x00, 0x00, // 108
    0xC8, 0x38, 0xD0, 0x38, 0xF0, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 109
    0xE8, 0x18, 0xD0, 0xB8, 0x00, 0x00, 0x00, 0x00, // 110
    0xF0, 0x88, 0xC8, 0x38, 0x00, 0x00, 0x00, 0x00, // 111
    0x88, 0xF8, 0x90, 0x48, 0x38, 0xE0, 0x80, 0x00, 0x00, 0x00, // 112
    0xE0, 0x90, 0x88, 0xE8, 0x18, 0x00, 0x80, 0xC0, 0xA0, 0x00, // 113
    0xC8, 0x38, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, // 114
    0xC0, 0x98, 0xE8, 0x08, 0x00, 0x00, 0x00, 0x00, // 115
    0xE8, 0x9C, 0x88, 0x40, 0x00, 0x00, 0x00, 0x00, // 116
    0xE8, 0x98, 0xE0, 0x98, 0x00, 0x00, 0x00, 0x00, // 117
    0x10, 0x08, 0xF8, 0x88, 0x60, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 118
    0x10, 0x08, 0xF8, 0x88, 0x40, 0xF8, 0x40, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 119
    0x80, 0xD0, 0x58, 0xF0, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x60, // 120
    0x10, 0x18, 0xF0, 0xC0, 0x38, 0x80, 0x40, 0x20, 0x00, 0x00, // 121
    0x80, 0xD8, 0xA8, 0x98, 0xD8, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 122
    0xA0, 0xD8, 0x07, 0xE0, 0x80, 0x00, // 123
    0xFF, 0xE0, // 124
    0x00, 0x00, 0xD1, 0x2F, 0x80, 0xC0, 0x20, 0x00, // 125
    0x08, 0x08, 0x18, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // 126
    0xFF, 0x81, 0x81, 0x81, 0x81, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\FixedNum30x40.h ===



/*
 *
 * FixedNum30x40
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : FixedNum30x40.h
 * Date                : 08.11.2020
 * Font size in bytes  : 13592
 * Font width          : 30
 * Font height         : 40
 * Font first char     : 32
 * Font last char      : 58
 * Font used chars     : 26
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>
#include <avr/pgmspace.h>

#ifndef FIXEDNUM30X40_H
#define FIXEDNUM30X40_H

#define FIXEDNUM30X40_WIDTH 30
#define FIXEDNUM30X40_HEIGHT 40

static const uint8_t FixedNum30x40[] PROGMEM = {
    0x35, 0x18, // size
    0x1E, // width
    0x28, // height
    0x20, // first char
    0x1A, // char count
    
    // char widths
    0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x1E, 0x1E, 0x1E, 0x1E, 
    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 32
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x7C, 0x7C, 0x7C, 0x38, 0x00, 0x00, // 46
    0x00, 0x80, 0xE0, 0xF0, 0xF8, 0xFC, 0xFC, 0x7E, 0x7E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x7E, 0x7E, 0xFC, 0xFC, 0xF8, 0xF0, 0xE0, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x1F, 0x3F, 0x3F, 0x7E, 0x7E, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7E, 0x7E, 0x3F, 0x3F, 0x1F, 0x0F, 0x07, 0x01, 0x00, // 48
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0, 0xFC, 0xFE, 0xFE, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x7F, 0x7F, 0x7F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 49
    0x00, 0x00, 0x00, 0x00, 0x1C, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x7E, 0x7E, 0xFC, 0xFC, 0xF8, 0xF0, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0xF8, 0xFC, 0xFC, 0x7E, 0x7E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x1F, 0x1F, 0x0F, 0x07, 0x03, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x1F, 0x3F, 0x3F, 0x7E, 0x7E, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x38, 0x00, // 50
    0x00, 0x1C, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x7E, 0x7E, 0xFC, 0xFC, 0xF8, 0xF0, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x38, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7E, 0x7E, 0x3F, 0x3F, 0x1F, 0x0F, 0x07, 0x01, 0x00, // 51
    0x00, 0xFC, 0xFE, 0xFE, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFE, 0xFE, 0xFE, 0xFC, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x7F, 0x7F, 0x7F, 0x3F, 0x00, // 52
    0x00, 0x80, 0xE0, 0xF0, 0xF8, 0xFC, 0xFC, 0x7E, 0x7E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x7E, 0x7E, 0xFC, 0xFC, 0xF8, 0xF0, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x38, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7E, 0x7E, 0x3F, 0x3F, 0x1F, 0x0F, 0x07, 0x01, 0x00, // 53
    0x00, 0x80, 0xE0, 0xF0, 0xF8, 0xFC, 0xFC, 0x7E, 0x7E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x7E, 0x7E, 0xFC, 0xFC, 0xF8, 0xF0, 0xE0, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x1F, 0x3F, 0x3F, 0x7E, 0x7E, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7E, 0x7E, 0x3F, 0x3F, 0x1F, 0x0F, 0x07, 0x01, 0x00, // 54
    0x00, 0x00, 0x00, 0x00, 0x1C, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x7E, 0x7E, 0xFC, 0xFC, 0xF8, 0xF0, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x7F, 0x7F, 0x7F, 0x3F, 0x00, // 55
    0x00, 0x80, 0xE0, 0xF0, 0xF8, 0xFC, 0xFC, 0x7E, 0x7E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x7E, 0x7E, 0xFC, 0xFC, 0xF8, 0xF0, 0xE0, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x1F, 0x3F, 0x3F, 0x7E, 0x7E, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7E, 0x7E, 0x3F, 0x3F, 0x1F, 0x0F, 0x07, 0x01, 0x00, // 56
    0x00, 0x80, 0xE0, 0xF0, 0xF8, 0xFC, 0xFC, 0x7E, 0x7E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x7E, 0x7E, 0xFC, 0xFC, 0xF8, 0xF0, 0xE0, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7E, 0x7E, 0x3F, 0x3F, 0x1F, 0x0F, 0x07, 0x01, 0x00 // 57
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\FixedNum30x40_2.h ===



/*
 *
 * FixedNum30x40_2
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : FixedNum30x40_2.h
 * Date                : 08.11.2020
 * Font size in bytes  : 12792
 * Font width          : 30
 * Font height         : 40
 * Font first char     : 32
 * Font last char      : 58
 * Font used chars     : 26
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>
#include <avr/pgmspace.h>

#ifndef FIXEDNUM30X40_2_H
#define FIXEDNUM30X40_2_H

#define FIXEDNUM30X40_2_WIDTH 30
#define FIXEDNUM30X40_2_HEIGHT 40

static const uint8_t FixedNum30x40_2[] PROGMEM = {
    0x31, 0xF8, // size
    0x1E, // width
    0x28, // height
    0x20, // first char
    0x1A, // char count
    
    // char widths
    0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x1C, 0x1C, 0x1C, 0x1C, 
    0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 32
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x7C, 0x7C, 0x7C, 0x38, 0x00, 0x00, // 46
    0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0x7C, 0x3C, 0x3E, 0x1E, 0x1E, 0x1E, 0x1E, 0x3E, 0x3C, 0x7C, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xF0, 0xFE, 0xFF, 0xFF, 0x1F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0xFF, 0xFF, 0xFE, 0xF0, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0x1F, 0xFF, 0xFF, 0xFE, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xFE, 0xFF, 0xFF, 0x1F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3E, 0x3C, 0x7C, 0x78, 0x78, 0x78, 0x78, 0x7C, 0x3C, 0x3E, 0x1F, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, // 48
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x1E, 0x1F, 0x0F, 0x07, 0x03, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x7F, 0x7F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 49
    0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xF8, 0x7C, 0x3C, 0x3E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x3E, 0x3C, 0x7C, 0xF8, 0xF8, 0xF0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x1F, 0x1F, 0x1F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xCF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0x7E, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0x7E, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 0x7C, 0x7E, 0x7F, 0x7F, 0x7F, 0x7F, 0x7B, 0x79, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x30, 0x00, // 50
    0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xF0, 0xF8, 0xF8, 0x7C, 0x3C, 0x3E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x3E, 0x3C, 0x7C, 0xF8, 0xF8, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xC0, 0xC0, 0xF1, 0xFF, 0xFF, 0x7F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x1F, 0x3F, 0xFF, 0xFC, 0xF8, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x1F, 0x1F, 0x3E, 0x3C, 0x7C, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x7C, 0x3C, 0x3E, 0x1F, 0x1F, 0x0F, 0x07, 0x01, 0x00, 0x00, // 51
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF8, 0xFC, 0xFE, 0xFE, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xF0, 0xF8, 0xFC, 0x3E, 0x1F, 0x0F, 0x03, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xF0, 0xF8, 0xFC, 0xFF, 0x9F, 0x8F, 0x87, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x07, 0x07, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x7F, 0x7F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 52
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFE, 0xFE, 0xFE, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0x1F, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7F, 0x3F, 0x1F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x1E, 0x3E, 0xFC, 0xF8, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x1E, 0x3C, 0x3C, 0x7C, 0x78, 0x78, 0x78, 0x78, 0x78, 0x7C, 0x3C, 0x3C, 0x1E, 0x1F, 0x0F, 0x07, 0x03, 0x00, 0x00, 0x00, // 53
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0xFC, 0xFE, 0x7E, 0x1E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0xFC, 0xFE, 0xFF, 0x9F, 0x8F, 0x83, 0x81, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xFC, 0xFE, 0x3F, 0x1F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x1E, 0x3E, 0xFC, 0xF8, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x1E, 0x3C, 0x3C, 0x7C, 0x78, 0x78, 0x78, 0x78, 0x78, 0x7C, 0x3C, 0x3C, 0x1E, 0x1F, 0x0F, 0x07, 0x03, 0x00, 0x00, 0x00, // 54
    0x00, 0x0C, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x9E, 0xFE, 0xFE, 0xFE, 0x7E, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF8, 0xFE, 0x7F, 0x1F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF8, 0xFE, 0x7F, 0x1F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF8, 0xFE, 0x7F, 0x1F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 0x7E, 0x3F, 0x1F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 55
    0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xF8, 0xF8, 0x7C, 0x3C, 0x3E, 0x1E, 0x1E, 0x1E, 0x1E, 0x3E, 0x3C, 0x7C, 0xF8, 0xF8, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x7F, 0xFF, 0xFF, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0xFF, 0xFF, 0x7F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0xF9, 0x7F, 0x3F, 0x1F, 0x1E, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x1E, 0x1F, 0x3F, 0x7F, 0xF9, 0xF0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3E, 0x3C, 0x3C, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x3C, 0x3C, 0x3E, 0x1F, 0x0F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, // 56
    0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0x78, 0x3C, 0x3C, 0x3E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x3E, 0x3C, 0x3C, 0x78, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x1F, 0x3F, 0x7C, 0x78, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF8, 0xFC, 0x7F, 0x1F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x81, 0xE1, 0xF1, 0xFD, 0x7F, 0x1F, 0x0F, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x7C, 0x7E, 0x3F, 0x0F, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // 57
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\fixednums15x31.h ===

/*
 * Fixed width font for numbers
 *
 * This font is very useful when using overstrike as all characters & numbers
 * are all the same width.
 *
 * This font also contains a few special characters that are nice for certain applications
 * like clocks, signed values or decimal point values.
 * 
 * The rendering code normally inserts a pad pixel so this size allows the font to fit
 * perfectly on 32 and 64 tall glcd displays.
 *
 * Font has also been squeezed to 15 pixels wide for better alignment on 128 & 192 pixel displays.
 */

#ifndef FIXEDNUMS15x31_H
#define FIXEDNUMS15x31_H

GLCDFONTDECL(fixednums15x31) = {
    0x0, 0x0,	// size of zero indicates fixed width font
    15,		// width
    31,		// height
    '+',	// first char (48)
    16,		// char count
// char '+'
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xfc, 0xfc, 0xfc, 0xfc, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

// char ','
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcf, 0xcf, 0x3f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00,

// char '-'
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

// char '.'
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,

// char '/'
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xff, 0xff, 0x0f,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xff, 0xff, 0x0f, 0x0f, 0x00, 0x00, 0x00,
0x00, 0x00, 0xf0, 0xf0, 0xff, 0xff, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

// char '0'
0xf0, 0xf0, 0xfc, 0xfc, 0x0f, 0x0f, 0x03, 0x03, 0x03, 0xcf, 0xcf, 0xfc, 0xfc, 0xf0, 0xf0,
0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xc0, 0xc0, 0x3c, 0x3f, 0x03, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0x3c, 0x3c, 0x03, 0x03, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00,

// char '1'
0x30, 0x30, 0x30, 0x30, 0x3c, 0x3c, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,

// char '2'
0xf0, 0xf0, 0xfc, 0xfc, 0x0f, 0x0f, 0x03, 0x03, 0x03, 0x03, 0x0f, 0xff, 0xfc, 0xfc, 0xf0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xf0, 0xff, 0x3f, 0x3f, 0x0f,
0xc0, 0xc0, 0xf0, 0xf0, 0x3c, 0x3c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0f, 0x0f, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,

// char '3'
0xf0, 0xf0, 0xfc, 0xfc, 0x0f, 0x0f, 0x03, 0x03, 0x03, 0x03, 0x0f, 0x1f, 0xfc, 0xfc, 0xf0,
0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xff, 0xdf, 0x8f,
0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff,
0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00,

// char '4'
0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xff, 0xff, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xfc, 0xfc, 0xff, 0xff, 0x03, 0x03, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
0xff, 0xff, 0xff, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xc0, 0xc0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00,

// char '5'
0xff, 0xff, 0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
0x0f, 0x0f, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0xfc, 0xf0, 0xf0, 0xc0,
0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00,

// char '6'
0x00, 0x00, 0xc0, 0xc0, 0xf0, 0xf0, 0x3c, 0x3c, 0x0f, 0x0f, 0x03, 0x03, 0x03, 0x03, 0x03,
0xfc, 0xfc, 0xff, 0xff, 0x33, 0x33, 0x30, 0x30, 0x30, 0x30, 0xf0, 0xf0, 0xc0, 0xc0, 0x00,
0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00,

// char '7'
0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xff, 0xff, 0xff, 0xff,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xff, 0xff, 0x3f, 0x3f, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xff, 0xff, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

// char '8'
0xf0, 0xf0, 0xfc, 0xfc, 0x0f, 0x0f, 0x03, 0x03, 0x03, 0x0f, 0x0f, 0xfc, 0xfc, 0xf0, 0xf0,
0x03, 0x03, 0xcf, 0xcf, 0xfc, 0xfc, 0x30, 0x30, 0x30, 0xfc, 0xfc, 0xcf, 0xcf, 0x03, 0x03,
0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00,

// char '9'
0xe0, 0xf0, 0xfc, 0xfc, 0x0f, 0x0f, 0x03, 0x03, 0x03, 0x0f, 0x0f, 0xfc, 0xfc, 0xf0, 0xe0,
0x07, 0x0f, 0x3f, 0x3f, 0xf0, 0xf0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xff, 0xff, 0xff, 0xff,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xfc, 0xfc, 0x3f, 0x3f, 0x03,
0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,

// char ':'
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,

};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\fixednums7x15.h ===

/*
 * Fixed width font for numbers
 *
 * This font is very useful when using overstrike as all characters & numbers
 * are all the same width.
 *
 * This font also contains a few special characters that are nice for certain applications
 * like clocks, signed values or decimal point values.
 * 
 * When rendering code inserts a pad pixel this size allows the font to fit
 * perfectly on 32 and 64 tall glcd displays as well as 128 wide displays.
 */

#ifndef FIXEDNUMS7x15_H
#define FIXEDNUMS7x15_H

GLCDFONTDECL(fixednums7x15) = {
    0x0, 0x0,	// size of zero indicates fixed width font
    7,		// width
    15,		// height
    '+',	// first char (48)
    16,		// char count
// char '+'
0x00, 0x80, 0x80, 0xe0, 0xe0, 0x80, 0x80,
0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00,

// char ','
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x58, 0x38, 0x00, 0x00,

// char '-'
0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

// char '.'
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00,

// char '/'
0x00, 0x00, 0x00, 0xc0, 0xf0, 0x3c, 0x0f,
0x00, 0x3c, 0x0f, 0x03, 0x00, 0x00, 0x00,

// char '0'
0xfc, 0xfe, 0x03, 0xe1, 0x1b, 0xfe, 0xfc,
0x0f, 0x1f, 0x36, 0x21, 0x30, 0x1f, 0x0f,

// char '1'
0x04, 0x04, 0x06, 0xff, 0xff, 0x00, 0x00,
0x20, 0x20, 0x20, 0x3f, 0x3f, 0x20, 0x20,

// char '2'
0x0c, 0x0e, 0x03, 0x01, 0x81, 0xfe, 0x7c,
0x38, 0x3c, 0x26, 0x23, 0x21, 0x20, 0x20,

// char '3'
0x0c, 0x0e, 0x43, 0x41, 0x43, 0xfe, 0xbc,
0x0c, 0x1c, 0x30, 0x20, 0x30, 0x1f, 0x0f,

// char '4'
0x00, 0xe0, 0xfc, 0x1f, 0x83, 0x80, 0x00,
0x0f, 0x0f, 0x08, 0x08, 0x3f, 0x3f, 0x08,

// char '5'
0x3f, 0x3f, 0x21, 0x21, 0x61, 0xe1, 0x81,
0x0c, 0x1c, 0x30, 0x20, 0x30, 0x3f, 0x0f,

// char '6'
0xe0, 0xf8, 0x5c, 0x46, 0xc3, 0xc1, 0x01,
0x0f, 0x1f, 0x30, 0x20, 0x30, 0x3f, 0x0f,

// char '7'
0x01, 0x01, 0x01, 0x81, 0xf1, 0x7f, 0x0f,
0x00, 0x00, 0x3c, 0x3f, 0x03, 0x00, 0x00,

// char '8'
0x1c, 0xbe, 0xe3, 0x41, 0xe3, 0xbe, 0x1c,
0x0f, 0x1f, 0x30, 0x20, 0x30, 0x1f, 0x0f,

// char '9'
0x3c, 0x7e, 0xc3, 0x81, 0x81, 0xfe, 0xfc,
0x20, 0x30, 0x38, 0x0c, 0x07, 0x03, 0x00,

// char ':'
0x00, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00,
0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00,

};
#endif


=== Файл: src\SSD1306Ascii\src\fonts\fixednums8x16.h ===

/*
 * Fixed width font file for numbers only.
 *
 * This font is very useful when using overstrike as all characters & numbers
 * are all the same width.
 *
 * This font file can be used when only numbers are needed. 
 *
 * This font also contains a few special characters that are nice for certain applications
 * like clocks, signed values or decimal point values.
 * 
 * Font is really 16 tall but this file is set to indicate 15 to allow it to line up with the lcd page size.
 * It works as the the bottom row in the glyph is whitespace anyway.
 * The rendering code normally inserts a pad pixel so this size allows additional rows
 * on 32 and 64 tall glcd displays.
 *
 */

#ifndef FIXEDNUMS8x16_H
#define FIXEDNUMS8x16_H

GLCDFONTDECL(fixednums8x16) = {
    0x0, 0x0,	// size of zero indicates fixed width font
    8,		// width
    15,		// height
    '+',	// first char (48)
    16,		// char count

    0x80, 0x80, 0x80, 0xe0, 0xe0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, // char '+'
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x70, 0x00, 0x00, 0x00, // char ','
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // char '-'
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, // char '.'
    0x00, 0x00, 0x00, 0xc0, 0xf0, 0x3c, 0x0f, 0x03, 0x30, 0x3c, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, // char '/'
    0xfc, 0xfe, 0x03, 0x81, 0x61, 0x1b, 0xfe, 0xfc, 0x0f, 0x1f, 0x36, 0x21, 0x20, 0x30, 0x1f, 0x0f, // char '0'
    0x04, 0x04, 0x06, 0xff, 0xff, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x3f, 0x3f, 0x20, 0x20, 0x20, // char '1'
    0x0c, 0x0e, 0x03, 0x01, 0x81, 0xc3, 0x7e, 0x3c, 0x38, 0x3c, 0x26, 0x23, 0x21, 0x20, 0x20, 0x20, // char '2'
    0x0c, 0x0e, 0x43, 0x41, 0x41, 0x43, 0xfe, 0xbc, 0x0c, 0x1c, 0x30, 0x20, 0x20, 0x30, 0x1f, 0x0f, // char '3'
    0x00, 0xe0, 0xfc, 0x1f, 0x83, 0x80, 0x00, 0x00, 0x0f, 0x0f, 0x08, 0x08, 0x3f, 0x3f, 0x08, 0x08, // char '4'
    0x3f, 0x3f, 0x21, 0x21, 0x21, 0x61, 0xc1, 0x81, 0x0c, 0x1c, 0x30, 0x20, 0x20, 0x30, 0x1f, 0x0f, // char '5'
    0xe0, 0xf8, 0x5c, 0x46, 0x43, 0xc1, 0x81, 0x01, 0x0f, 0x1f, 0x30, 0x20, 0x20, 0x30, 0x1f, 0x0f, // char '6'
    0x01, 0x01, 0x01, 0x01, 0x81, 0xf1, 0x7f, 0x0f, 0x00, 0x00, 0x00, 0x3c, 0x3f, 0x03, 0x00, 0x00, // char '7'
    0x1c, 0xbe, 0xe3, 0x41, 0x41, 0xe3, 0xbe, 0x1c, 0x0f, 0x1f, 0x30, 0x20, 0x20, 0x30, 0x1f, 0x0f, // char '8'
    0x3c, 0x7e, 0xc3, 0x81, 0x81, 0x83, 0xfe, 0xfc, 0x20, 0x20, 0x20, 0x30, 0x18, 0x0e, 0x07, 0x01, // char '9'
    0x00, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00  // char ':
};
#endif


=== Файл: src\SSD1306Ascii\src\fonts\fixed_bold10x15.h ===

/*
	Generated by the Font Generator at microintegrate.com
	(modded for openGLCD)
*/

#ifndef FIXED_BOLD10x15_H
#define FIXED_BOLD10x15_H

#define FIXED_BOLD10x15_WIDTH 10 
#define FIXED_BOLD10x15_HEIGHT 15 

GLCDFONTDECL(fixed_bold10x15) = {
	0x0, 0x0, // size of zero indicates fixed width font, actual length is width * height
	0x0a, // width
	0x0f, // height
	0x20, // first char
	0x5F, // char count

	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // *space*
	0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x19, 0x00, 0x00, 0x00, 0x00,  // !
	0x00, 0x00, 0x1e, 0x1e, 0x00, 0x00, 0x1e, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // "
	0x00, 0x30, 0xfe, 0xfe, 0x30, 0x30, 0xfe, 0xfe, 0x30, 0x00, 0x00, 0x03, 0x1f, 0x1f, 0x03, 0x03, 0x1f, 0x1f, 0x03, 0x00,  // #
	0x00, 0x70, 0xf8, 0xd8, 0xfe, 0x98, 0x98, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x18, 0x18, 0x7f, 0x19, 0x1f, 0x0f, 0x00, 0x00,  // $
	0x1c, 0xb6, 0xa2, 0xf6, 0xcc, 0x60, 0x60, 0x20, 0x30, 0x00, 0x01, 0x01, 0x00, 0x0e, 0x1b, 0x11, 0x1b, 0x0e, 0x00, 0x00,  // %
	0x00, 0x00, 0xdc, 0x7e, 0xe6, 0xc6, 0x86, 0x0c, 0x80, 0x80, 0x00, 0x07, 0x0f, 0x1c, 0x18, 0x19, 0x1f, 0x1e, 0x1f, 0x13,  // &
	0x00, 0x00, 0x00, 0x00, 0x1e, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // '
	0x00, 0x00, 0x00, 0xe0, 0xfc, 0x1e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3f, 0x78, 0x40, 0x00, 0x00, 0x00,  // (
	0x00, 0x00, 0x02, 0x1e, 0xfc, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x78, 0x3f, 0x07, 0x00, 0x00, 0x00, 0x00,  // )
	0x00, 0x48, 0x78, 0x30, 0xfe, 0x30, 0x78, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // *
	0x00, 0x80, 0x80, 0x80, 0xf0, 0xf0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x01, 0x01, 0x01, 0x0f, 0x0f, 0x01, 0x01, 0x01, 0x00,  // +
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x7c, 0x3c, 0x00, 0x00, 0x00, 0x00,  // ,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00,  // -
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00,  // .
	0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0x3c, 0x0e, 0x02, 0x00, 0x00, 0x20, 0x38, 0x1e, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // /
	0x00, 0xf0, 0xfc, 0x0e, 0xc6, 0xc6, 0x0e, 0xfc, 0xf8, 0x00, 0x00, 0x03, 0x0f, 0x1c, 0x18, 0x18, 0x1c, 0x0f, 0x07, 0x00,  // 0
	0x00, 0x00, 0x0c, 0x06, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x1f, 0x1f, 0x18, 0x18, 0x18, 0x00,  // 1
	0x00, 0x0c, 0x06, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x38, 0x00, 0x00, 0x18, 0x1c, 0x1e, 0x1b, 0x19, 0x18, 0x18, 0x18, 0x00,  // 2
	0x00, 0x0c, 0x06, 0xc6, 0xc6, 0xc6, 0xc6, 0xfc, 0x38, 0x00, 0x00, 0x0c, 0x18, 0x18, 0x18, 0x18, 0x19, 0x0f, 0x0f, 0x00,  // 3
	0x00, 0x80, 0xc0, 0x70, 0x18, 0x0e, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x1f, 0x1f, 0x03, 0x00,  // 4
	0x00, 0xfe, 0x7e, 0x66, 0x66, 0x66, 0xe6, 0xc6, 0x80, 0x00, 0x00, 0x0c, 0x18, 0x18, 0x18, 0x18, 0x1c, 0x0f, 0x07, 0x00,  // 5
	0x00, 0xf0, 0xfc, 0xce, 0x66, 0x66, 0xe6, 0xcc, 0x80, 0x00, 0x00, 0x07, 0x0f, 0x1c, 0x18, 0x18, 0x1c, 0x0f, 0x07, 0x00,  // 6
	0x00, 0x06, 0x06, 0x06, 0x06, 0xe6, 0xfe, 0x3e, 0x0e, 0x00, 0x00, 0x00, 0x10, 0x1c, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00,  // 7
	0x00, 0x38, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0xfc, 0x38, 0x00, 0x00, 0x0f, 0x0f, 0x18, 0x18, 0x18, 0x18, 0x0f, 0x0f, 0x00,  // 8
	0x00, 0x78, 0xfc, 0xce, 0x86, 0x86, 0xce, 0xfc, 0xf8, 0x00, 0x00, 0x00, 0x0c, 0x19, 0x19, 0x19, 0x1c, 0x0f, 0x03, 0x00,  // 9
	0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00,  // :
	0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x7c, 0x3c, 0x00, 0x00, 0x00, 0x00,  // ;
	0x00, 0x80, 0x80, 0xc0, 0x40, 0x60, 0x60, 0x20, 0x30, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x06, 0x06, 0x04, 0x0c, 0x00,  // <
	0x00, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00,  // =
	0x00, 0x30, 0x20, 0x60, 0x60, 0x40, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x0c, 0x04, 0x06, 0x06, 0x02, 0x03, 0x01, 0x01, 0x00,  // >
	0x00, 0x0c, 0x06, 0x86, 0xc6, 0x66, 0x7e, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00,  // ?
	0xe0, 0xf0, 0x38, 0x9c, 0xcc, 0xcc, 0xdc, 0xf8, 0xf0, 0x00, 0x07, 0x1f, 0x38, 0x73, 0x67, 0x66, 0x66, 0x77, 0x27, 0x00,  // @
	0x00, 0x00, 0xc0, 0xfc, 0x3e, 0x3e, 0xfc, 0xc0, 0x00, 0x00, 0x00, 0x18, 0x1f, 0x0f, 0x03, 0x03, 0x0f, 0x1f, 0x18, 0x00,  // A
	0x00, 0xfe, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xfc, 0x3c, 0x00, 0x00, 0x1f, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x0f, 0x00,  // B
	0x00, 0xf0, 0xfc, 0x0c, 0x06, 0x06, 0x06, 0x06, 0x0c, 0x00, 0x00, 0x03, 0x0f, 0x0c, 0x18, 0x18, 0x18, 0x18, 0x0c, 0x00,  // C
	0x00, 0xfe, 0xfe, 0x06, 0x06, 0x06, 0x0c, 0xfc, 0xf0, 0x00, 0x00, 0x1f, 0x1f, 0x18, 0x18, 0x18, 0x0c, 0x0f, 0x03, 0x00,  // D
	0x00, 0xfe, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x06, 0x00, 0x00, 0x1f, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,  // E
	0x00, 0xfe, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x06, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // F
	0x00, 0xf0, 0xfc, 0x0c, 0x06, 0x86, 0x86, 0x86, 0x8c, 0x00, 0x00, 0x03, 0x0f, 0x0c, 0x18, 0x19, 0x19, 0x1f, 0x0f, 0x00,  // G
	0x00, 0xfe, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0xfe, 0xfe, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00,  // H
	0x00, 0x00, 0x06, 0x06, 0xfe, 0xfe, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x1f, 0x1f, 0x18, 0x18, 0x00, 0x00,  // I
	0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0xfe, 0xfe, 0x00, 0x00, 0x0c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0f, 0x0f, 0x00,  // J
	0x00, 0xfe, 0xfe, 0xe0, 0xf0, 0xfc, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x03, 0x0f, 0x1e, 0x18, 0x00,  // K
	0x00, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,  // L
	0x00, 0xfe, 0xfe, 0x3e, 0xf0, 0xf0, 0x3e, 0xfe, 0xfe, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x01, 0x01, 0x00, 0x1f, 0x1f, 0x00,  // M
	0x00, 0xfe, 0xfe, 0x1e, 0xf0, 0xc0, 0x00, 0xfe, 0xfe, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x03, 0x1e, 0x1f, 0x1f, 0x00,  // N
	0x00, 0xf0, 0xfc, 0x0e, 0x06, 0x06, 0x0e, 0xfc, 0xf0, 0x00, 0x00, 0x03, 0x0f, 0x1c, 0x18, 0x18, 0x1c, 0x0f, 0x03, 0x00,  // O
	0x00, 0xfe, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x7c, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // P
	0x00, 0xf0, 0xfc, 0x0e, 0x06, 0x06, 0x0e, 0xfc, 0xf0, 0x00, 0x00, 0x03, 0x0f, 0x1c, 0x18, 0x18, 0x3c, 0x6f, 0x07, 0x00,  // Q
	0x00, 0xfe, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xfc, 0x3c, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x01, 0x03, 0x1f, 0x1e, 0x10,  // R
	0x00, 0x38, 0x7c, 0xe6, 0xc6, 0xc6, 0xc6, 0x8c, 0x00, 0x00, 0x00, 0x0c, 0x18, 0x18, 0x18, 0x18, 0x19, 0x0f, 0x0f, 0x00,  // S
	0x00, 0x06, 0x06, 0x06, 0xfe, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00,  // T
	0x00, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x00, 0x00, 0x07, 0x0f, 0x1c, 0x18, 0x18, 0x1c, 0x0f, 0x07, 0x00,  // U
	0x00, 0x06, 0xfe, 0xfc, 0x00, 0x00, 0xfc, 0xfe, 0x06, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x1f, 0x1f, 0x00, 0x00, 0x00,  // V
	0x1e, 0xfe, 0xe0, 0x00, 0xf0, 0xf0, 0x00, 0xe0, 0xfe, 0x1e, 0x00, 0x1f, 0x1f, 0x1e, 0x01, 0x01, 0x1e, 0x1f, 0x1f, 0x00,  // W
	0x00, 0x02, 0x0e, 0x3e, 0xf8, 0xf8, 0x3e, 0x0e, 0x02, 0x00, 0x00, 0x10, 0x1c, 0x1f, 0x03, 0x03, 0x1f, 0x1c, 0x10, 0x00,  // X
	0x02, 0x0e, 0x3e, 0x78, 0xe0, 0xe0, 0x78, 0x3e, 0x0e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00,  // Y
	0x00, 0x06, 0x06, 0x86, 0xc6, 0xf6, 0x7e, 0x1e, 0x0e, 0x00, 0x00, 0x1c, 0x1e, 0x1f, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x00,  // Z
	0x00, 0x00, 0x00, 0xfe, 0xfe, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x40, 0x40, 0x00, 0x00, 0x00,  // [
	0x00, 0x02, 0x0e, 0x38, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0e, 0x38, 0x20, 0x00,  // *backslash*
	0x00, 0x00, 0x02, 0x02, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00,  // ]
	0x10, 0x18, 0x1c, 0x0e, 0x06, 0x0e, 0x1c, 0x18, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ^
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,  // _
	0x00, 0x00, 0x01, 0x03, 0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // `
	0x00, 0x00, 0x60, 0x30, 0xb0, 0xb0, 0xb0, 0xf0, 0xe0, 0x00, 0x00, 0x0e, 0x1f, 0x1b, 0x19, 0x19, 0x0d, 0x1f, 0x1f, 0x00,  // a
	0x00, 0xfe, 0xfe, 0x60, 0x30, 0x30, 0x70, 0xe0, 0xc0, 0x00, 0x00, 0x1f, 0x1f, 0x0c, 0x18, 0x18, 0x1c, 0x0f, 0x07, 0x00,  // b
	0x00, 0xc0, 0xe0, 0x70, 0x30, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x07, 0x0f, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x0c, 0x00,  // c
	0x00, 0xc0, 0xe0, 0x70, 0x30, 0x30, 0x60, 0xfe, 0xfe, 0x00, 0x00, 0x07, 0x0f, 0x1c, 0x18, 0x18, 0x0c, 0x1f, 0x1f, 0x00,  // d
	0x00, 0xc0, 0xe0, 0xb0, 0xb0, 0xb0, 0xb0, 0xe0, 0xc0, 0x00, 0x00, 0x07, 0x0f, 0x1d, 0x19, 0x19, 0x19, 0x19, 0x0d, 0x00,  // e
	0x00, 0x30, 0x30, 0xfc, 0xfe, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,  // f
	0x00, 0xc0, 0xe0, 0x70, 0x30, 0x30, 0x60, 0xf0, 0xf0, 0x00, 0x00, 0x03, 0x37, 0x6e, 0x6c, 0x6c, 0x66, 0x7f, 0x3f, 0x00,  // g
	0x00, 0xfe, 0xfe, 0x60, 0x30, 0x30, 0x30, 0xf0, 0xe0, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00,  // h
	0x00, 0x00, 0x30, 0x30, 0xf7, 0xf7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x1f, 0x1f, 0x18, 0x18, 0x18, 0x00,  // i
	0x00, 0x00, 0x30, 0x30, 0xf7, 0xf7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x60, 0x7f, 0x3f, 0x00, 0x00, 0x00, 0x00,  // j
	0x00, 0xfe, 0xfe, 0x80, 0xe0, 0x70, 0x30, 0x10, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x01, 0x03, 0x07, 0x1e, 0x18, 0x10, 0x00,  // k
	0x00, 0x06, 0x06, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x1f, 0x18, 0x18, 0x18, 0x00, 0x00,  // l
	0x00, 0xf0, 0xf0, 0x30, 0xf0, 0xe0, 0x30, 0xf0, 0xe0, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x1f, 0x1f, 0x00, 0x1f, 0x1f, 0x00,  // m
	0x00, 0xf0, 0xf0, 0x60, 0x30, 0x30, 0x30, 0xf0, 0xe0, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00,  // n
	0x00, 0xc0, 0xe0, 0x70, 0x30, 0x30, 0x70, 0xe0, 0xc0, 0x00, 0x00, 0x07, 0x0f, 0x1c, 0x18, 0x18, 0x1c, 0x0f, 0x07, 0x00,  // o
	0x00, 0xf0, 0xf0, 0x60, 0x30, 0x30, 0x70, 0xe0, 0xc0, 0x00, 0x00, 0x7f, 0x7f, 0x06, 0x0c, 0x0c, 0x0e, 0x07, 0x03, 0x00,  // p
	0x00, 0xc0, 0xe0, 0x70, 0x30, 0x30, 0x60, 0xf0, 0xf0, 0x00, 0x00, 0x03, 0x07, 0x0e, 0x0c, 0x0c, 0x06, 0x7f, 0x7f, 0x00,  // q
	0x00, 0x00, 0xf0, 0xf0, 0x60, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // r
	0x00, 0xe0, 0xf0, 0xb0, 0xb0, 0xb0, 0xb0, 0x30, 0x60, 0x00, 0x00, 0x0c, 0x19, 0x19, 0x19, 0x19, 0x1b, 0x1f, 0x0e, 0x00,  // s
	0x00, 0x30, 0x30, 0xfc, 0xfc, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x1f, 0x18, 0x18, 0x18, 0x00, 0x00,  // t
	0x00, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0x0f, 0x1f, 0x18, 0x18, 0x18, 0x0c, 0x1f, 0x1f, 0x00,  // u
	0x00, 0x30, 0xf0, 0xe0, 0x00, 0x00, 0xe0, 0xf0, 0x30, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x1e, 0x1e, 0x0f, 0x01, 0x00, 0x00,  // v
	0x70, 0xf0, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0xf0, 0x70, 0x00, 0x07, 0x1f, 0x1e, 0x03, 0x03, 0x1e, 0x1f, 0x07, 0x00,  // w
	0x00, 0x10, 0x30, 0xf0, 0xc0, 0xc0, 0xf0, 0x30, 0x10, 0x00, 0x00, 0x10, 0x18, 0x1e, 0x07, 0x07, 0x1e, 0x18, 0x10, 0x00,  // x
	0x00, 0x10, 0xf0, 0xf0, 0x80, 0x00, 0xf0, 0xf0, 0x30, 0x00, 0x00, 0x00, 0x60, 0x63, 0x7f, 0x1f, 0x0f, 0x01, 0x00, 0x00,  // y
	0x00, 0x30, 0x30, 0x30, 0x30, 0xb0, 0xf0, 0x70, 0x30, 0x00, 0x00, 0x18, 0x1c, 0x1e, 0x1b, 0x19, 0x18, 0x18, 0x18, 0x00,  // z
	0x00, 0x00, 0x00, 0x00, 0xfc, 0xfe, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x3e, 0x7e, 0x40, 0x40, 0x00, 0x00,  // {
	0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00,  // |
	0x00, 0x00, 0x02, 0x02, 0xfe, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x7e, 0x3e, 0x01, 0x01, 0x00, 0x00,  // }
	0x00, 0x80, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x80, 0xc0, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00,  // ~
};
#endif


=== Файл: src\SSD1306Ascii\src\fonts\font5x7.h ===

#ifndef font5x7_h
#define font5x7_h
// Mystery font included in early Adafruit SSD1306 library
GLCDFONTDECL(font5x7) = {
  0x0, 0x0, // size of zero indicates fixed width font,
  0x05, // width
  0x07, // height
  0x20, // first char
  0x60, // char count
  0x00, 0x00, 0x00, 0x00, 0x00, // SPACE
  0x00, 0x00, 0x5F, 0x00, 0x00, // !
  0x00, 0x03, 0x00, 0x03, 0x00, // "
  0x14, 0x3E, 0x14, 0x3E, 0x14, // #
  0x24, 0x2A, 0x7F, 0x2A, 0x12, // $
  0x43, 0x33, 0x08, 0x66, 0x61, // %
  0x36, 0x49, 0x55, 0x22, 0x50, // &
  0x00, 0x05, 0x03, 0x00, 0x00, // '
  0x00, 0x1C, 0x22, 0x41, 0x00, // (
  0x00, 0x41, 0x22, 0x1C, 0x00, // )
  0x14, 0x08, 0x3E, 0x08, 0x14, // *
  0x08, 0x08, 0x3E, 0x08, 0x08, // +
  0x00, 0x50, 0x30, 0x00, 0x00, // ,
  0x08, 0x08, 0x08, 0x08, 0x08, // -
  0x00, 0x60, 0x60, 0x00, 0x00, // .
  0x20, 0x10, 0x08, 0x04, 0x02, // /
  0x3E, 0x51, 0x49, 0x45, 0x3E, // 0
  0x00, 0x04, 0x02, 0x7F, 0x00, // 1
  0x42, 0x61, 0x51, 0x49, 0x46, // 2
  0x22, 0x41, 0x49, 0x49, 0x36, // 3
  0x18, 0x14, 0x12, 0x7F, 0x10, // 4
  0x27, 0x45, 0x45, 0x45, 0x39, // 5
  0x3E, 0x49, 0x49, 0x49, 0x32, // 6
  0x01, 0x01, 0x71, 0x09, 0x07, // 7
  0x36, 0x49, 0x49, 0x49, 0x36, // 8
  0x26, 0x49, 0x49, 0x49, 0x3E, // 9
  0x00, 0x36, 0x36, 0x00, 0x00, // :
  0x00, 0x56, 0x36, 0x00, 0x00, // ;
  0x08, 0x14, 0x22, 0x41, 0x00, // <
  0x14, 0x14, 0x14, 0x14, 0x14, // =
  0x00, 0x41, 0x22, 0x14, 0x08, // >
  0x02, 0x01, 0x51, 0x09, 0x06, // ?
  0x3E, 0x41, 0x59, 0x55, 0x5E, // @
  0x7E, 0x09, 0x09, 0x09, 0x7E, // A
  0x7F, 0x49, 0x49, 0x49, 0x36, // B
  0x3E, 0x41, 0x41, 0x41, 0x22, // C
  0x7F, 0x41, 0x41, 0x41, 0x3E, // D
  0x7F, 0x49, 0x49, 0x49, 0x41, // E
  0x7F, 0x09, 0x09, 0x09, 0x01, // F
  0x3E, 0x41, 0x41, 0x49, 0x3A, // G
  0x7F, 0x08, 0x08, 0x08, 0x7F, // H
  0x00, 0x41, 0x7F, 0x41, 0x00, // I
  0x30, 0x40, 0x40, 0x40, 0x3F, // J
  0x7F, 0x08, 0x14, 0x22, 0x41, // K
  0x7F, 0x40, 0x40, 0x40, 0x40, // L
  0x7F, 0x02, 0x0C, 0x02, 0x7F, // M
  0x7F, 0x02, 0x04, 0x08, 0x7F, // N
  0x3E, 0x41, 0x41, 0x41, 0x3E, // O
  0x7F, 0x09, 0x09, 0x09, 0x06, // P
  0x1E, 0x21, 0x21, 0x21, 0x5E, // Q
  0x7F, 0x09, 0x09, 0x09, 0x76, // R
  0x26, 0x49, 0x49, 0x49, 0x32, // S
  0x01, 0x01, 0x7F, 0x01, 0x01, // T
  0x3F, 0x40, 0x40, 0x40, 0x3F, // U
  0x1F, 0x20, 0x40, 0x20, 0x1F, // V
  0x7F, 0x20, 0x10, 0x20, 0x7F, // W
  0x41, 0x22, 0x1C, 0x22, 0x41, // X
  0x07, 0x08, 0x70, 0x08, 0x07, // Y
  0x61, 0x51, 0x49, 0x45, 0x43, // Z
  0x00, 0x7F, 0x41, 0x00, 0x00, // [
  0x02, 0x04, 0x08, 0x10, 0x20, // backslash
  0x00, 0x00, 0x41, 0x7F, 0x00, // ]
  0x04, 0x02, 0x01, 0x02, 0x04, // ^
  0x40, 0x40, 0x40, 0x40, 0x40, // _
  0x00, 0x01, 0x02, 0x04, 0x00, // `
  0x20, 0x54, 0x54, 0x54, 0x78, // a
  0x7F, 0x44, 0x44, 0x44, 0x38, // b
  0x38, 0x44, 0x44, 0x44, 0x44, // c
  0x38, 0x44, 0x44, 0x44, 0x7F, // d
  0x38, 0x54, 0x54, 0x54, 0x18, // e
  0x04, 0x04, 0x7E, 0x05, 0x05, // f
  0x08, 0x54, 0x54, 0x54, 0x3C, // g
  0x7F, 0x08, 0x04, 0x04, 0x78, // h
  0x00, 0x44, 0x7D, 0x40, 0x00, // i
  0x20, 0x40, 0x44, 0x3D, 0x00, // j
  0x7F, 0x10, 0x28, 0x44, 0x00, // k
  0x00, 0x41, 0x7F, 0x40, 0x00, // l
  0x7C, 0x04, 0x78, 0x04, 0x78, // m
  0x7C, 0x08, 0x04, 0x04, 0x78, // n
  0x38, 0x44, 0x44, 0x44, 0x38, // o
  0x7C, 0x14, 0x14, 0x14, 0x08, // p
  0x08, 0x14, 0x14, 0x14, 0x7C, // q
  0x00, 0x7C, 0x08, 0x04, 0x04, // r
  0x48, 0x54, 0x54, 0x54, 0x20, // s
  0x04, 0x04, 0x3F, 0x44, 0x44, // t
  0x3C, 0x40, 0x40, 0x20, 0x7C, // u
  0x1C, 0x20, 0x40, 0x20, 0x1C, // v
  0x3C, 0x40, 0x30, 0x40, 0x3C, // w
  0x44, 0x28, 0x10, 0x28, 0x44, // x
  0x0C, 0x50, 0x50, 0x50, 0x3C, // y
  0x44, 0x64, 0x54, 0x4C, 0x44, // z
  0x00, 0x08, 0x36, 0x41, 0x41, // {
  0x00, 0x00, 0x7F, 0x00, 0x00, // |
  0x41, 0x41, 0x36, 0x08, 0x00, // }
  0x02, 0x01, 0x02, 0x04, 0x02, // ~
  0X7F, 0X7F, 0X7F, 0X7F, 0X7F  // del
};
#endif  // font5x7_h



=== Файл: src\SSD1306Ascii\src\fonts\font8x8.h ===

#ifndef FONT8x8_H
#define FONT8x8_H

GLCDFONTDECL(font8x8) = {
    0x0, 0x1, // size of one indicates fixed font width and no pixel padding
    0x08, // width
    0x08, // height
    0x20, // first char
    0x5f, // char count

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // <space>
0x00,0x00,0x00,0x00,0x5F,0x00,0x00,0x00,  // !
0x00,0x00,0x00,0x03,0x00,0x03,0x00,0x00,  // "
0x00,0x24,0x7E,0x24,0x24,0x7E,0x24,0x00,  // #
0x00,0x2E,0x2A,0x7F,0x2A,0x3A,0x00,0x00,  // $
0x00,0x46,0x26,0x10,0x08,0x64,0x62,0x00,  // %
0x00,0x20,0x54,0x4A,0x54,0x20,0x50,0x00,  // &
0x00,0x00,0x00,0x04,0x02,0x00,0x00,0x00,  // '
0x00,0x00,0x00,0x3C,0x42,0x00,0x00,0x00,  // (
0x00,0x00,0x00,0x42,0x3C,0x00,0x00,0x00,  // )
0x00,0x10,0x54,0x38,0x54,0x10,0x00,0x00,  // *
0x00,0x10,0x10,0x7C,0x10,0x10,0x00,0x00,  // +
0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,  // ,
0x00,0x10,0x10,0x10,0x10,0x10,0x00,0x00,  // -
0x00,0x00,0x00,0x60,0x60,0x00,0x00,0x00,  // .
0x00,0x40,0x20,0x10,0x08,0x04,0x00,0x00,  // /

0x3C,0x62,0x52,0x4A,0x46,0x3C,0x00,0x00,  // 0
0x44,0x42,0x7E,0x40,0x40,0x00,0x00,0x00,  // 1
0x64,0x52,0x52,0x52,0x52,0x4C,0x00,0x00,  // 2
0x24,0x42,0x42,0x4A,0x4A,0x34,0x00,0x00,  // 3
0x30,0x28,0x24,0x7E,0x20,0x20,0x00,0x00,  // 4
0x2E,0x4A,0x4A,0x4A,0x4A,0x32,0x00,0x00,  // 5
0x3C,0x4A,0x4A,0x4A,0x4A,0x30,0x00,0x00,  // 6
0x02,0x02,0x62,0x12,0x0A,0x06,0x00,0x00,  // 7
0x34,0x4A,0x4A,0x4A,0x4A,0x34,0x00,0x00,  // 8
0x0C,0x52,0x52,0x52,0x52,0x3C,0x00,0x00,  // 9
0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,  // :
0x00,0x00,0x80,0x64,0x00,0x00,0x00,0x00,  // ;
0x00,0x00,0x10,0x28,0x44,0x00,0x00,0x00,  // <
0x00,0x28,0x28,0x28,0x28,0x28,0x00,0x00,  // =
0x00,0x00,0x44,0x28,0x10,0x00,0x00,0x00,  // >
0x00,0x04,0x02,0x02,0x52,0x0A,0x04,0x00,  // ?

0x00,0x3C,0x42,0x5A,0x56,0x5A,0x1C,0x00,  // @
0x7C,0x12,0x12,0x12,0x12,0x7C,0x00,0x00,  // A
0x7E,0x4A,0x4A,0x4A,0x4A,0x34,0x00,0x00,  // B
0x3C,0x42,0x42,0x42,0x42,0x24,0x00,0x00,  // C
0x7E,0x42,0x42,0x42,0x24,0x18,0x00,0x00,  // D
0x7E,0x4A,0x4A,0x4A,0x4A,0x42,0x00,0x00,  // E
0x7E,0x0A,0x0A,0x0A,0x0A,0x02,0x00,0x00,  // F
0x3C,0x42,0x42,0x52,0x52,0x34,0x00,0x00,  // G
0x7E,0x08,0x08,0x08,0x08,0x7E,0x00,0x00,  // H
0x00,0x42,0x42,0x7E,0x42,0x42,0x00,0x00,  // I
0x30,0x40,0x40,0x40,0x40,0x3E,0x00,0x00,  // J
0x7E,0x08,0x08,0x14,0x22,0x40,0x00,0x00,  // K
0x7E,0x40,0x40,0x40,0x40,0x40,0x00,0x00,  // L
0x7E,0x04,0x08,0x08,0x04,0x7E,0x00,0x00,  // M
0x7E,0x04,0x08,0x10,0x20,0x7E,0x00,0x00,  // N
0x3C,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,  // O

0x7E,0x12,0x12,0x12,0x12,0x0C,0x00,0x00,  // P
0x3C,0x42,0x52,0x62,0x42,0x3C,0x00,0x00,  // Q
0x7E,0x12,0x12,0x12,0x32,0x4C,0x00,0x00,  // R
0x24,0x4A,0x4A,0x4A,0x4A,0x30,0x00,0x00,  // S
0x02,0x02,0x02,0x7E,0x02,0x02,0x02,0x00,  // T
0x3E,0x40,0x40,0x40,0x40,0x3E,0x00,0x00,  // U
0x1E,0x20,0x40,0x40,0x20,0x1E,0x00,0x00,  // V
0x3E,0x40,0x20,0x20,0x40,0x3E,0x00,0x00,  // W
0x42,0x24,0x18,0x18,0x24,0x42,0x00,0x00,  // X
0x02,0x04,0x08,0x70,0x08,0x04,0x02,0x00,  // Y
0x42,0x62,0x52,0x4A,0x46,0x42,0x00,0x00,  // Z
0x00,0x00,0x7E,0x42,0x42,0x00,0x00,0x00,  // [
0x00,0x04,0x08,0x10,0x20,0x40,0x00,0x00,  // <backslash>
0x00,0x00,0x42,0x42,0x7E,0x00,0x00,0x00,  // ]
0x00,0x08,0x04,0x7E,0x04,0x08,0x00,0x00,  // ^
0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,  // _

0x3C,0x42,0x99,0xA5,0xA5,0x81,0x42,0x3C,  // `
0x00,0x20,0x54,0x54,0x54,0x78,0x00,0x00,  // a
0x00,0x7E,0x48,0x48,0x48,0x30,0x00,0x00,  // b
0x00,0x00,0x38,0x44,0x44,0x44,0x00,0x00,  // c
0x00,0x30,0x48,0x48,0x48,0x7E,0x00,0x00,  // d
0x00,0x38,0x54,0x54,0x54,0x48,0x00,0x00,  // e
0x00,0x00,0x00,0x7C,0x0A,0x02,0x00,0x00,  // f
0x00,0x18,0xA4,0xA4,0xA4,0xA4,0x7C,0x00,  // g
0x00,0x7E,0x08,0x08,0x08,0x70,0x00,0x00,  // h
0x00,0x00,0x00,0x48,0x7A,0x40,0x00,0x00,  // i
0x00,0x00,0x40,0x80,0x80,0x7A,0x00,0x00,  // j
0x00,0x7E,0x18,0x24,0x40,0x00,0x00,0x00,  // k
0x00,0x00,0x00,0x3E,0x40,0x40,0x00,0x00,  // l
0x00,0x7C,0x04,0x78,0x04,0x78,0x00,0x00,  // m
0x00,0x7C,0x04,0x04,0x04,0x78,0x00,0x00,  // n
0x00,0x38,0x44,0x44,0x44,0x38,0x00,0x00,  // o

0x00,0xFC,0x24,0x24,0x24,0x18,0x00,0x00,  // p
0x00,0x18,0x24,0x24,0x24,0xFC,0x80,0x00,  // q
0x00,0x00,0x78,0x04,0x04,0x04,0x00,0x00,  // r
0x00,0x48,0x54,0x54,0x54,0x20,0x00,0x00,  // s
0x00,0x00,0x04,0x3E,0x44,0x40,0x00,0x00,  // t
0x00,0x3C,0x40,0x40,0x40,0x3C,0x00,0x00,  // u
0x00,0x0C,0x30,0x40,0x30,0x0C,0x00,0x00,  // v
0x00,0x3C,0x40,0x38,0x40,0x3C,0x00,0x00,  // w
0x00,0x44,0x28,0x10,0x28,0x44,0x00,0x00,  // x
0x00,0x1C,0xA0,0xA0,0xA0,0x7C,0x00,0x00,  // y
0x00,0x44,0x64,0x54,0x4C,0x44,0x00,0x00,  // z
0x00,0x08,0x08,0x76,0x42,0x42,0x00,0x00,  // {
0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,  // |
0x00,0x42,0x42,0x76,0x08,0x08,0x00,0x00,  // }
0x00,0x00,0x04,0x02,0x04,0x02,0x00,0x00,  // ~
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Iain5x7.h ===

/*
 *
 * Iain5x7
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : Iain5x7.h
 * Date                : 28.12.2010
 * Font size in bytes  : 2461
 * Font width          : 5
 * Font height         : 7
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef IAIN5X7_H_INCLUDED
#define IAIN5X7_H_INCLUDED

#define IAIN5X7_WIDTH 5
#define IAIN5X7_HEIGHT 7

//#define SUBFONT

GLCDFONTDECL(Iain5x7) = {
    0x09, 0x9D, // size
    0x05, // width
    0x07, // height

#ifdef SUBFONT
    'A',
    63,
#else
    0x20, // first char
    0x60, // char count
#endif

    // char widths
#ifndef SUBFONT
    0x01, 0x01, 0x03, 0x05, 0x05, 0x05, 0x05, 0x01, 0x02, 0x02,
    0x05, 0x03, 0x01, 0x02, 0x01, 0x03, 0x04, 0x02, 0x04, 0x04,
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x01, 0x01, 0x03, 0x03,

    0x03, 0x04, 0x05,
#endif
                      0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
    0x04, 0x03, 0x04, 0x05, 0x03, 0x05, 0x05, 0x05, 0x04, 0x05,
    0x04, 0x04, 0x03, 0x04, 0x05, 0x05, 0x05, 0x05, 0x05, 0x02,
    0x03, 0x02, 0x03, 0x03, 0x01, 0x04, 0x04, 0x04, 0x04, 0x04,
    0x04, 0x04, 0x04, 0x01, 0x03, 0x04, 0x01, 0x05, 0x04, 0x04,
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x03, 0x05, 0x03, 0x04,
    0x04, 0x03, 0x01, 0x03, 0x05, 0x00,

    // font data
#ifndef SUBFONT
    0x00,                               // 32 <space>
    0xBE,                               // 33 !
    0x0E, 0x00, 0x0E,                   // 34 "
    0x28, 0xFE, 0x28, 0xFE, 0x28,       // 35 #
    0x48, 0x54, 0xFE, 0x54, 0x24,       // 36 $
    0x46, 0x26, 0x10, 0xC8, 0xC4,       // 37 %
    0x6C, 0x92, 0xAA, 0x44, 0xA0,       // 38 &
    0x06,                               // 39 '
    0x3C, 0x42,                         // 40 (
    0x42, 0x3C,                         // 41 )
    0x00, 0x54, 0x38, 0x54, 0x00,       // 42 *
    0x10, 0x38, 0x10,                   // 43 +
    0xC0,                               // 44 ,
    0x10, 0x10,                         // 45 -
    0x40,                               // 46 .
    0xC0, 0x38, 0x06,                   // 47 /
    0x7C, 0x82, 0x82, 0x7C,             // 48 0
    0x04, 0xFE,                         // 49 1
    0xC4, 0xA2, 0x92, 0x8C,             // 50 2
    0x82, 0x92, 0x92, 0x6C,             // 51 3
    0x30, 0x28, 0x24, 0xFE,             // 52 4
    0x4E, 0x92, 0x92, 0x72,             // 53 5
    0x78, 0x94, 0x92, 0x60,             // 54 6
    0x02, 0xE2, 0x12, 0x0E,             // 55 7
    0x6C, 0x92, 0x92, 0x6C,             // 56 8
    0x0C, 0x92, 0x52, 0x3C,             // 57 9
    0x6C,                               // 58 :
    0x6C,                               // 59 ;
    0x10, 0x28, 0x44,                   // 60 <
    0x28, 0x28, 0x28,                   // 61 =
    0x44, 0x28, 0x10,                   // 62 >
    0x04, 0xA2, 0x12, 0x0C,             // 63 ?
    0x64, 0x92, 0xF2, 0x82, 0x7C,       // 64 @
#endif
    0xFC, 0x22, 0x22, 0xFC,             // 65 A
    0xFE, 0x92, 0x92, 0x6C,             // 66 B
    0x7C, 0x82, 0x82, 0x44,             // 67 C
    0xFE, 0x82, 0x82, 0x7C,             // 68 D
    0xFE, 0x92, 0x92, 0x82,             // 69 E
    0xFE, 0x12, 0x12, 0x02,             // 70 F
    0x7C, 0x82, 0xA2, 0x64,             // 71 G
    0xFE, 0x10, 0x10, 0xFE,             // 72 H
    0x82, 0xFE, 0x82,                   // 73 I
    0x40, 0x80, 0x80, 0x7E,             // 74 J
    0xFE, 0x10, 0x28, 0x44, 0x82,       // 75 K
    0xFE, 0x80, 0x80,                   // 76 L
    0xFE, 0x04, 0x08, 0x04, 0xFE,       // 77 M
    0xFE, 0x08, 0x10, 0x20, 0xFE,       // 78 N
    0x7C, 0x82, 0x82, 0x82, 0x7C,       // 79 O
    0xFE, 0x12, 0x12, 0x0C,             // 80 P
    0x7C, 0x82, 0xA2, 0x42, 0xBC,       // 81 Q
    0xFE, 0x32, 0x52, 0x8C,             // 82 R
    0x4C, 0x92, 0x92, 0x64,             // 83 S
    0x02, 0xFE, 0x02,                   // 84 T
    0x7E, 0x80, 0x80, 0x7E,             // 85 U
    0x3E, 0x40, 0x80, 0x40, 0x3E,       // 86 V
    0xFE, 0x40, 0x30, 0x40, 0xFE,       // 87 W
    0xC6, 0x28, 0x10, 0x28, 0xC6,       // 88 X
    0x06, 0x08, 0xF0, 0x08, 0x06,       // 89 Y
    0xC2, 0xA2, 0x92, 0x8A, 0x86,       // 90 Z
    0xFE, 0x82,                         // 91 [
    0x06, 0x38, 0xC0,                   // 92 '\'
    0x82, 0xFE,                         // 93 ]
    0x04, 0x02, 0x04,                   // 94 ^
    0x80, 0x80, 0x80,                   // 95 _
    0x06,                               // 96 `
    0x40, 0xA8, 0xA8, 0x70,             // 97 a
    0x7E, 0x90, 0x88, 0x70,             // 98 b
    0x70, 0x88, 0x88, 0x50,             // 99 c
    0x70, 0x88, 0x90, 0x7E,             // 100 d
    0x70, 0xA8, 0xA8, 0x30,             // 101 e 
    0x10, 0xFC, 0x12, 0x04,             // 102 f
    0x10, 0xA8, 0xA8, 0x78,             // 103 g
    0xFE, 0x10, 0x08, 0xF0,             // 104 h
    0xFA,                               // 105 i
    0x40, 0x80, 0x7A,                   // 106 j
    0xFE, 0x20, 0x50, 0x88,             // 107 k
    0xFE,                               // 108 l
    0xF8, 0x08, 0x30, 0x08, 0xF0,       // 109 m
    0xF8, 0x10, 0x08, 0xF0,             // 110 n
    0x70, 0x88, 0x88, 0x70,             // 111 o
    0xF8, 0x28, 0x28, 0x10,             // 112 p
    0x10, 0x28, 0x28, 0xF8,             // 113 q
    0xF8, 0x10, 0x08, 0x10,             // 114 r
    0x90, 0xA8, 0xA8, 0x48,             // 115 s
    0x08, 0x7E, 0x88, 0x40,             // 116 t
    0x78, 0x80, 0x40, 0xF8,             // 117 u
    0x78, 0x80, 0x78,                   // 118 v
    0x78, 0x80, 0x60, 0x80, 0x78,       // 119 w
    0xD8, 0x20, 0xD8,                   // 120 x
    0x18, 0xA0, 0xA0, 0x78,             // 121 y
    0xC8, 0xA8, 0xA8, 0x98,             // 122 z
    0x10, 0x6C, 0x82,                   // 123 {
    0xEE,                               // 124 |
    0x82, 0x6C, 0x10,                   // 125 }
    0x10, 0x08, 0x10, 0x20, 0x10,       // 126 ~
    // no defintion for 127

};
#endif


=== Файл: src\SSD1306Ascii\src\fonts\iBattery12x19.h ===



/*
 *
 * Battery12x19
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : iBattery12x19.h
 * Date                : 23.09.2020
 * Font size in bytes  : 1380
 * Font width          : 19
 * Font height         : 12
 * Font first char     : 48
 * Font last char      : 54
 * Font used chars     : 6
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>
#include <avr/pgmspace.h>

#ifndef IBATTERY12X19_H
#define IBATTERY12X19_H

#define IBATTERY12X19_WIDTH 19
#define IBATTERY12X19_HEIGHT 12

static const uint8_t iBattery12x19[] PROGMEM = {
    0x05, 0x64, // size
    0x13, // width
    0xC, // height
    0x30, // first char
    0x06, // char count
    
    // char widths
    0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 
    
    // font data
    0xFC, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xF0, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x70, 0x10, // 48
    0xFC, 0xFE, 0x06, 0x06, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xF0, 0x70, 0xF0, 0xC0, 0xC0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x70, 0x10, // 49
    0xFC, 0xFE, 0x06, 0x06, 0xFE, 0x06, 0x06, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xF0, 0x70, 0xF0, 0xC0, 0xC0, 0xF0, 0xC0, 0xC0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x70, 0x10, // 50
    0xFC, 0xFE, 0x06, 0x06, 0xFE, 0x06, 0x06, 0xFE, 0x06, 0x06, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xF0, 0x70, 0xF0, 0xC0, 0xC0, 0xF0, 0xC0, 0xC0, 0xF0, 0xC0, 0xC0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x70, 0x10, // 51
    0xFC, 0xFE, 0x06, 0x06, 0xFE, 0x06, 0x06, 0xFE, 0x06, 0x06, 0xFE, 0x06, 0x06, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xF0, 0x70, 0xF0, 0xC0, 0xC0, 0xF0, 0xC0, 0xC0, 0xF0, 0xC0, 0xC0, 0xF0, 0xC0, 0xC0, 0xF0, 0xF0, 0xF0, 0xF0, 0x70, 0x10, // 52
    0xFC, 0xFE, 0x06, 0x06, 0xFE, 0x06, 0x06, 0xFE, 0x06, 0x06, 0xFE, 0x06, 0x06, 0xFE, 0x06, 0x06, 0xFE, 0xFC, 0xF0, 0x70, 0xF0, 0xC0, 0xC0, 0xF0, 0xC0, 0xC0, 0xF0, 0xC0, 0xC0, 0xF0, 0xC0, 0xC0, 0xF0, 0xC0, 0xC0, 0xF0, 0x70, 0x10 // 53
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\lcd5x7.h ===

//http://www.hwsw.no/snippets/5x7_LCD_font.php

#ifndef lcd5x7_h
#define lcd5x7_h
GLCDFONTDECL(lcd5x7) = {
  0x0, 0x0, // size of zero indicates fixed width font,
  0x05, // width
  0x07, // height
  0x20, // first char
  0x60, // char count

  0x00,0x00,0x00,0x00,0x00, // SPACE

  0x00,0x00,0x4F,0x00,0x00, // !
  0x00,0x07,0x00,0x07,0x00, // "
  0x14,0x7F,0x14,0x7F,0x14, // #
  0x24,0x2A,0x7F,0x2A,0x12, // $
  0x23,0x13,0x08,0x64,0x62, // %
  0x36,0x49,0x55,0x22,0x50, // &
  0x00,0x05,0x03,0x00,0x00, // '
  0x00,0x1C,0x22,0x41,0x00, // (
  0x00,0x41,0x22,0x1C,0x00, // )
  0x14,0x08,0x3E,0x08,0x14, // *
  0x08,0x08,0x3E,0x08,0x08, // +
  0x00,0x50,0x30,0x00,0x00, // ,
  0x08,0x08,0x08,0x08,0x08, // -
  0x00,0x60,0x60,0x00,0x00, // .
  0x20,0x10,0x08,0x04,0x02, // /

  0x3E,0x51,0x49,0x45,0x3E, // 0
  0x00,0x42,0x7F,0x40,0x00, // 1
  0x42,0x61,0x51,0x49,0x46, // 2
  0x21,0x41,0x45,0x4B,0x31, // 3
  0x18,0x14,0x12,0x7F,0x10, // 4
  0x27,0x45,0x45,0x45,0x39, // 5
  0x3C,0x4A,0x49,0x49,0x30, // 6
  0x01,0x71,0x09,0x05,0x03, // 7
  0x36,0x49,0x49,0x49,0x36, // 8
  0x06,0x49,0x49,0x29,0x1E, // 9

  0x36,0x36,0x00,0x00,0x00, // :
  0x56,0x36,0x00,0x00,0x00, // ;
  0x08,0x14,0x22,0x41,0x00, // <
  0x14,0x14,0x14,0x14,0x14, // =
  0x00,0x41,0x22,0x14,0x08, // >
  0x02,0x01,0x51,0x09,0x06, // ?
  0x30,0x49,0x79,0x41,0x3E, // @

  0x7E,0x11,0x11,0x11,0x7E, // A
  0x7F,0x49,0x49,0x49,0x36, // B
  0x3E,0x41,0x41,0x41,0x22, // C
  0x7F,0x41,0x41,0x22,0x1C, // D
  0x7F,0x49,0x49,0x49,0x41, // E
  0x7F,0x09,0x09,0x09,0x01, // F
  0x3E,0x41,0x49,0x49,0x7A, // G
  0x7F,0x08,0x08,0x08,0x7F, // H
  0x00,0x41,0x7F,0x41,0x00, // I
  0x20,0x40,0x41,0x3F,0x01, // J
  0x7F,0x08,0x14,0x22,0x41, // K
  0x7F,0x40,0x40,0x40,0x40, // L
  0x7F,0x02,0x0C,0x02,0x7F, // M
  0x7F,0x04,0x08,0x10,0x7F, // N
  0x3E,0x41,0x41,0x41,0x3E, // O
  0x7F,0x09,0x09,0x09,0x06, // P
  0x3E,0x41,0x51,0x21,0x5E, // Q
  0x7F,0x09,0x19,0x29,0x46, // R
  0x46,0x49,0x49,0x49,0x31, // S
  0x01,0x01,0x7F,0x01,0x01, // T
  0x3F,0x40,0x40,0x40,0x3F, // U
  0x1F,0x20,0x40,0x20,0x1F, // V
  0x3F,0x40,0x30,0x40,0x3F, // W
  0x63,0x14,0x08,0x14,0x63, // X
  0x07,0x08,0x70,0x08,0x07, // Y
  0x61,0x51,0x49,0x45,0x43, // Z

  0x00,0x7F,0x41,0x41,0x00, // [
  0x02,0x04,0x08,0x10,0x20, // backslash
  0x00,0x41,0x41,0x7F,0x00, // ]
  0x04,0x02,0x01,0x02,0x04, // ^
  0x40,0x40,0x40,0x40,0x40, // _
  0x00,0x01,0x02,0x04,0x00, // `

  0x20,0x54,0x54,0x54,0x78, // a
  0x7F,0x50,0x48,0x48,0x30, // b
  0x38,0x44,0x44,0x44,0x20, // c
  0x38,0x44,0x44,0x48,0x7F, // d
  0x38,0x54,0x54,0x54,0x18, // e
  0x08,0x7E,0x09,0x01,0x02, // f
  0x0C,0x52,0x52,0x52,0x3E, // g
  0x7F,0x08,0x04,0x04,0x78, // h
  0x00,0x44,0x7D,0x40,0x00, // i
  0x20,0x40,0x44,0x3D,0x00, // j
  0x7F,0x10,0x28,0x44,0x00, // k
  0x00,0x41,0x7F,0x40,0x00, // l
  0x78,0x04,0x58,0x44,0x78, // m
  0x7C,0x08,0x04,0x04,0x78, // n
  0x38,0x44,0x44,0x44,0x38, // o
  0x7C,0x14,0x14,0x14,0x08, // p
  0x08,0x14,0x14,0x18,0x7C, // q
  0x7C,0x08,0x04,0x04,0x08, // r
  0x48,0x54,0x54,0x54,0x20, // s
  0x04,0x3F,0x44,0x40,0x20, // t
  0x3C,0x40,0x40,0x20,0x7C, // u
  0x1C,0x20,0x40,0x20,0x1C, // v
  0x3C,0x40,0x30,0x40,0x3C, // w
  0x44,0x28,0x10,0x28,0x44, // x
  0x0C,0x50,0x50,0x50,0x3C, // y
  0x44,0x64,0x54,0x4C,0x44, // z

  0x00,0x08,0x36,0x41,0x00, // {
  0x00,0x00,0x7F,0x00,0x00, // |
  0x00,0x41,0x36,0x08,0x00, // }
  0x0C,0x02,0x0C,0x10,0x0C, // ~

  0x00,0x00,0x00,0x00,0x00
  };
#endif  // lcd5x7_h

=== Файл: src\SSD1306Ascii\src\fonts\lcdnums12x16.h ===

/*
 * Fixed width font for numbers that looks like LCD panel digits
 * This font including pad pixels, will render 12x16 pixels on the display 
 *
 * This font is very useful when using overstrike as all characters & numbers
 * are all the same width.
 *
 * This font is not a complete character set. The font only contains
 * the characters: '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '9', ':'
 *
 * This font is nice for certain applications like clocks, signed values or decimal point values.
 *
 */

GLCDFONTDECL(lcdnums12x16) =
{
  0x0, 0x0,	// size of zero indicates fixed width font
    11,		// width  (will be 12 with pad pixel on right)
    15,		// height (will be 16 with pad pixel on bottom)
    '+',	// first char
    16,		// char count
0x00, 0x00, 0x00, 0x80, 0x80, 0xe0, 0xe0, 0x80, 0x80, 0x00, 0x00,  
0x00, 0x00, 0x01, 0x03, 0x03, 0x0f, 0x0f, 0x03, 0x03, 0x01, 0x00,    // +

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0x60, 0x00, 0x00, 0x00, 0x00,    // ,

0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00,
0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,    // -

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,    // .

0x00, 0x00, 0x02, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x02, 0x00,
0x00, 0x00, 0x81, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x81, 0x00,    // /

0x00, 0xfc, 0x7a, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x7a, 0xfc,
0x00, 0x7e, 0xbc, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xbc, 0x7e,    // 0

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xfc,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x7e,    // 1

0x00, 0x00, 0x02, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x7a, 0xfc,
0x00, 0x7e, 0xbd, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x81, 0x00,    // 2

0x00, 0x00, 0x02, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x7a, 0xfc,
0x00, 0x00, 0x81, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xbd, 0x7e,    // 3

0x00, 0xfc, 0x78, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x78, 0xfc,
0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x3d, 0x7e,    // 4

0x00, 0xfc, 0x7a, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x02, 0x00,
0x00, 0x00, 0x81, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xbd, 0x7e,    // 5

0x00, 0xfc, 0x7a, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x02, 0x00,
0x00, 0x7e, 0xbd, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xbd, 0x7e,    // 6

0x00, 0x00, 0x02, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x7a, 0xfc,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x7e,    // 7

0x00, 0xfc, 0x7a, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x7a, 0xfc,
0x00, 0x7e, 0xbd, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xbd, 0x7e,    // 8

0x00, 0xfc, 0x7a, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x7a, 0xfc,
0x00, 0x00, 0x81, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xbd, 0x7e,    // 9

0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00     // :
};


=== Файл: src\SSD1306Ascii\src\fonts\lcdnums14x24.h ===

/*
 * Fixed width font for numbers that looks like LCD panel digits
 * This font including pad pixels, will render 14x24 pixels on the display 
 *
 * This font is very useful when using overstrike as all characters & numbers
 * are all the same width.
 *
 * This font is not a complete character set. The font only contains
 * the characters: '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '9', ':'
 *
 * This font is nice for certain applications like clocks, signed values or decimal point values.
 *
 */


GLCDFONTDECL(lcdnums14x24) =
{
  0x0, 0x0,	// size of zero indicates fixed width font
    13,		// width  (will be 14 with pad pixel on right)
    23,		// height (will be 24 with pad pixel on bottom)
    '+',	// first char
    16,		// char count

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x10, 0x38, 0x38, 0x38, 0xff, 0xff, 0x38, 0x38, 0x38, 0x10, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,   // +

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x78, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,   // ,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x10, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x10, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // -

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xe0, 0xe0, 0x40, 0x00, 0x00, 0x00, 0x00,   // .

0x00, 0x00, 0x02, 0x06, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x06, 0x02, 0x00,
0x00, 0x00, 0x10, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x10, 0x00,
0x00, 0x00, 0x80, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0x80, 0x00,   // /

0x00, 0xfc, 0xfa, 0xf6, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0xf6, 0xfa, 0xfc,
0x00, 0xef, 0xc7, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc7, 0xef,
0x00, 0x7f, 0xbf, 0xdf, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xdf, 0xbf, 0x7f,   // 0

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf8, 0xfc,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc7, 0xef,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x3f, 0x7f,   // 1

0x00, 0x00, 0x02, 0x06, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0xf6, 0xfa, 0xfc,
0x00, 0xe0, 0xd0, 0xb8, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x3b, 0x17, 0x0f,
0x00, 0x7f, 0xbf, 0xdf, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0x80, 0x00,   // 2

0x00, 0x00, 0x02, 0x06, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0xf6, 0xfa, 0xfc,
0x00, 0x00, 0x10, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xbb, 0xd7, 0xef,
0x00, 0x00, 0x80, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xdf, 0xbf, 0x7f,   // 3

0x00, 0xfc, 0xf8, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf8, 0xfc,
0x00, 0x0f, 0x17, 0x3b, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xbb, 0xd7, 0xef,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x3f, 0x7f,   // 4

0x00, 0xfc, 0xfa, 0xf6, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x06, 0x02, 0x00,
0x00, 0x0f, 0x17, 0x3b, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xb8, 0xd0, 0xe0,
0x00, 0x00, 0x80, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xdf, 0xbf, 0x7f,   // 5

0x00, 0xfc, 0xfa, 0xf6, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x06, 0x02, 0x00,
0x00, 0xef, 0xd7, 0xbb, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xb8, 0xd0, 0xe0,
0x00, 0x7f, 0xbf, 0xdf, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xdf, 0xbf, 0x7f,   // 6

0x00, 0x00, 0x02, 0x06, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0xf6, 0xfa, 0xfc,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc7, 0xef,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x3f, 0x7f,   // 7

0x00, 0xfc, 0xfa, 0xf6, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0xf6, 0xfa, 0xfc,
0x00, 0xef, 0xd7, 0xbb, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xbb, 0xd7, 0xef,
0x00, 0x7f, 0xbf, 0xdf, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xdf, 0xbf, 0x7f,   // 8

0x00, 0xfc, 0xfa, 0xf6, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0xf6, 0xfa, 0xfc,
0x00, 0x0f, 0x17, 0x3b, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xbb, 0xd7, 0xef,
0x00, 0x00, 0x80, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xdf, 0xbf, 0x7f,   // 9

0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // :
0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0e, 0x0e, 0x04, 0x00, 0x00, 0x00, 0x00
};


=== Файл: src\SSD1306Ascii\src\fonts\Mode12x26.h ===



/*
 *
 * Mode12x26
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : Mode12x26.h
 * Date                : 31.10.2020
 * Font size in bytes  : 791
 * Font width          : 26
 * Font height         : 12
 * Font first char     : 48
 * Font last char      : 53
 * Font used chars     : 5
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>
#include <avr/pgmspace.h>

#ifndef MODE12X26_H
#define MODE12X26_H

#define MODE12X26_WIDTH 26
#define MODE12X26_HEIGHT 12

static const uint8_t Mode12x26[] PROGMEM = {
    0x03, 0x17, // size
    0x1A, // width
    0x0C, // height
    0x30, // first char
    0x05, // char count
    
    // char widths
    0x1A, 0x1C, 0x0B, 0x00, 0x00, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 48
    0xF0, 0xFC, 0xFC, 0x1E, 0x6E, 0x6E, 0x1E, 0xFE, 0x0E, 0xFE, 0xFE, 0x0E, 0xFE, 0xEE, 0xEE, 0x0E, 0xEE, 0xEE, 0xFE, 0x1E, 0xEE, 0xEE, 0x1E, 0xFC, 0xFC, 0xF0, 0x00, 0x00, 0x10, 0x70, 0x70, 0xE0, 0xF0, 0xF0, 0xE0, 0xF0, 0xF0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xF0, 0x70, 0x70, 0x10, 0x00, 0x00, // 49
    0xF0, 0x08, 0x04, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x04, 0x08, 0xF0, 0x10, 0x20, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x20, 0x10, // 50
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Mode13x28.h ===



/*
 *
 * Mode13x28
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : Mode13x28.h
 * Date                : 22.09.2020
 * Font size in bytes  : 736
 * Font width          : 28
 * Font height         : 13
 * Font first char     : 48
 * Font last char      : 50
 * Font used chars     : 2
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>
#include <avr/pgmspace.h>

#ifndef MODE13X28_H
#define MODE13X28_H

#define MODE13X28_WIDTH 28
#define MODE13X28_HEIGHT 13

static const uint8_t Mode13x28[] PROGMEM = {
    0x02, 0xE0, // size
    0x1C, // width
    0xD, // height
    0x30, // first char
    0x02, // char count
    
    // char widths
    0x1C, 0x1C, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 48
    0x00, 0xF8, 0x04, 0x02, 0xE2, 0x92, 0x92, 0xE2, 0x02, 0xF2, 0x02, 0x02, 0xF2, 0x02, 0x12, 0x12, 0xF2, 0x12, 0x12, 0x02, 0xE2, 0x12, 0x12, 0xE2, 0x02, 0x04, 0xF8, 0x00, 0x00, 0x18, 0x20, 0x40, 0x48, 0x40, 0x40, 0x48, 0x40, 0x40, 0x48, 0x48, 0x40, 0x40, 0x40, 0x40, 0x48, 0x40, 0x40, 0x40, 0x40, 0x48, 0x48, 0x40, 0x40, 0x20, 0x18, 0x00 // 49
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Mode213x28.h ===



/*
 *
 * Mode13x28
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : Mode213x28.h
 * Date                : 22.09.2020
 * Font size in bytes  : 736
 * Font width          : 28
 * Font height         : 13
 * Font first char     : 48
 * Font last char      : 50
 * Font used chars     : 2
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>
#include <avr/pgmspace.h>

#ifndef MODE213X28_H
#define MODE213X28_H

#define MODE213X28_WIDTH 28
#define MODE213X28_HEIGHT 13

static const uint8_t Mode213x28[] PROGMEM = {
    0x02, 0xE0, // size
    0x1C, // width
    0xD, // height
    0x30, // first char
    0x02, // char count
    
    // char widths
    0x1C, 0x1C, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 48
    0x00, 0xF8, 0xFC, 0xFE, 0x1E, 0x6E, 0x6E, 0x1E, 0xFE, 0x0E, 0xFE, 0xFE, 0x0E, 0xFE, 0xEE, 0xEE, 0x0E, 0xEE, 0xEE, 0xFE, 0x1E, 0xEE, 0xEE, 0x1E, 0xFE, 0xFC, 0xF8, 0x00, 0x00, 0x18, 0x38, 0x78, 0x70, 0x78, 0x78, 0x70, 0x78, 0x78, 0x70, 0x70, 0x78, 0x78, 0x78, 0x78, 0x70, 0x78, 0x78, 0x78, 0x78, 0x70, 0x70, 0x78, 0x78, 0x38, 0x18, 0x00 // 49
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\MonoNum22x32.h ===



/*
 *
 * Mono22x32
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : MonoNum22x32.h
 * Date                : 21.09.2020
 * Font size in bytes  : 18336
 * Font width          : 22
 * Font height         : 32
 * Font first char     : 44
 * Font last char      : 58
 * Font used chars     : 14
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>
#include <avr/pgmspace.h>

#ifndef MONONUM22X32_H
#define MONONUM22X32_H

#define MONONUM22X32_WIDTH 22
#define MONONUM22X32_HEIGHT 32

static const uint8_t MonoNum22x32[] PROGMEM = {
    0x47, 0xA0, // size
    0x16, // width
    0x20, // height
    0x2C, // first char
    0xE, // char count
    
    // char widths
    0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 
    0x16, 0x16, 0x16, 0x16,
    
    // font data
    0x00, 0x00, 0x00, 0x38, 0xFE, 0xC6, 0x83, 0x83, 0x83, 0xC6, 0xFE, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 44
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x80, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x7F, 0xFF, 0xC0, 0xC0, 0xE0, 0x60, // 45
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xF8, 0xF8, 0xF8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 46
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 47
    0x00, 0x00, 0xC0, 0xF0, 0xF8, 0x7C, 0x1E, 0x0E, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x0F, 0x0E, 0x1E, 0x7C, 0xF8, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x1F, 0x3E, 0x78, 0x70, 0xF0, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0, 0x70, 0x78, 0x3E, 0x1F, 0x0F, 0x03, 0x00, 0x00, // 48
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x18, 0x1C, 0x1E, 0x1E, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 49
    0x00, 0x00, 0x80, 0xE0, 0xF8, 0x7C, 0x3C, 0x0E, 0x0E, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0F, 0x0E, 0x1E, 0x7C, 0xF8, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0x7F, 0x3F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0x78, 0x3C, 0x1E, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF8, 0xFC, 0xFE, 0xEF, 0xE7, 0xE3, 0xE1, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0x00, // 50
    0x00, 0x00, 0xC0, 0xF0, 0xF8, 0x7C, 0x1E, 0x0E, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0E, 0x1E, 0x3C, 0xFC, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF8, 0xFC, 0x9F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0x0F, 0xFF, 0xFE, 0xF8, 0x00, 0x00, 0x01, 0x07, 0x1F, 0x3E, 0x7C, 0x70, 0x70, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0x70, 0x70, 0x38, 0x3E, 0x1F, 0x07, 0x01, 0x00, // 51
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xF0, 0xF8, 0xFE, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xF0, 0xFC, 0x3E, 0x1F, 0x07, 0x01, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0xFC, 0xFE, 0xEF, 0xE7, 0xE3, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xFF, 0xFF, 0xFF, 0xE0, 0xE0, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, // 52
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFE, 0xFE, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFE, 0xFF, 0x7F, 0x71, 0x70, 0x70, 0x70, 0x70, 0xF0, 0xE0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x1F, 0x3C, 0x78, 0x70, 0xF0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0x70, 0x78, 0x3C, 0x3F, 0x1F, 0x07, 0x01, 0x00, // 53
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xF0, 0x78, 0x1E, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xF0, 0xF8, 0xFC, 0xEE, 0xE7, 0xE3, 0xE0, 0xE0, 0xE0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFE, 0xFF, 0x0F, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x0F, 0xFF, 0xFC, 0xF0, 0x00, 0x00, 0x01, 0x07, 0x1F, 0x3E, 0x38, 0x70, 0x70, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0x70, 0x70, 0x38, 0x3E, 0x1F, 0x07, 0x01, 0x00, // 54
    0x00, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xCE, 0xFE, 0xFE, 0x3E, 0x0E, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF8, 0x7E, 0x1F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xFC, 0x3F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF8, 0x7E, 0x1F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 55
    0x00, 0x00, 0xC0, 0xF0, 0xF8, 0x3C, 0x1E, 0x0E, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0E, 0x1E, 0x3C, 0xF8, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x1F, 0xBC, 0xF8, 0xF0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0, 0xF8, 0xBC, 0x1F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0xF0, 0xFC, 0xFE, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0F, 0xFE, 0xFC, 0xF0, 0x00, 0x00, 0x03, 0x0F, 0x1F, 0x3C, 0x78, 0x70, 0xF0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0, 0x70, 0x78, 0x3C, 0x1F, 0x0F, 0x03, 0x00, // 56
    0x00, 0x00, 0xC0, 0xF0, 0xF8, 0x7C, 0x1E, 0x0E, 0x0E, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0E, 0x0E, 0x1E, 0x7C, 0xF8, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x0F, 0x3F, 0x7F, 0xF8, 0xE0, 0xC0, 0xC0, 0x80, 0x80, 0x80, 0x80, 0x80, 0xC0, 0xC0, 0xE0, 0xF8, 0xFF, 0x3F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0xC3, 0xE3, 0xFB, 0x3F, 0x1F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF8, 0x7C, 0x1F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // 57
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\MonoNum30x40.h ===



/*
 *
 * MonoNum30x40
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : MonoNum30x40.h
 * Date                : 25.09.2020
 * Font size in bytes  : 15540
 * Font width          : 30
 * Font height         : -40
 * Font first char     : 44
 * Font last char      : 58
 * Font used chars     : 14
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>
#include <avr/pgmspace.h>

#ifndef MONONUM30X40_H
#define MONONUM30X40_H

#define MONONUM30X40_WIDTH 30
#define MONONUM30X40_HEIGHT 40

static const uint8_t MonoNum30x40[] PROGMEM = {
    0x3C, 0xB4, // size
    0x1E, // width
    0x28, // height
    0x2C, // first char
    0x0E, // char count
    
    // char widths
    0x0E, 0x1F, 0x0D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
    0x1E, 0x1E, 0x1E, 0x1E, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, 0x78, 0xFC, 0x86, 0x03, 0x03, 0x03, 0x03, 0x86, 0xFC, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 44
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFC, 0xF0, 0x78, 0x38, 0x1C, 0x3C, 0xFC, 0xF8, 0xF0, 0x78, 0x38, 0x1C, 0x3C, 0xFC, 0xF8, 0xF0, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x3F, 0x7F, 0xFF, 0xF0, 0xE0, 0xE0, 0xE0, 0xE0, 0x40, // 45
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x7C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x00, 0x00, 0x00, // 46
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 47
    0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xF8, 0xFC, 0x7C, 0x3E, 0x1E, 0x1F, 0x0F, 0x0F, 0x0F, 0x0F, 0x1F, 0x1E, 0x3E, 0x7C, 0xF8, 0xF8, 0xF0, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF8, 0xFE, 0xFF, 0xFF, 0x1F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0F, 0x7F, 0xFF, 0xFE, 0xF8, 0xC0, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0x3F, 0x7F, 0xFF, 0xFE, 0xF0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF8, 0xFF, 0xFF, 0x7F, 0x1F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x1F, 0x1F, 0x3E, 0x7C, 0x78, 0xF8, 0xF0, 0xF0, 0xF0, 0xF0, 0xF8, 0xF8, 0x7C, 0x7E, 0x3F, 0x1F, 0x0F, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, // 48
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 49
    0x00, 0x00, 0x00, 0x80, 0xC0, 0xF0, 0xF8, 0xF8, 0xFC, 0x7E, 0x3E, 0x1E, 0x1F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x1F, 0x1F, 0x3E, 0x7E, 0xFC, 0xFC, 0xF8, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x1F, 0x1F, 0x1F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0x7F, 0x3F, 0x1F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xF9, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x70, 0x00, // 50
    0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0xF8, 0xFC, 0x7E, 0x3E, 0x1F, 0x1F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x1F, 0x1E, 0x3E, 0x7C, 0xFC, 0xF8, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xF1, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0F, 0x0F, 0x0F, 0x1F, 0x1F, 0x1F, 0x3F, 0x7F, 0xFF, 0xF9, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xE0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x1F, 0x3F, 0x7F, 0x7C, 0xF8, 0xF8, 0xF8, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF8, 0xF8, 0xF8, 0x7C, 0x7F, 0x3F, 0x1F, 0x0F, 0x03, 0x00, 0x00, 0x00, // 51
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xF0, 0xF8, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xFC, 0xFE, 0x7F, 0x1F, 0x0F, 0x03, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xF0, 0xF8, 0xFE, 0xFF, 0x3F, 0x1F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 52
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC7, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3F, 0x3F, 0x1F, 0x0F, 0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x0F, 0x1F, 0x3F, 0xFE, 0xFC, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xE0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x3E, 0x7C, 0x78, 0xF8, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF8, 0x78, 0x7C, 0x3E, 0x3F, 0x1F, 0x0F, 0x07, 0x01, 0x00, 0x00, // 53
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xF8, 0xFE, 0x7F, 0x1F, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xF8, 0xFE, 0xFF, 0xBF, 0x8F, 0x83, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xF8, 0xFE, 0x7F, 0x3F, 0x1F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x1F, 0x3E, 0x7E, 0xFC, 0xF8, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0xFF, 0xFF, 0xFF, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0xFF, 0xFF, 0xFF, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x1F, 0x3F, 0x3E, 0x7C, 0x78, 0xF8, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF8, 0xF8, 0x7C, 0x7E, 0x3F, 0x1F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, // 54
    0x00, 0x00, 0x06, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xF8, 0xFE, 0xFF, 0x3F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF8, 0xFE, 0xFF, 0x3F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF8, 0xFC, 0xFF, 0x7F, 0x1F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xF8, 0xFC, 0xFF, 0x7F, 0x1F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 55
    0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xF8, 0xFC, 0x3E, 0x1E, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x1E, 0x3E, 0xFC, 0xF8, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3F, 0x7F, 0xFF, 0xF8, 0xE0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xE0, 0xF8, 0xFF, 0x7F, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0xF8, 0x7C, 0x3F, 0x1F, 0x1F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x1F, 0x1F, 0x3F, 0x7C, 0xF8, 0xF0, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0xFF, 0xFF, 0xFF, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0xFF, 0xFF, 0xFF, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x1F, 0x3F, 0x3E, 0x7C, 0x78, 0xF8, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF8, 0xF8, 0x7C, 0x7E, 0x3F, 0x1F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, // 56
    0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF8, 0xF8, 0xFC, 0x7C, 0x3E, 0x1E, 0x1F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x1F, 0x1E, 0x3E, 0x7C, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0xFF, 0xFF, 0xFF, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0xFF, 0xFF, 0xFF, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x1F, 0x3F, 0x3E, 0x7C, 0x78, 0xF8, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0x7F, 0x1F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xF8, 0xFE, 0xFF, 0x3F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xF8, 0xFC, 0xFF, 0x7F, 0x3F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // 57
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\newbasic3x5.h ===

/*
 *
 * newbasic3x5
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : newbasic3x5.h
 * Date                : 23.04.2011
 * Font size in bytes  : 1830
 * Font width          : 10
 * Font height         : 6
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef NEWBASIC3X5_H
#define NEWBASIC3X5_H

#define NEWBASIC3X5_WIDTH 3
#define NEWBASIC3X5_HEIGHT 6

GLCDFONTDECL(newbasic3x5) = {
    0x0, 0x0, // size
    0x03, // width
    0x06, // height
    0x20, // first char
    0x60, // char count
    
    /* char widths
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
    */
    // font data
    0x00, 0x00, 0x00, // 32
    0x00, 0x5C, 0x00, // 33
    0x0C, 0x00, 0x0C, // 34
    0x7C, 0x28, 0x7C, // 35
    0x28, 0x7C, 0x28, // 36
    0x24, 0x10, 0x48, // 37
    0x30, 0x5C, 0x6C, // 38
    0x00, 0x0C, 0x00, // 39
    0x38, 0x44, 0x00, // 40
    0x00, 0x44, 0x38, // 41
    0x08, 0x14, 0x08, // 42
    0x10, 0x38, 0x10, // 43
    0x00, 0x60, 0x00, // 44
    0x10, 0x10, 0x10, // 45
    0x00, 0x40, 0x00, // 46
    0x60, 0x10, 0x0C, // 47
    0x7C, 0x44, 0x7C, // 48
    0x48, 0x7C, 0x40, // 49
    0x74, 0x54, 0x5C, // 50
    0x44, 0x54, 0x7C, // 51
    0x1C, 0x10, 0x7C, // 52
    0x5C, 0x54, 0x74, // 53
    0x7C, 0x54, 0x74, // 54
    0x64, 0x14, 0x1C, // 55
    0x7C, 0x54, 0x7C, // 56
    0x5C, 0x54, 0x7C, // 57
    0x00, 0x28, 0x00, // 58
    0x00, 0x68, 0x00, // 59
    0x10, 0x28, 0x44, // 60
    0x28, 0x28, 0x28, // 61
    0x44, 0x28, 0x10, // 62
    0x04, 0x54, 0x1C, // 63
    0x38, 0x5C, 0x58, // 64
    0x78, 0x14, 0x78, // 65
    0x7C, 0x54, 0x28, // 66
    0x38, 0x44, 0x28, // 67
    0x7C, 0x44, 0x38, // 68
    0x7C, 0x54, 0x44, // 69
    0x7C, 0x14, 0x04, // 70
    0x38, 0x44, 0x74, // 71
    0x7C, 0x10, 0x7C, // 72
    0x44, 0x7C, 0x44, // 73
    0x20, 0x40, 0x3C, // 74
    0x7C, 0x10, 0x6C, // 75
    0x7C, 0x40, 0x40, // 76
    0x7C, 0x08, 0x7C, // 77
    0x7C, 0x18, 0x7C, // 78
    0x38, 0x44, 0x38, // 79
    0x7C, 0x14, 0x08, // 80
    0x38, 0x44, 0x78, // 81
    0x7C, 0x14, 0x68, // 82
    0x48, 0x54, 0x24, // 83
    0x04, 0x7C, 0x04, // 84
    0x7C, 0x40, 0x7C, // 85
    0x3C, 0x40, 0x3C, // 86
    0x7C, 0x30, 0x7C, // 87
    0x6C, 0x10, 0x6C, // 88
    0x0C, 0x70, 0x0C, // 89
    0x64, 0x54, 0x4C, // 90
    0x7C, 0x44, 0x00, // 91
    0x0C, 0x10, 0x60, // 92
    0x44, 0x7C, 0x00, // 93
    0x08, 0x04, 0x08, // 94
    0x80, 0x80, 0x80, // 95
    0x04, 0x00, 0x00, // 96
    0x70, 0x70, 0x70, // 97
    0x7C, 0x50, 0x70, // 98
    0x70, 0x50, 0x50, // 99
    0x70, 0x50, 0x7C, // 100
    0x30, 0x70, 0x10, // 101
    0x7C, 0x14, 0x00, // 102
    0x90, 0xF0, 0x40, // 103
    0x7C, 0x10, 0x70, // 104
    0x74, 0x00, 0x00, // 105
    0xE0, 0x00, 0x00, // 106
    0x7C, 0x30, 0x48, // 107
    0x7C, 0x00, 0x00, // 108
    0x70, 0x70, 0x70, // 109
    0x70, 0x10, 0x70, // 110
    0x70, 0x50, 0x70, // 111
    0x00, 0x00, 0x00, // 112
    0x00, 0x00, 0x00, // 113
    0x30, 0x00, 0x00, // 114
    0x50, 0x70, 0x00, // 115
    0x30, 0x50, 0x40, // 116
    0x70, 0x40, 0x70, // 117
    0x30, 0x70, 0x00, // 118
    0x30, 0x10, 0x30, // 119
    0x50, 0x70, 0x00, // 120
    0x00, 0x00, 0x00, // 121
    0x40, 0x70, 0x00, // 122
    0x10, 0x6C, 0x44, // 123
    0x00, 0x7C, 0x00, // 124
    0x44, 0x6C, 0x10, // 125
    0x10, 0x08, 0x10, // 126
    0x78, 0x48, 0x48 // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\ProgBar.h ===



/*
 *
 * ProgBar
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : ProgBar.h
 * Date                : 01.10.2020
 * Font size in bytes  : 48
 * Font width          : 1
 * Font height         : 8
 * Font first char     : 32
 * Font last char      : 50
 * Font used chars     : 18
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>
#include <avr/pgmspace.h>

#ifndef PROGBAR_H
#define PROGBAR_H

#define PROGBAR_WIDTH 1
#define PROGBAR_HEIGHT 8

static const uint8_t ProgBar[] PROGMEM = {
    0x00, 0x30, // size
    0x01, // width
    0x08, // height
    0x20, // first char
    0x12, // char count
    
    // char widths
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 
    
    // font data
    0x00, // 32
    0x70, // 45
    0x40, // 46
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Roosewood22.h ===

/*
 *
 * new Font
 *
 * created with GLCDFontCreator
 * original framework by F. Maximilian Thiele
 * Modified By Siddharth Kaul
 *
 *
 * File Name           : Rooswood22.h
 * Date                : 10.11.2012
 * Font size in bytes  : 21024
 * Font width          : 10
 * Font height         : 22
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */


#ifndef _Rooswood22_H
#define _Rooswood22_H

#define _Rooswood22_WIDTH 10
#define _Rooswood22_HEIGHT 22

GLCDFONTDECL(Roosewood22) = {
    0x52, 0x20, // size
    0x0A, // width
    0x16, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x06, 0x06, 0x07, 0x09, 0x0A, 0x10, 0x0D, 0x04, 0x05, 0x07, 
    0x07, 0x09, 0x05, 0x04, 0x04, 0x08, 0x0A, 0x07, 0x0A, 0x0A, 
    0x0A, 0x0A, 0x0A, 0x0C, 0x0B, 0x0B, 0x04, 0x04, 0x09, 0x09, 
    0x09, 0x0A, 0x0E, 0x0C, 0x0C, 0x0B, 0x0C, 0x0B, 0x0A, 0x0B, 
    0x0C, 0x08, 0x0A, 0x0D, 0x0B, 0x0E, 0x0C, 0x0B, 0x0B, 0x0D, 
    0x0D, 0x0A, 0x0A, 0x0C, 0x0C, 0x0F, 0x0C, 0x0C, 0x0A, 0x06, 
    0x05, 0x07, 0x09, 0x0A, 0x05, 0x0C, 0x0C, 0x0B, 0x0C, 0x0B, 
    0x0A, 0x0B, 0x0C, 0x08, 0x0A, 0x0D, 0x0B, 0x0E, 0x0C, 0x0B, 
    0x0B, 0x0D, 0x0D, 0x0A, 0x0A, 0x0C, 0x0C, 0x0F, 0x0C, 0x0C, 
    0x0A, 0x08, 0x02, 0x06, 0x09, 0x0A, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x20 <space>
    0xE0, 0xF0, 0xF0, 0x10, 0xE0, 0x80, 0xC1, 0x3F, 0x33, 0xFC, 0xFF, 0x07, 0x04, 0x08, 0x18, 0x1C, 0x1C, 0x00, // 33
    0x70, 0xF8, 0xF0, 0xF0, 0xF8, 0xF8, 0xF0, 0x00, 0x03, 0x07, 0x03, 0x07, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 34
    0x00, 0x80, 0x80, 0xC0, 0xB0, 0x80, 0xC0, 0xB0, 0x80, 0x18, 0x99, 0x7D, 0x1B, 0xD9, 0x3D, 0x1B, 0x19, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 35
    0x80, 0xC0, 0xE0, 0xB8, 0xF8, 0xF0, 0x60, 0xC0, 0x80, 0x00, 0x73, 0x8F, 0x4F, 0x75, 0x87, 0x6B, 0x7B, 0x27, 0x8F, 0xFE, 0x00, 0x00, 0x04, 0x08, 0x30, 0x38, 0x38, 0x1C, 0x1C, 0x0C, // 36
    0xC0, 0xE0, 0xF0, 0xF0, 0xD0, 0xF0, 0x20, 0xC0, 0xC0, 0xB0, 0xD0, 0x70, 0x20, 0x00, 0x00, 0x00, 0x03, 0x05, 0x0B, 0x8F, 0x7F, 0x1B, 0xC4, 0xF7, 0x0B, 0x06, 0xFF, 0xF6, 0x06, 0x0C, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x1C, 0x18, 0x1C, 0x00, 0x00, 0x04, 0x08, 0x18, 0x18, 0x18, 0x1C, 0x0C, 0x04, // 37
    0x00, 0xC0, 0xE0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3E, 0x1F, 0x7D, 0x57, 0x76, 0x8F, 0x1B, 0x43, 0x72, 0x3A, 0xDC, 0x98, 0x00, 0x04, 0x08, 0x08, 0x18, 0x18, 0x1C, 0x18, 0x08, 0x18, 0x1C, 0x1C, 0x0C, // 38
    0x70, 0xE8, 0x08, 0xF0, 0x01, 0x02, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, // 39
    0x00, 0xF0, 0xE8, 0xF8, 0xF0, 0xFF, 0x95, 0x7F, 0xFF, 0x00, 0x00, 0x0C, 0x10, 0x3C, 0x3C, // 40
    0x08, 0xF8, 0x68, 0xF0, 0xE0, 0xC0, 0x00, 0x00, 0xC0, 0x3F, 0xAD, 0xD5, 0xFF, 0xFE, 0x08, 0x14, 0x30, 0x38, 0x3C, 0x0C, 0x00, // 41
    0xC0, 0xF0, 0xE8, 0xF8, 0xD8, 0x60, 0xE0, 0x00, 0x03, 0x05, 0x07, 0x07, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 42
    0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0xFF, 0xFF, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, // 43
    0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x40, 0x80, 0x00, 0x34, 0x68, 0x70, 0x7C, 0x38, // 44
    0x00, 0x00, 0x00, 0x00, 0x1C, 0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, // 45
    0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x80, 0x00, 0x0C, 0x18, 0x1C, 0x1C, // 46
    0x00, 0x00, 0x00, 0x80, 0xE0, 0x70, 0xF0, 0x60, 0xC0, 0x30, 0x8E, 0xE7, 0x7D, 0x1F, 0x03, 0x00, 0x0C, 0x18, 0x1C, 0x0C, 0x00, 0x00, 0x00, 0x00, // 47
    0x00, 0xC0, 0xE0, 0xF0, 0xF0, 0xF0, 0xE0, 0xA0, 0xC0, 0x80, 0x3F, 0xFD, 0x07, 0x7F, 0xFF, 0x7F, 0x47, 0x3F, 0xC0, 0xFF, 0x00, 0x00, 0x04, 0x08, 0x18, 0x18, 0x1C, 0x1C, 0x0C, 0x04, // 48
    0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xE0, 0x00, 0x80, 0x7F, 0x3E, 0x0A, 0xFF, 0xFF, 0x00, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x1C, // 49
    0xC0, 0xA0, 0xE0, 0xF0, 0xF0, 0xB0, 0xE0, 0xA0, 0xC0, 0x80, 0xC1, 0x33, 0x5D, 0x2F, 0x36, 0x7F, 0x7A, 0x1D, 0xFF, 0xC7, 0x0C, 0x18, 0x1C, 0x1C, 0x08, 0x08, 0x18, 0x1C, 0x1C, 0x0C, // 50
    0xC0, 0xA0, 0xD0, 0xF0, 0xF0, 0xF0, 0xE0, 0xA0, 0xC0, 0x00, 0xF1, 0x0B, 0x4E, 0xFF, 0x4E, 0x77, 0x39, 0x8F, 0xFF, 0xE7, 0x00, 0x04, 0x08, 0x08, 0x18, 0x18, 0x1C, 0x1C, 0x0C, 0x04, // 51
    0x00, 0x00, 0x00, 0x80, 0xE0, 0x50, 0xF0, 0xF0, 0xF0, 0xE0, 0x38, 0x64, 0x63, 0x72, 0xFD, 0x7F, 0x3D, 0x0D, 0x6F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x1C, // 52
    0x00, 0xE0, 0x30, 0xB0, 0xB0, 0xB0, 0xB0, 0x90, 0xF0, 0xC0, 0xF0, 0x0F, 0x0A, 0xFF, 0x4F, 0x7D, 0x7D, 0x93, 0xFD, 0xF1, 0x00, 0x04, 0x08, 0x08, 0x18, 0x18, 0x1C, 0x0C, 0x0C, 0x00, // 53
    0x00, 0xC0, 0xE0, 0x60, 0xB0, 0xF0, 0xD0, 0xE0, 0xC0, 0x80, 0x7F, 0x84, 0x3F, 0x77, 0xFB, 0x72, 0x4F, 0xBF, 0xFF, 0xE7, 0x00, 0x00, 0x04, 0x08, 0x18, 0x18, 0x18, 0x1C, 0x0C, 0x04, // 54
    0xF0, 0xF0, 0x70, 0xA0, 0xB0, 0xF0, 0x60, 0xE0, 0xD0, 0xF0, 0xF0, 0xE0, 0x07, 0x0F, 0x0F, 0xE7, 0x5E, 0x3B, 0xE5, 0xFE, 0x3F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x18, 0x18, 0x1C, 0x1C, 0x00, 0x00, 0x00, 0x00, // 55
    0x80, 0xE0, 0xE0, 0xF0, 0x70, 0xF0, 0x30, 0xE0, 0xE0, 0xC0, 0x00, 0x73, 0x8F, 0x76, 0xF5, 0xB7, 0xAE, 0x7B, 0x7B, 0x85, 0xFF, 0xE7, 0x00, 0x04, 0x0C, 0x08, 0x18, 0x18, 0x18, 0x1C, 0x0C, 0x0C, 0x00, // 56
    0x80, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xE0, 0xA0, 0xC0, 0x80, 0x00, 0xE7, 0x1B, 0x97, 0xFF, 0xBF, 0x7B, 0x47, 0x39, 0xC6, 0xFF, 0x7E, 0x00, 0x04, 0x0C, 0x08, 0x18, 0x18, 0x1C, 0x0C, 0x0C, 0x04, 0x00, // 57
    0x00, 0x00, 0x00, 0x00, 0x8E, 0x71, 0xBE, 0x1C, 0x0C, 0x18, 0x1C, 0x1C, // 58
    0x00, 0x00, 0x00, 0x00, 0x8E, 0x71, 0x7E, 0x98, 0x34, 0xF8, 0x70, 0x7C, // 59
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x18, 0x18, 0x3C, 0x24, 0x66, 0x42, 0xC3, 0x81, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, // 60
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 61
    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x81, 0xC3, 0x42, 0x66, 0x24, 0x3C, 0x38, 0x18, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 62
    0xC0, 0xA0, 0xD0, 0xF0, 0xF0, 0xF0, 0xE0, 0xA0, 0xC0, 0x80, 0x03, 0x05, 0xDF, 0x36, 0x2F, 0xFB, 0x3C, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x04, 0x08, 0x18, 0x1C, 0x1C, 0x00, 0x00, 0x00, // 63
    0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x80, 0x80, 0x00, 0x00, 0x78, 0xFE, 0x07, 0xF1, 0xF8, 0x8C, 0x44, 0x22, 0xFE, 0xFE, 0x82, 0x40, 0x63, 0x1E, 0x00, 0x04, 0x0C, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x00, 0x00, // 64
    0x00, 0x00, 0x00, 0xC0, 0x40, 0xF0, 0xF0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x80, 0xC0, 0x3C, 0x03, 0xE6, 0xE5, 0xEF, 0x77, 0x07, 0x3F, 0xF8, 0xC0, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, // 65
    0x30, 0x30, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xD0, 0xA0, 0xC0, 0x00, 0x80, 0x80, 0x7F, 0x77, 0x0C, 0xFF, 0xFF, 0x77, 0x4F, 0xB5, 0xFF, 0xE7, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x0C, 0x04, // 66
    0x80, 0x40, 0xE0, 0xB0, 0xF0, 0xB0, 0x60, 0xF0, 0xF0, 0xF0, 0xC0, 0x7F, 0xBD, 0x03, 0x7F, 0xFF, 0x80, 0x77, 0x1F, 0x9F, 0xFF, 0xCF, 0x00, 0x04, 0x0C, 0x08, 0x18, 0x18, 0x18, 0x1C, 0x0C, 0x0C, 0x00, // 67
    0x30, 0x30, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xD0, 0xA0, 0xC0, 0x80, 0x80, 0x82, 0x7F, 0x7F, 0x10, 0xFF, 0xFF, 0x60, 0x7F, 0x9F, 0xE0, 0xFF, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x0C, 0x0C, 0x04, // 68
    0x30, 0x30, 0xF0, 0xF0, 0x70, 0xF0, 0xF0, 0xB0, 0xF0, 0xF0, 0xC0, 0x80, 0x80, 0x7F, 0x7F, 0x14, 0xFF, 0xFF, 0x7F, 0x17, 0xF7, 0xC7, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x1C, // 69
    0x30, 0x30, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x80, 0x80, 0x7F, 0x77, 0x0C, 0x7F, 0xFF, 0x1F, 0x1F, 0x07, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x00, 0x00, 0x00, // 70
    0x80, 0x40, 0xE0, 0xB0, 0xF0, 0xB0, 0xE0, 0xF0, 0xF0, 0xF0, 0xC0, 0x7F, 0xFD, 0x07, 0x7F, 0xFF, 0xB8, 0x6F, 0x0F, 0xEF, 0xEF, 0x7F, 0x00, 0x04, 0x0C, 0x08, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x1C, 0x00, // 71
    0x30, 0x30, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x80, 0x80, 0x7F, 0x7F, 0x14, 0xFF, 0xFF, 0x7F, 0x6E, 0x16, 0xFF, 0xFF, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x18, 0x18, 0x18, 0x18, 0x1C, // 72
    0x70, 0x70, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xE0, 0x80, 0x80, 0x7F, 0x3F, 0x10, 0xFF, 0xFF, 0x00, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x18, // 73
    0x00, 0x00, 0x00, 0x00, 0x70, 0xB0, 0xF0, 0xF0, 0xF0, 0xF0, 0x70, 0x88, 0x08, 0x70, 0x60, 0x3F, 0x77, 0x9B, 0xFF, 0xFF, 0x00, 0x04, 0x0C, 0x08, 0x18, 0x18, 0x1C, 0x1C, 0x0C, 0x00, // 74
    0x30, 0x30, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xF0, 0x70, 0xF0, 0xF0, 0xC0, 0x80, 0x80, 0x7F, 0x3F, 0x14, 0xFB, 0xED, 0xF3, 0x4E, 0x3F, 0x63, 0xC0, 0x00, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, // 75
    0x30, 0x30, 0xF0, 0xF0, 0x70, 0xF0, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x80, 0x82, 0x7F, 0x7F, 0x10, 0x7F, 0xFF, 0x80, 0x60, 0xE0, 0xC0, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x1C, // 76
    0x70, 0x50, 0xB0, 0xF0, 0x70, 0xF0, 0xE0, 0xA0, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0x80, 0x80, 0x7F, 0x07, 0xFF, 0x8C, 0x77, 0x87, 0xFE, 0x7D, 0x1D, 0xFF, 0xFF, 0x00, 0x0C, 0x18, 0x18, 0x18, 0x1C, 0x1C, 0x18, 0x1C, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x1C, // 77
    0x70, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0x70, 0xF0, 0xF0, 0xF0, 0xD0, 0xF0, 0x80, 0x80, 0x7F, 0x01, 0xFF, 0xF2, 0xBF, 0x0B, 0x07, 0xFF, 0xFF, 0x00, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x04, 0x18, 0x18, 0x1C, 0x1C, 0x00, // 78
    0x80, 0xC0, 0xE0, 0xF0, 0xF0, 0xF0, 0xD0, 0xA0, 0x40, 0xC0, 0x00, 0x7F, 0xFA, 0x07, 0x7F, 0xFF, 0x7F, 0x87, 0x7D, 0x86, 0xFF, 0xFF, 0x00, 0x04, 0x0C, 0x08, 0x18, 0x18, 0x18, 0x1C, 0x0C, 0x0C, 0x00, // 79
    0x70, 0x70, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xE0, 0xA0, 0xC0, 0x80, 0x82, 0x7D, 0x7F, 0x04, 0xF7, 0xF7, 0x37, 0x35, 0x3B, 0x1F, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x18, 0x00, 0x00, 0x00, // 80
    0x00, 0xC0, 0xE0, 0xE0, 0xF0, 0xF0, 0xD0, 0xA0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x3F, 0xFE, 0x03, 0xEF, 0xEF, 0x5F, 0xC7, 0x3D, 0x06, 0xFF, 0x7E, 0xC0, 0x80, 0x00, 0x00, 0x0C, 0x0C, 0x18, 0x18, 0x18, 0x1C, 0x18, 0x18, 0x1C, 0x1C, 0x0C, // 81
    0x70, 0x70, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x00, 0x00, 0x80, 0x80, 0x7F, 0x7F, 0x14, 0x7F, 0xFF, 0xFF, 0x1D, 0x73, 0x3F, 0x17, 0xE0, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x1C, 0x08, 0x08, 0x18, 0x18, 0x1C, // 82
    0xC0, 0xE0, 0x30, 0xF0, 0xF0, 0x70, 0xD0, 0xF0, 0xF0, 0xC0, 0xF3, 0x2E, 0x4D, 0x9A, 0xB7, 0x6E, 0x5A, 0x35, 0x87, 0xFB, 0x0C, 0x1C, 0x18, 0x08, 0x18, 0x18, 0x18, 0x1C, 0x0C, 0x0C, // 83
    0xF0, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x07, 0x0C, 0x8F, 0x7F, 0x3D, 0x15, 0xFF, 0xFF, 0x05, 0x0F, 0x00, 0x00, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x18, 0x00, // 84
    0x70, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xD0, 0xF0, 0x00, 0x00, 0x7F, 0x8D, 0x7F, 0xFF, 0x80, 0x80, 0x7F, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x18, 0x18, 0x18, 0x1C, 0x0C, 0x04, 0x00, // 85
    0x30, 0x30, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x3B, 0xCF, 0x74, 0x37, 0x0F, 0xE3, 0xFE, 0x7F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x04, 0x08, 0x18, 0x1C, 0x1C, 0x0C, 0x00, 0x00, 0x00, // 86
    0x30, 0xF0, 0x30, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x07, 0x3B, 0xF4, 0x09, 0x87, 0xFF, 0xCC, 0x7F, 0x01, 0x07, 0xFC, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x18, 0x1C, 0x1C, 0x04, 0x08, 0x18, 0x18, 0x0C, 0x00, 0x00, // 87
    0x30, 0x30, 0x70, 0xF0, 0x70, 0xF0, 0xF0, 0x70, 0xF0, 0xB0, 0xD0, 0xF0, 0x00, 0x00, 0x80, 0x61, 0x1B, 0xED, 0xD7, 0x65, 0x1E, 0x67, 0xC1, 0x00, 0x00, 0x0C, 0x18, 0x18, 0x18, 0x1C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, // 88
    0x30, 0x30, 0xF0, 0xF0, 0xF0, 0x70, 0xF0, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x01, 0x82, 0x7F, 0x2F, 0x14, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x18, 0x10, 0x00, // 89
    0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x80, 0x61, 0x1B, 0x67, 0x1A, 0xE7, 0xFB, 0xBE, 0x77, 0xF1, 0x0C, 0x08, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, // 90
    0xF8, 0xF8, 0xF8, 0xF8, 0x68, 0x78, 0xFF, 0x7D, 0xFF, 0xFF, 0x00, 0x00, 0x1C, 0x30, 0x34, 0x34, 0x34, 0x38, // 91
    0x30, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1E, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0C, // 92
    0x38, 0x78, 0x78, 0xF8, 0xF8, 0xF8, 0xF0, 0x00, 0x00, 0x00, 0xFF, 0x3D, 0xFF, 0xFF, 0x1C, 0x34, 0x34, 0x34, 0x30, 0x3C, 0x3C, // 93
    0x00, 0x00, 0x80, 0xE0, 0x60, 0xE0, 0x80, 0x00, 0x00, 0x08, 0x0E, 0x03, 0x00, 0x00, 0x01, 0x07, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, // 95
    0x06, 0x0B, 0x0E, 0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 96
    0x00, 0x00, 0x00, 0xC0, 0x40, 0xF0, 0xF0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x80, 0xC0, 0x3C, 0x03, 0xE6, 0xE5, 0xEF, 0x77, 0x07, 0x3F, 0xF8, 0xC0, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, // 97
    0x30, 0x30, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xD0, 0xA0, 0xC0, 0x00, 0x80, 0x80, 0x7F, 0x77, 0x0C, 0xFF, 0xFF, 0x77, 0x4F, 0xB5, 0xFF, 0xE7, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x0C, 0x04, // 98
    0x80, 0x40, 0xE0, 0xB0, 0xF0, 0xB0, 0x60, 0xF0, 0xF0, 0xF0, 0xC0, 0x7F, 0xBD, 0x03, 0x7F, 0xFF, 0x80, 0x77, 0x1F, 0x9F, 0xFF, 0xCF, 0x00, 0x04, 0x0C, 0x08, 0x18, 0x18, 0x18, 0x1C, 0x0C, 0x0C, 0x00, // 99
    0x30, 0x30, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xD0, 0xA0, 0xC0, 0x80, 0x80, 0x82, 0x7F, 0x7F, 0x10, 0xFF, 0xFF, 0x60, 0x7F, 0x9F, 0xE0, 0xFF, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x0C, 0x0C, 0x04, // 100
    0x30, 0x30, 0xF0, 0xF0, 0x70, 0xF0, 0xF0, 0xB0, 0xF0, 0xF0, 0xC0, 0x80, 0x80, 0x7F, 0x7F, 0x14, 0xFF, 0xFF, 0x7F, 0x17, 0xF7, 0xC7, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x1C, // 101
    0x30, 0x30, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x80, 0x80, 0x7F, 0x77, 0x0C, 0x7F, 0xFF, 0x1F, 0x1F, 0x07, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x00, 0x00, 0x00, // 102
    0x80, 0x40, 0xE0, 0xB0, 0xF0, 0xB0, 0xE0, 0xF0, 0xF0, 0xF0, 0xC0, 0x7F, 0xFD, 0x07, 0x7F, 0xFF, 0xB8, 0x6F, 0x0F, 0xEF, 0xEF, 0x7F, 0x00, 0x04, 0x0C, 0x08, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x1C, 0x00, // 103
    0x30, 0x30, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x80, 0x80, 0x7F, 0x7F, 0x14, 0xFF, 0xFF, 0x7F, 0x6E, 0x16, 0xFF, 0xFF, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x18, 0x18, 0x18, 0x18, 0x1C, // 104
    0x70, 0x70, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xE0, 0x80, 0x80, 0x7F, 0x3F, 0x10, 0xFF, 0xFF, 0x00, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x18, // 105
    0x00, 0x00, 0x00, 0x00, 0x70, 0xB0, 0xF0, 0xF0, 0xF0, 0xF0, 0x70, 0x88, 0x08, 0x70, 0x60, 0x3F, 0x77, 0x9B, 0xFF, 0xFF, 0x00, 0x04, 0x0C, 0x08, 0x18, 0x18, 0x1C, 0x1C, 0x0C, 0x00, // 106
    0x30, 0x30, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xF0, 0x70, 0xF0, 0xF0, 0xC0, 0x80, 0x80, 0x7F, 0x3F, 0x14, 0xFB, 0xED, 0xF3, 0x4E, 0x3F, 0x63, 0xC0, 0x00, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, // 107
    0x30, 0x30, 0xF0, 0xF0, 0x70, 0xF0, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x80, 0x82, 0x7F, 0x7F, 0x10, 0x7F, 0xFF, 0x80, 0x60, 0xE0, 0xC0, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x1C, // 108
    0x70, 0x50, 0xB0, 0xF0, 0x70, 0xF0, 0xE0, 0xA0, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0x80, 0x80, 0x7F, 0x07, 0xFF, 0x8C, 0x77, 0x87, 0xFE, 0x7D, 0x1D, 0xFF, 0xFF, 0x00, 0x0C, 0x18, 0x18, 0x18, 0x1C, 0x1C, 0x18, 0x1C, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x1C, // 109
    0x70, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0x70, 0xF0, 0xF0, 0xF0, 0xD0, 0xF0, 0x80, 0x80, 0x7F, 0x01, 0xFF, 0xF2, 0xBF, 0x0B, 0x07, 0xFF, 0xFF, 0x00, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x04, 0x18, 0x18, 0x1C, 0x1C, 0x00, // 110
    0x80, 0xC0, 0xE0, 0xF0, 0xF0, 0xF0, 0xD0, 0xA0, 0x40, 0xC0, 0x00, 0x7F, 0xFA, 0x07, 0x7F, 0xFF, 0x7F, 0x87, 0x7D, 0x86, 0xFF, 0xFF, 0x00, 0x04, 0x0C, 0x08, 0x18, 0x18, 0x18, 0x1C, 0x0C, 0x0C, 0x00, // 111
    0x70, 0x70, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xE0, 0xA0, 0xC0, 0x80, 0x82, 0x7D, 0x7F, 0x04, 0xF7, 0xF7, 0x37, 0x35, 0x3B, 0x1F, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x18, 0x00, 0x00, 0x00, // 112
    0x00, 0xC0, 0xE0, 0xE0, 0xF0, 0xF0, 0xD0, 0xA0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x3F, 0xFE, 0x03, 0xEF, 0xEF, 0x5F, 0xC7, 0x3D, 0x06, 0xFF, 0x7E, 0xC0, 0x80, 0x00, 0x00, 0x0C, 0x0C, 0x18, 0x18, 0x18, 0x1C, 0x18, 0x18, 0x1C, 0x1C, 0x0C, // 113
    0x70, 0x70, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x00, 0x00, 0x80, 0x80, 0x7F, 0x7F, 0x14, 0x7F, 0xFF, 0xFF, 0x1D, 0x73, 0x3F, 0x17, 0xE0, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x1C, 0x08, 0x08, 0x18, 0x18, 0x1C, // 114
    0xC0, 0xE0, 0x30, 0xF0, 0xF0, 0x70, 0xD0, 0xF0, 0xF0, 0xC0, 0xF3, 0x2E, 0x4D, 0x9A, 0xB7, 0x6E, 0x5A, 0x35, 0x87, 0xFB, 0x0C, 0x1C, 0x18, 0x08, 0x18, 0x18, 0x18, 0x1C, 0x0C, 0x0C, // 115
    0xF0, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x07, 0x0C, 0x8F, 0x7F, 0x3D, 0x15, 0xFF, 0xFF, 0x05, 0x0F, 0x00, 0x00, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x18, 0x00, // 116
    0x70, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xD0, 0xF0, 0x00, 0x00, 0x7F, 0x8D, 0x7F, 0xFF, 0x80, 0x80, 0x7F, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x18, 0x18, 0x18, 0x1C, 0x0C, 0x04, 0x00, // 117
    0x30, 0x30, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x3B, 0xCF, 0x74, 0x37, 0x0F, 0xE3, 0xFE, 0x7F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x04, 0x08, 0x18, 0x1C, 0x1C, 0x0C, 0x00, 0x00, 0x00, // 118
    0x30, 0xF0, 0x30, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x07, 0x3B, 0xF4, 0x09, 0x87, 0xFF, 0xCC, 0x7F, 0x01, 0x07, 0xFC, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x18, 0x1C, 0x1C, 0x04, 0x08, 0x18, 0x18, 0x0C, 0x00, 0x00, // 119
    0x30, 0x30, 0x70, 0xF0, 0x70, 0xF0, 0xF0, 0x70, 0xF0, 0xB0, 0xD0, 0xF0, 0x00, 0x00, 0x80, 0x61, 0x1B, 0xED, 0xD7, 0x65, 0x1E, 0x67, 0xC1, 0x00, 0x00, 0x0C, 0x18, 0x18, 0x18, 0x1C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, // 120
    0x30, 0x30, 0xF0, 0xF0, 0xF0, 0x70, 0xF0, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x01, 0x82, 0x7F, 0x2F, 0x14, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x18, 0x10, 0x00, // 121
    0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x80, 0x61, 0x1B, 0x67, 0x1A, 0xE7, 0xFB, 0xBE, 0x77, 0xF1, 0x0C, 0x08, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, // 122
    0x00, 0x00, 0xE0, 0xF0, 0x98, 0xF8, 0xF8, 0x60, 0x0C, 0x1C, 0xFF, 0x1B, 0x7F, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0x10, 0x14, 0x38, 0x20, // 123
    0xFC, 0xFC, 0xFF, 0xFF, 0xFC, 0xFC, // 124
    0x38, 0xF8, 0xF0, 0xE0, 0xC0, 0x00, 0x00, 0xF3, 0x1F, 0xF4, 0xF7, 0x3C, 0x1C, 0x30, 0x30, 0x1C, 0x0C, 0x00, // 125
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x18, 0x08, 0x08, 0x18, 0x10, 0x10, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 126
    0xF8, 0x38, 0x68, 0x88, 0x08, 0x08, 0x88, 0x68, 0x38, 0xF8, 0xFF, 0xC0, 0x60, 0x19, 0x0F, 0x0F, 0x19, 0x60, 0xC0, 0xFF, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Roosewood26.h ===

/*
 *
 * new Font
 *
 * created with GLCDFontCreator
 * original framework by F. Maximilian Thiele
 * Modified By Siddharth Kaul
 *
 *
 * File Name           : roosewood_std_size24
 * Date                : 10.11.2012
 * Font size in bytes  : 28312
 * Font width          : 10
 * Font height         : 26
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */


#ifndef _Roosewood26_H
#define _Roosewood26_H

#define _Roosewood26_WIDTH 10
#define _Roosewood26_HEIGHT 26

GLCDFONTDECL(Roosewood26) = {
    0x6E, 0x98, // size
    0x0A, // width
    0x1A, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x07, 0x07, 0x09, 0x0B, 0x0C, 0x12, 0x10, 0x05, 0x06, 0x07, 
    0x08, 0x0A, 0x06, 0x05, 0x05, 0x09, 0x0C, 0x09, 0x0C, 0x0C, 
    0x0C, 0x0C, 0x0B, 0x0E, 0x0D, 0x0D, 0x05, 0x05, 0x0A, 0x0A, 
    0x0A, 0x0B, 0x10, 0x0E, 0x0E, 0x0D, 0x0D, 0x0B, 0x0C, 0x0D, 
    0x0E, 0x08, 0x0B, 0x0E, 0x0C, 0x0F, 0x0D, 0x0D, 0x0D, 0x0F, 
    0x0F, 0x0C, 0x0C, 0x0D, 0x0D, 0x11, 0x0D, 0x0D, 0x0C, 0x07, 
    0x06, 0x08, 0x0A, 0x0C, 0x06, 0x0E, 0x0E, 0x0D, 0x0D, 0x0B, 
    0x0C, 0x0D, 0x0E, 0x08, 0x0B, 0x0E, 0x0C, 0x0F, 0x0D, 0x0D, 
    0x0D, 0x0F, 0x0F, 0x0C, 0x0C, 0x0D, 0x0D, 0x11, 0x0D, 0x0D, 
    0x0C, 0x07, 0x02, 0x07, 0x0B, 0x0C, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x20 <space>
    0xE0, 0xE0, 0xF0, 0xD0, 0x20, 0xC0, 0x80, 0x03, 0x7F, 0xBD, 0x83, 0xFC, 0xFF, 0x1F, 0x06, 0x09, 0x10, 0x39, 0x3F, 0x3F, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 33
    0xE0, 0xF0, 0x10, 0xE0, 0xE0, 0xF0, 0x10, 0xE0, 0xC0, 0x00, 0x07, 0x0F, 0x0F, 0x07, 0x07, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 34
    0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x00, 0x00, 0xC0, 0x40, 0x00, 0x60, 0x66, 0xE6, 0x7E, 0x67, 0x66, 0xE6, 0x7E, 0x67, 0x66, 0x06, 0x00, 0x04, 0x07, 0x00, 0x00, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 35
    0x80, 0x40, 0xA0, 0xE0, 0xD8, 0xF8, 0xD8, 0xD0, 0xA0, 0xC0, 0x00, 0x00, 0xC7, 0x2F, 0x3D, 0x3B, 0xCB, 0x1F, 0xAF, 0x2D, 0x6E, 0x9F, 0x3F, 0xDE, 0x03, 0x04, 0x0C, 0x19, 0x3B, 0x60, 0x73, 0x7B, 0x39, 0x38, 0x1C, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 36
    0x80, 0xE0, 0xE0, 0xF0, 0xF0, 0x70, 0xE0, 0xE0, 0xC0, 0x00, 0x80, 0x60, 0x20, 0xE0, 0xE0, 0x40, 0x00, 0x00, 0x07, 0x1F, 0x3F, 0x37, 0x77, 0xF8, 0x7F, 0x1F, 0xCF, 0xE7, 0x39, 0x1E, 0xCF, 0xCB, 0x08, 0x10, 0x30, 0xE0, 0x00, 0x00, 0x00, 0x1C, 0x32, 0x31, 0x3C, 0x0F, 0x03, 0x03, 0x0C, 0x18, 0x17, 0x37, 0x30, 0x38, 0x3C, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 37
    0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xB0, 0xB0, 0x20, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0x7F, 0xBF, 0xC9, 0x1F, 0x6F, 0xD6, 0x3B, 0x67, 0x07, 0x04, 0xC4, 0xE4, 0x78, 0x60, 0x03, 0x05, 0x08, 0x11, 0x13, 0x33, 0x32, 0x38, 0x39, 0x30, 0x10, 0x33, 0x30, 0x38, 0x3F, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 38
    0xE0, 0xF0, 0x10, 0xE0, 0xC0, 0x00, 0x07, 0x0C, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 39
    0x00, 0x80, 0xF0, 0xE8, 0xF8, 0xF8, 0xFF, 0xFC, 0x5F, 0xFF, 0xFF, 0x03, 0x03, 0x0F, 0x34, 0x47, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 40
    0x28, 0xD8, 0xE8, 0xD8, 0x70, 0xE0, 0x80, 0x00, 0x01, 0xFE, 0x5B, 0xFF, 0x19, 0xFF, 0x18, 0x27, 0x60, 0x73, 0x7C, 0x3F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 41
    0x80, 0xE0, 0xA0, 0xD0, 0xF0, 0x70, 0xC0, 0xC0, 0x01, 0x03, 0x07, 0x0B, 0x1F, 0x1F, 0x16, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 42
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x60, 0x60, 0xFE, 0xFE, 0x60, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 43
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6E, 0xD1, 0xD1, 0xE2, 0xFE, 0x78, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // 44
    0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x58, 0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 45
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x31, 0x3E, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, // 46
    0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xB0, 0xF0, 0xE0, 0x00, 0xC0, 0x38, 0x16, 0xEF, 0xFD, 0x3F, 0x07, 0x00, 0x1E, 0x31, 0x38, 0x3F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 47
    0x00, 0xC0, 0xC0, 0xE0, 0xF0, 0xF0, 0xF0, 0xD0, 0xE0, 0xC0, 0xC0, 0x00, 0xFC, 0x0F, 0xF1, 0x0F, 0xFF, 0xFF, 0x00, 0xFF, 0x0F, 0xFF, 0x8D, 0xFF, 0x00, 0x03, 0x0D, 0x08, 0x11, 0x13, 0x33, 0x38, 0x3A, 0x1D, 0x1F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 48
    0xC0, 0x40, 0xC0, 0xF0, 0xF0, 0x10, 0xF0, 0xC0, 0x00, 0x03, 0x06, 0xFE, 0x1B, 0xEF, 0x00, 0xFF, 0xFF, 0x00, 0x1C, 0x34, 0x33, 0x30, 0x31, 0x30, 0x37, 0x3F, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 49
    0x80, 0xC0, 0x60, 0xA0, 0xB0, 0xB0, 0x70, 0xE0, 0xA0, 0x40, 0x80, 0x00, 0x07, 0xCF, 0xB6, 0x57, 0xBF, 0xE9, 0xDF, 0xEF, 0xEF, 0x78, 0xFF, 0x1E, 0x1F, 0x31, 0x30, 0x3A, 0x19, 0x11, 0x31, 0x31, 0x31, 0x38, 0x3F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 50
    0x80, 0xC0, 0x60, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xA0, 0x40, 0x80, 0x00, 0x83, 0x4F, 0x3E, 0x3C, 0xFF, 0x74, 0xCF, 0x73, 0xEB, 0x3C, 0xDF, 0x9E, 0x03, 0x0C, 0x18, 0x13, 0x13, 0x33, 0x31, 0x31, 0x38, 0x1C, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 51
    0x00, 0x00, 0x00, 0x80, 0xE0, 0x50, 0xF0, 0xF0, 0xF0, 0xC0, 0x00, 0x00, 0xE0, 0x18, 0x2E, 0x33, 0x3D, 0x3F, 0xF9, 0x29, 0x3F, 0x3F, 0x40, 0x80, 0x01, 0x03, 0x03, 0x1F, 0x33, 0x30, 0x31, 0x30, 0x33, 0x3F, 0x3B, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 52
    0x00, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x90, 0xF0, 0xC0, 0xC8, 0x37, 0x1F, 0x15, 0xFF, 0x9F, 0xFB, 0x0D, 0xFF, 0x0D, 0xF9, 0xE1, 0x03, 0x04, 0x08, 0x11, 0x33, 0x33, 0x31, 0x39, 0x18, 0x1E, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 53
    0x00, 0x80, 0xC0, 0x60, 0xE0, 0xD0, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0xFC, 0x1F, 0xF1, 0x0F, 0xCE, 0xF7, 0x6F, 0xFD, 0xEF, 0x1F, 0xFF, 0x00, 0x03, 0x0D, 0x18, 0x11, 0x33, 0x32, 0x33, 0x38, 0x1C, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 54
    0xF0, 0x10, 0xF0, 0xE0, 0x60, 0x70, 0xF0, 0x70, 0x60, 0xE0, 0xD0, 0xF0, 0xF0, 0xE0, 0x0F, 0x18, 0x1F, 0x1E, 0x1F, 0xF3, 0x8F, 0x7F, 0x8B, 0xF5, 0xFF, 0x1E, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x30, 0x31, 0x30, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 55
    0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xA0, 0x40, 0x80, 0x00, 0xC0, 0x27, 0x1F, 0xD8, 0xF7, 0x4F, 0x5A, 0x6D, 0xE7, 0xF3, 0x1C, 0xFF, 0x8F, 0x03, 0x0C, 0x18, 0x11, 0x13, 0x32, 0x32, 0x32, 0x39, 0x39, 0x1E, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 56
    0x80, 0x40, 0xE0, 0x70, 0xB0, 0xF0, 0xF0, 0xE0, 0xA0, 0x40, 0xC0, 0x00, 0x00, 0x87, 0x9F, 0x7F, 0xF0, 0xE7, 0xEF, 0xF7, 0x1F, 0xF1, 0x0E, 0x83, 0xFF, 0xF8, 0x07, 0x0C, 0x18, 0x16, 0x37, 0x36, 0x31, 0x3A, 0x39, 0x1C, 0x1F, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 57
    0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x44, 0xC4, 0xF8, 0x70, 0x0E, 0x11, 0x31, 0x3E, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, // 58
    0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x44, 0xC4, 0xF8, 0x60, 0x6E, 0xD1, 0xD1, 0xE2, 0xFE, 0x00, 0x00, 0x40, 0x40, 0x00, // 59
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xF0, 0xF0, 0x98, 0x98, 0x0C, 0x0C, 0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x06, 0x06, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 60
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 61
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x06, 0x06, 0x0C, 0x0C, 0x98, 0x98, 0xF0, 0xF0, 0x60, 0x0C, 0x06, 0x06, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 62
    0x80, 0xC0, 0x60, 0xD0, 0xF0, 0xF0, 0xF0, 0xE0, 0xA0, 0x40, 0x80, 0x07, 0x0B, 0x1F, 0x7F, 0xE9, 0x9F, 0xEE, 0xF5, 0x7B, 0x1C, 0x1F, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x11, 0x31, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 63
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF8, 0x1C, 0x06, 0xC3, 0xE1, 0x31, 0x10, 0x08, 0xC8, 0xF8, 0x79, 0x01, 0x03, 0x0E, 0xF8, 0x03, 0x0F, 0x1C, 0x30, 0x27, 0x67, 0x42, 0x42, 0x41, 0x47, 0x47, 0x24, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 64
    0x00, 0x00, 0x00, 0x00, 0xC0, 0x20, 0xF0, 0xF0, 0xB0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x3C, 0x03, 0x8E, 0x9F, 0x9F, 0x3B, 0xED, 0x1F, 0xFF, 0xE0, 0x00, 0x1C, 0x12, 0x31, 0x30, 0x30, 0x37, 0x3F, 0x37, 0x32, 0x31, 0x30, 0x31, 0x33, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 65
    0x70, 0xB0, 0xF0, 0xF0, 0x30, 0xB0, 0xB0, 0xB0, 0x70, 0xE0, 0xA0, 0x40, 0x80, 0x00, 0x00, 0xFF, 0x0D, 0xFF, 0x08, 0xEF, 0xEF, 0x6D, 0xCF, 0x35, 0xE3, 0x18, 0xFF, 0x1E, 0x1C, 0x33, 0x31, 0x30, 0x30, 0x37, 0x37, 0x36, 0x31, 0x31, 0x38, 0x3C, 0x1F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 66
    0x00, 0xC0, 0xA0, 0xE0, 0xB0, 0xF0, 0xF0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xC0, 0xFF, 0x07, 0xF8, 0x07, 0xFF, 0xFF, 0x00, 0x01, 0xDE, 0x77, 0x77, 0xFF, 0x3F, 0x00, 0x03, 0x0C, 0x18, 0x11, 0x33, 0x32, 0x33, 0x39, 0x38, 0x1E, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 67
    0x70, 0xB0, 0xF0, 0xF0, 0x30, 0xB0, 0xB0, 0xB0, 0x70, 0xE0, 0xC0, 0xC0, 0x00, 0x00, 0xFF, 0x1B, 0xEF, 0x00, 0xFF, 0xFF, 0x81, 0x7F, 0x8F, 0x73, 0x8D, 0xFF, 0x1C, 0x33, 0x31, 0x30, 0x30, 0x33, 0x33, 0x31, 0x38, 0x39, 0x1C, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 68
    0x30, 0xF0, 0xF0, 0xF0, 0x70, 0xF0, 0xF0, 0xB0, 0xF0, 0x10, 0xF0, 0x00, 0xFF, 0x0D, 0xFF, 0x08, 0xFF, 0xFF, 0xFF, 0x35, 0x4C, 0xCF, 0x1C, 0x33, 0x30, 0x31, 0x30, 0x33, 0x33, 0x31, 0x30, 0x30, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 69
    0x70, 0xB0, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x10, 0xF0, 0x00, 0xFF, 0x0D, 0xFF, 0x08, 0xEF, 0xEF, 0x78, 0x67, 0x05, 0x0C, 0x0F, 0x1C, 0x33, 0x30, 0x31, 0x30, 0x33, 0x37, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 70
    0x00, 0xC0, 0xA0, 0xE0, 0xB0, 0xF0, 0xF0, 0xE0, 0xE0, 0xF0, 0x10, 0xF0, 0xC0, 0xFF, 0x07, 0xF8, 0x07, 0xFF, 0xFF, 0x70, 0x51, 0x9E, 0x1F, 0x18, 0x9F, 0xFF, 0x00, 0x03, 0x0D, 0x18, 0x11, 0x13, 0x32, 0x32, 0x39, 0x30, 0x30, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 71
    0x70, 0xB0, 0xF0, 0xF0, 0x30, 0xB0, 0xF0, 0xB0, 0xB0, 0xF0, 0xF0, 0xB0, 0x90, 0xF0, 0x00, 0xFF, 0x0D, 0xFF, 0x08, 0xCF, 0xCF, 0xC9, 0xCF, 0xFD, 0x2D, 0xFF, 0xFF, 0x01, 0x1C, 0x33, 0x31, 0x30, 0x30, 0x37, 0x3F, 0x34, 0x33, 0x31, 0x30, 0x37, 0x3F, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 72
    0x70, 0xB0, 0xF0, 0xF0, 0x70, 0xF0, 0xF0, 0xE0, 0x00, 0xFF, 0x1B, 0xEF, 0x00, 0xFF, 0xFF, 0x01, 0x1C, 0x33, 0x30, 0x31, 0x30, 0x37, 0x3F, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 73
    0x00, 0x00, 0x00, 0x00, 0x70, 0xB0, 0xF0, 0xF0, 0x70, 0xF0, 0xF0, 0xC0, 0x20, 0x20, 0x40, 0x80, 0xFF, 0x95, 0x6F, 0x00, 0xFF, 0xFF, 0x03, 0x0C, 0x18, 0x13, 0x33, 0x31, 0x31, 0x38, 0x1C, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 74
    0x70, 0xB0, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0x70, 0xF0, 0xF0, 0x70, 0xB0, 0xD0, 0xF0, 0x00, 0xFF, 0x8D, 0x7F, 0x08, 0xD7, 0xAB, 0xC7, 0x1D, 0x7E, 0xEF, 0x83, 0x01, 0x01, 0x1C, 0x33, 0x31, 0x30, 0x30, 0x37, 0x3F, 0x36, 0x31, 0x30, 0x30, 0x33, 0x36, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 75
    0x70, 0xB0, 0xF0, 0xF0, 0x70, 0xF0, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x0B, 0xFF, 0x00, 0xFF, 0xFF, 0x01, 0xC0, 0x40, 0x40, 0xC0, 0x1C, 0x33, 0x30, 0x31, 0x30, 0x31, 0x33, 0x32, 0x31, 0x30, 0x30, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 76
    0x70, 0xB0, 0xF0, 0x70, 0xF0, 0x90, 0x60, 0xC0, 0xB0, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0x00, 0xFF, 0x0F, 0xFF, 0xCC, 0x17, 0xE8, 0x0F, 0x8F, 0xFC, 0xFB, 0x3B, 0xFF, 0xFF, 0x01, 0x1C, 0x33, 0x30, 0x33, 0x37, 0x3C, 0x31, 0x30, 0x3F, 0x33, 0x31, 0x30, 0x37, 0x3F, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 77
    0x70, 0xB0, 0xF0, 0xF0, 0xF0, 0xB0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xD0, 0xF0, 0x00, 0xFF, 0x0F, 0xFF, 0xF6, 0xC9, 0x36, 0xEB, 0x1F, 0x0F, 0xFF, 0xFF, 0x01, 0x1C, 0x33, 0x30, 0x37, 0x3F, 0x39, 0x37, 0x09, 0x30, 0x30, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 78
    0x00, 0xC0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xA0, 0xC0, 0x80, 0x00, 0xFF, 0x0B, 0xF8, 0x2F, 0xFF, 0xFF, 0x00, 0xFF, 0x0F, 0xF3, 0x0C, 0xFF, 0xFE, 0x01, 0x06, 0x09, 0x18, 0x13, 0x37, 0x34, 0x33, 0x39, 0x38, 0x1E, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 79
    0x70, 0xB0, 0xF0, 0xF0, 0x30, 0xB0, 0xB0, 0xB0, 0x70, 0xE0, 0xA0, 0x40, 0x80, 0x00, 0xFF, 0x8D, 0x7F, 0x08, 0xCF, 0xCF, 0xCD, 0xCF, 0xEF, 0xE3, 0x70, 0x7F, 0x1C, 0x33, 0x31, 0x30, 0x30, 0x37, 0x3F, 0x38, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 80
    0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x0B, 0xF8, 0x6F, 0x3F, 0x3F, 0x20, 0x7F, 0x0F, 0xF3, 0x0C, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x03, 0x0D, 0x18, 0x17, 0x17, 0x35, 0x32, 0x31, 0x20, 0x20, 0x63, 0x71, 0x7F, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 81
    0x70, 0xB0, 0xF0, 0xF0, 0x30, 0xB0, 0xB0, 0xB0, 0x70, 0xE0, 0xE0, 0x40, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x8D, 0x7F, 0x08, 0xCF, 0xCF, 0x4D, 0xB7, 0xE9, 0x37, 0xF8, 0xFF, 0x5E, 0x80, 0x1C, 0x33, 0x31, 0x30, 0x30, 0x33, 0x37, 0x38, 0x07, 0x19, 0x10, 0x31, 0x30, 0x38, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 82
    0x80, 0x40, 0xE0, 0xF0, 0xF0, 0x70, 0x70, 0x70, 0xD0, 0xF0, 0xF0, 0xC0, 0xCF, 0x57, 0xAF, 0x6D, 0x4B, 0xCA, 0x9C, 0xAD, 0xC6, 0x0B, 0x1F, 0xF7, 0x1F, 0x30, 0x38, 0x39, 0x12, 0x12, 0x32, 0x31, 0x38, 0x3C, 0x1E, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 83
    0xF0, 0xF0, 0xF0, 0xF0, 0xB0, 0xF0, 0xF0, 0x70, 0xB0, 0x70, 0xF0, 0xF0, 0x0F, 0x1B, 0x1F, 0x1F, 0xFF, 0x9B, 0x6F, 0x00, 0xFF, 0xF8, 0x0B, 0x1F, 0x00, 0x00, 0x1C, 0x34, 0x33, 0x31, 0x30, 0x30, 0x37, 0x3F, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 84
    0x70, 0xB0, 0xF0, 0xF0, 0x30, 0xB0, 0xF0, 0xF0, 0xB0, 0xF0, 0xB0, 0x90, 0xF0, 0x00, 0xFF, 0x1B, 0xEF, 0x00, 0xFF, 0xFF, 0x01, 0xFF, 0x0F, 0xFF, 0xFF, 0x01, 0x00, 0x01, 0x06, 0x09, 0x10, 0x13, 0x37, 0x34, 0x3B, 0x3C, 0x1F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 85
    0x70, 0x70, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xB0, 0xF0, 0x30, 0xD0, 0xF0, 0x00, 0x00, 0x1F, 0x33, 0xEC, 0x03, 0xFF, 0x19, 0x8F, 0xF8, 0xFF, 0x1F, 0x03, 0x00, 0x00, 0x00, 0x07, 0x09, 0x10, 0x30, 0x38, 0x3F, 0x3F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 86
    0x70, 0x70, 0xF0, 0xF0, 0x30, 0xB0, 0xF0, 0xF0, 0xF0, 0xF0, 0x60, 0xF0, 0xB0, 0xF0, 0xB0, 0xD0, 0xF0, 0x00, 0x00, 0x07, 0x3B, 0xEC, 0x03, 0x3F, 0x0C, 0xFF, 0x3B, 0xEC, 0x3F, 0x0F, 0xC0, 0xFF, 0x3F, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0F, 0x10, 0x30, 0x3F, 0x3F, 0x1F, 0x11, 0x30, 0x30, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 87
    0x30, 0x30, 0xF0, 0xF0, 0x30, 0xB0, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x01, 0x85, 0x76, 0x29, 0x92, 0x6F, 0x94, 0x3F, 0xDE, 0x87, 0x03, 0x01, 0x1C, 0x36, 0x31, 0x30, 0x36, 0x3F, 0x36, 0x30, 0x31, 0x30, 0x33, 0x36, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 88
    0x30, 0x30, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xE0, 0x00, 0x00, 0x01, 0x0E, 0xFB, 0xB4, 0x6B, 0xF4, 0xFB, 0xFE, 0x0F, 0x03, 0x01, 0x00, 0x00, 0x00, 0x1C, 0x33, 0x31, 0x30, 0x30, 0x37, 0x3F, 0x30, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 89
    0xF0, 0xF0, 0xF0, 0xB0, 0xB0, 0xB0, 0x30, 0xF0, 0xF0, 0x70, 0x90, 0xF0, 0x07, 0x0D, 0xEF, 0x9F, 0x6F, 0xD7, 0xED, 0xFB, 0xFD, 0x5F, 0x8F, 0x03, 0x1E, 0x13, 0x31, 0x30, 0x33, 0x33, 0x33, 0x32, 0x31, 0x30, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 90
    0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x68, 0x78, 0xFF, 0xFB, 0x2B, 0xFF, 0xFF, 0x00, 0x00, 0x3F, 0x61, 0x60, 0x6F, 0x6F, 0x68, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 91
    0x30, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1F, 0xF0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1F, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 92
    0x38, 0x78, 0xF8, 0xF8, 0xF8, 0x18, 0xF8, 0xF0, 0x00, 0x00, 0xFF, 0x1B, 0xEF, 0x00, 0xFF, 0xFF, 0x38, 0x68, 0x6F, 0x60, 0x61, 0x60, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 93
    0x00, 0x00, 0x00, 0xC0, 0xE0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x20, 0x38, 0x1E, 0x03, 0x00, 0x00, 0x07, 0x1E, 0x38, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 95
    0x06, 0x0B, 0x0E, 0x0E, 0x0C, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 96
    0x00, 0x00, 0x00, 0x00, 0xC0, 0x20, 0xF0, 0xF0, 0xB0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x3C, 0x03, 0x8E, 0x9F, 0x9F, 0x3B, 0xED, 0x1F, 0xFF, 0xE0, 0x00, 0x1C, 0x12, 0x31, 0x30, 0x30, 0x37, 0x3F, 0x37, 0x32, 0x31, 0x30, 0x31, 0x33, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 97
    0x70, 0xB0, 0xF0, 0xF0, 0x30, 0xB0, 0xB0, 0xB0, 0x70, 0xE0, 0xA0, 0x40, 0x80, 0x00, 0x00, 0xFF, 0x0D, 0xFF, 0x08, 0xEF, 0xEF, 0x6D, 0xCF, 0x35, 0xE3, 0x18, 0xFF, 0x1E, 0x1C, 0x33, 0x31, 0x30, 0x30, 0x37, 0x37, 0x36, 0x31, 0x31, 0x38, 0x3C, 0x1F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 98
    0x00, 0xC0, 0xA0, 0xE0, 0xB0, 0xF0, 0xF0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xC0, 0xFF, 0x07, 0xF8, 0x07, 0xFF, 0xFF, 0x00, 0x01, 0xDE, 0x77, 0x77, 0xFF, 0x3F, 0x00, 0x03, 0x0C, 0x18, 0x11, 0x33, 0x32, 0x33, 0x39, 0x38, 0x1E, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 99
    0x70, 0xB0, 0xF0, 0xF0, 0x30, 0xB0, 0xB0, 0xB0, 0x70, 0xE0, 0xC0, 0xC0, 0x00, 0x00, 0xFF, 0x1B, 0xEF, 0x00, 0xFF, 0xFF, 0x81, 0x7F, 0x8F, 0x73, 0x8D, 0xFF, 0x1C, 0x33, 0x31, 0x30, 0x30, 0x33, 0x33, 0x31, 0x38, 0x39, 0x1C, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 100
    0x30, 0xF0, 0xF0, 0xF0, 0x70, 0xF0, 0xF0, 0xB0, 0xF0, 0x10, 0xF0, 0x00, 0xFF, 0x0D, 0xFF, 0x08, 0xFF, 0xFF, 0xFF, 0x35, 0x4C, 0xCF, 0x1C, 0x33, 0x30, 0x31, 0x30, 0x33, 0x33, 0x31, 0x30, 0x30, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 101
    0x70, 0xB0, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x10, 0xF0, 0x00, 0xFF, 0x0D, 0xFF, 0x08, 0xEF, 0xEF, 0x78, 0x67, 0x05, 0x0C, 0x0F, 0x1C, 0x33, 0x30, 0x31, 0x30, 0x33, 0x37, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 102
    0x00, 0xC0, 0xA0, 0xE0, 0xB0, 0xF0, 0xF0, 0xE0, 0xE0, 0xF0, 0x10, 0xF0, 0xC0, 0xFF, 0x07, 0xF8, 0x07, 0xFF, 0xFF, 0x70, 0x51, 0x9E, 0x1F, 0x18, 0x9F, 0xFF, 0x00, 0x03, 0x0D, 0x18, 0x11, 0x13, 0x32, 0x32, 0x39, 0x30, 0x30, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 103
    0x70, 0xB0, 0xF0, 0xF0, 0x30, 0xB0, 0xF0, 0xB0, 0xB0, 0xF0, 0xF0, 0xB0, 0x90, 0xF0, 0x00, 0xFF, 0x0D, 0xFF, 0x08, 0xCF, 0xCF, 0xC9, 0xCF, 0xFD, 0x2D, 0xFF, 0xFF, 0x01, 0x1C, 0x33, 0x31, 0x30, 0x30, 0x37, 0x3F, 0x34, 0x33, 0x31, 0x30, 0x37, 0x3F, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 104
    0x70, 0xB0, 0xF0, 0xF0, 0x70, 0xF0, 0xF0, 0xE0, 0x00, 0xFF, 0x1B, 0xEF, 0x00, 0xFF, 0xFF, 0x01, 0x1C, 0x33, 0x30, 0x31, 0x30, 0x37, 0x3F, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 105
    0x00, 0x00, 0x00, 0x00, 0x70, 0xB0, 0xF0, 0xF0, 0x70, 0xF0, 0xF0, 0xC0, 0x20, 0x20, 0x40, 0x80, 0xFF, 0x95, 0x6F, 0x00, 0xFF, 0xFF, 0x03, 0x0C, 0x18, 0x13, 0x33, 0x31, 0x31, 0x38, 0x1C, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 106
    0x70, 0xB0, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0x70, 0xF0, 0xF0, 0x70, 0xB0, 0xD0, 0xF0, 0x00, 0xFF, 0x8D, 0x7F, 0x08, 0xD7, 0xAB, 0xC7, 0x1D, 0x7E, 0xEF, 0x83, 0x01, 0x01, 0x1C, 0x33, 0x31, 0x30, 0x30, 0x37, 0x3F, 0x36, 0x31, 0x30, 0x30, 0x33, 0x36, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 107
    0x70, 0xB0, 0xF0, 0xF0, 0x70, 0xF0, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x0B, 0xFF, 0x00, 0xFF, 0xFF, 0x01, 0xC0, 0x40, 0x40, 0xC0, 0x1C, 0x33, 0x30, 0x31, 0x30, 0x31, 0x33, 0x32, 0x31, 0x30, 0x30, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 108
    0x70, 0xB0, 0xF0, 0x70, 0xF0, 0x90, 0x60, 0xC0, 0xB0, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0x00, 0xFF, 0x0F, 0xFF, 0xCC, 0x17, 0xE8, 0x0F, 0x8F, 0xFC, 0xFB, 0x3B, 0xFF, 0xFF, 0x01, 0x1C, 0x33, 0x30, 0x33, 0x37, 0x3C, 0x31, 0x30, 0x3F, 0x33, 0x31, 0x30, 0x37, 0x3F, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 109
    0x70, 0xB0, 0xF0, 0xF0, 0xF0, 0xB0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xD0, 0xF0, 0x00, 0xFF, 0x0F, 0xFF, 0xF6, 0xC9, 0x36, 0xEB, 0x1F, 0x0F, 0xFF, 0xFF, 0x01, 0x1C, 0x33, 0x30, 0x37, 0x3F, 0x39, 0x37, 0x09, 0x30, 0x30, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 110
    0x00, 0xC0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xA0, 0xC0, 0x80, 0x00, 0xFF, 0x0B, 0xF8, 0x2F, 0xFF, 0xFF, 0x00, 0xFF, 0x0F, 0xF3, 0x0C, 0xFF, 0xFE, 0x01, 0x06, 0x09, 0x18, 0x13, 0x37, 0x34, 0x33, 0x39, 0x38, 0x1E, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 111
    0x70, 0xB0, 0xF0, 0xF0, 0x30, 0xB0, 0xB0, 0xB0, 0x70, 0xE0, 0xA0, 0x40, 0x80, 0x00, 0xFF, 0x8D, 0x7F, 0x08, 0xCF, 0xCF, 0xCD, 0xCF, 0xEF, 0xE3, 0x70, 0x7F, 0x1C, 0x33, 0x31, 0x30, 0x30, 0x37, 0x3F, 0x38, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 112
    0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x0B, 0xF8, 0x6F, 0x3F, 0x3F, 0x20, 0x7F, 0x0F, 0xF3, 0x0C, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x03, 0x0D, 0x18, 0x17, 0x17, 0x35, 0x32, 0x31, 0x20, 0x20, 0x63, 0x71, 0x7F, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 113
    0x70, 0xB0, 0xF0, 0xF0, 0x30, 0xB0, 0xB0, 0xB0, 0x70, 0xE0, 0xE0, 0x40, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x8D, 0x7F, 0x08, 0xCF, 0xCF, 0x4D, 0xB7, 0xE9, 0x37, 0xF8, 0xFF, 0x5E, 0x80, 0x1C, 0x33, 0x31, 0x30, 0x30, 0x33, 0x37, 0x38, 0x07, 0x19, 0x10, 0x31, 0x30, 0x38, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 114
    0x80, 0x40, 0xE0, 0xF0, 0xF0, 0x70, 0x70, 0x70, 0xD0, 0xF0, 0xF0, 0xC0, 0xCF, 0x57, 0xAF, 0x6D, 0x4B, 0xCA, 0x9C, 0xAD, 0xC6, 0x0B, 0x1F, 0xF7, 0x1F, 0x30, 0x38, 0x39, 0x12, 0x12, 0x32, 0x31, 0x38, 0x3C, 0x1E, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 115
    0xF0, 0xF0, 0xF0, 0xF0, 0xB0, 0xF0, 0xF0, 0x70, 0xB0, 0x70, 0xF0, 0xF0, 0x0F, 0x1B, 0x1F, 0x1F, 0xFF, 0x9B, 0x6F, 0x00, 0xFF, 0xF8, 0x0B, 0x1F, 0x00, 0x00, 0x1C, 0x34, 0x33, 0x31, 0x30, 0x30, 0x37, 0x3F, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 116
    0x70, 0xB0, 0xF0, 0xF0, 0x30, 0xB0, 0xF0, 0xF0, 0xB0, 0xF0, 0xB0, 0x90, 0xF0, 0x00, 0xFF, 0x1B, 0xEF, 0x00, 0xFF, 0xFF, 0x01, 0xFF, 0x0F, 0xFF, 0xFF, 0x01, 0x00, 0x01, 0x06, 0x09, 0x10, 0x13, 0x37, 0x34, 0x3B, 0x3C, 0x1F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 117
    0x70, 0x70, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xB0, 0xF0, 0x30, 0xD0, 0xF0, 0x00, 0x00, 0x1F, 0x33, 0xEC, 0x03, 0xFF, 0x19, 0x8F, 0xF8, 0xFF, 0x1F, 0x03, 0x00, 0x00, 0x00, 0x07, 0x09, 0x10, 0x30, 0x38, 0x3F, 0x3F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 118
    0x70, 0x70, 0xF0, 0xF0, 0x30, 0xB0, 0xF0, 0xF0, 0xF0, 0xF0, 0x60, 0xF0, 0xB0, 0xF0, 0xB0, 0xD0, 0xF0, 0x00, 0x00, 0x07, 0x3B, 0xEC, 0x03, 0x3F, 0x0C, 0xFF, 0x3B, 0xEC, 0x3F, 0x0F, 0xC0, 0xFF, 0x3F, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0F, 0x10, 0x30, 0x3F, 0x3F, 0x1F, 0x11, 0x30, 0x30, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 119
    0x30, 0x30, 0xF0, 0xF0, 0x30, 0xB0, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x01, 0x85, 0x76, 0x29, 0x92, 0x6F, 0x94, 0x3F, 0xDE, 0x87, 0x03, 0x01, 0x1C, 0x36, 0x31, 0x30, 0x36, 0x3F, 0x36, 0x30, 0x31, 0x30, 0x33, 0x36, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 120
    0x30, 0x30, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0x30, 0xF0, 0xF0, 0xF0, 0xE0, 0x00, 0x00, 0x01, 0x0E, 0xFB, 0xB4, 0x6B, 0xF4, 0xFB, 0xFE, 0x0F, 0x03, 0x01, 0x00, 0x00, 0x00, 0x1C, 0x33, 0x31, 0x30, 0x30, 0x37, 0x3F, 0x30, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 121
    0xF0, 0xF0, 0xF0, 0xB0, 0xB0, 0xB0, 0x30, 0xF0, 0xF0, 0x70, 0x90, 0xF0, 0x07, 0x0D, 0xEF, 0x9F, 0x6F, 0xD7, 0xED, 0xFB, 0xFD, 0x5F, 0x8F, 0x03, 0x1E, 0x13, 0x31, 0x30, 0x33, 0x33, 0x33, 0x32, 0x31, 0x30, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 122
    0x00, 0xC0, 0xB0, 0xF0, 0xB8, 0xF8, 0xF8, 0x78, 0xEF, 0xF9, 0x17, 0xFF, 0x1F, 0x00, 0x00, 0x0F, 0x13, 0x60, 0x47, 0x5F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 123
    0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xC0, // 124
    0x38, 0x78, 0xF0, 0xE0, 0x20, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x87, 0x78, 0xDF, 0xFF, 0x70, 0xD8, 0xC7, 0xE3, 0xF8, 0x7F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 125
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x60, 0x30, 0x30, 0x30, 0x60, 0xC0, 0xC0, 0xC0, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 126
    0xF8, 0x38, 0x68, 0x88, 0x08, 0x08, 0x08, 0x08, 0x88, 0x68, 0x38, 0xF8, 0xFF, 0x00, 0x00, 0xC1, 0x63, 0x1C, 0x1C, 0x63, 0xC1, 0x00, 0x00, 0xFF, 0x0F, 0x0E, 0x0B, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0B, 0x0E, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Stang5x7.h ===

/*! \file Stang5x7.h \brief Graphic LCD Font (Ascii Characters). */
//*****************************************************************************
//
// File Name	: 'Stang5x7.h'
// Title		: Graphic LCD Font (Ascii Charaters)
// Author		: Pascal Stang
// Date			: 10/19/2001
// Revised		: 10/19/2001
// Version		: 0.1
// Target MCU	: Atmel AVR
// Editor Tabs	: 4
//
//*****************************************************************************

#ifndef Stang5x7_h
#define Stang5x7_h

// standard ascii 5x7 font
// defines ascii characters 0x20-0x7F (32-127)
GLCDFONTDECL(Stang5x7) = {
  0x0, 0x0, // size of zero indicates fixed width font,
  0x05, // width
  0x07, // height
  0x20, // first char
  0x60, // char count
	0x00, 0x00, 0x00, 0x00, 0x00,// (space)
	0x00, 0x00, 0x5F, 0x00, 0x00,// !
	0x00, 0x07, 0x00, 0x07, 0x00,// "
	0x14, 0x7F, 0x14, 0x7F, 0x14,// #
	0x24, 0x2A, 0x7F, 0x2A, 0x12,// $
	0x23, 0x13, 0x08, 0x64, 0x62,// %
	0x36, 0x49, 0x55, 0x22, 0x50,// &
	0x00, 0x05, 0x03, 0x00, 0x00,// '
	0x00, 0x1C, 0x22, 0x41, 0x00,// (
	0x00, 0x41, 0x22, 0x1C, 0x00,// )
	0x08, 0x2A, 0x1C, 0x2A, 0x08,// *
	0x08, 0x08, 0x3E, 0x08, 0x08,// +
	0x00, 0x50, 0x30, 0x00, 0x00,// ,
	0x08, 0x08, 0x08, 0x08, 0x08,// -
	0x00, 0x60, 0x60, 0x00, 0x00,// .
	0x20, 0x10, 0x08, 0x04, 0x02,// /
	0x3E, 0x51, 0x49, 0x45, 0x3E,// 0
	0x00, 0x42, 0x7F, 0x40, 0x00,// 1
	0x42, 0x61, 0x51, 0x49, 0x46,// 2
	0x21, 0x41, 0x45, 0x4B, 0x31,// 3
	0x18, 0x14, 0x12, 0x7F, 0x10,// 4
	0x27, 0x45, 0x45, 0x45, 0x39,// 5
	0x3C, 0x4A, 0x49, 0x49, 0x30,// 6
	0x01, 0x71, 0x09, 0x05, 0x03,// 7
	0x36, 0x49, 0x49, 0x49, 0x36,// 8
	0x06, 0x49, 0x49, 0x29, 0x1E,// 9
	0x00, 0x36, 0x36, 0x00, 0x00,// :
	0x00, 0x56, 0x36, 0x00, 0x00,// ;
	0x00, 0x08, 0x14, 0x22, 0x41,// <
	0x14, 0x14, 0x14, 0x14, 0x14,// =
	0x41, 0x22, 0x14, 0x08, 0x00,// >
	0x02, 0x01, 0x51, 0x09, 0x06,// ?
	0x32, 0x49, 0x79, 0x41, 0x3E,// @
	0x7E, 0x11, 0x11, 0x11, 0x7E,// A
	0x7F, 0x49, 0x49, 0x49, 0x36,// B
	0x3E, 0x41, 0x41, 0x41, 0x22,// C
	0x7F, 0x41, 0x41, 0x22, 0x1C,// D
	0x7F, 0x49, 0x49, 0x49, 0x41,// E
	0x7F, 0x09, 0x09, 0x01, 0x01,// F
	0x3E, 0x41, 0x41, 0x51, 0x32,// G
	0x7F, 0x08, 0x08, 0x08, 0x7F,// H
	0x00, 0x41, 0x7F, 0x41, 0x00,// I
	0x20, 0x40, 0x41, 0x3F, 0x01,// J
	0x7F, 0x08, 0x14, 0x22, 0x41,// K
	0x7F, 0x40, 0x40, 0x40, 0x40,// L
	0x7F, 0x02, 0x04, 0x02, 0x7F,// M
	0x7F, 0x04, 0x08, 0x10, 0x7F,// N
	0x3E, 0x41, 0x41, 0x41, 0x3E,// O
	0x7F, 0x09, 0x09, 0x09, 0x06,// P
	0x3E, 0x41, 0x51, 0x21, 0x5E,// Q
	0x7F, 0x09, 0x19, 0x29, 0x46,// R
	0x46, 0x49, 0x49, 0x49, 0x31,// S
	0x01, 0x01, 0x7F, 0x01, 0x01,// T
	0x3F, 0x40, 0x40, 0x40, 0x3F,// U
	0x1F, 0x20, 0x40, 0x20, 0x1F,// V
	0x7F, 0x20, 0x18, 0x20, 0x7F,// W
	0x63, 0x14, 0x08, 0x14, 0x63,// X
	0x03, 0x04, 0x78, 0x04, 0x03,// Y
	0x61, 0x51, 0x49, 0x45, 0x43,// Z
	0x00, 0x00, 0x7F, 0x41, 0x41,// [
	0x02, 0x04, 0x08, 0x10, 0x20,// "\"
	0x41, 0x41, 0x7F, 0x00, 0x00,// ]
	0x04, 0x02, 0x01, 0x02, 0x04,// ^
	0x40, 0x40, 0x40, 0x40, 0x40,// _
	0x00, 0x01, 0x02, 0x04, 0x00,// `
	0x20, 0x54, 0x54, 0x54, 0x78,// a
	0x7F, 0x48, 0x44, 0x44, 0x38,// b
	0x38, 0x44, 0x44, 0x44, 0x20,// c
	0x38, 0x44, 0x44, 0x48, 0x7F,// d
	0x38, 0x54, 0x54, 0x54, 0x18,// e
	0x08, 0x7E, 0x09, 0x01, 0x02,// f
	0x08, 0x14, 0x54, 0x54, 0x3C,// g
	0x7F, 0x08, 0x04, 0x04, 0x78,// h
	0x00, 0x44, 0x7D, 0x40, 0x00,// i
	0x20, 0x40, 0x44, 0x3D, 0x00,// j
	0x00, 0x7F, 0x10, 0x28, 0x44,// k
	0x00, 0x41, 0x7F, 0x40, 0x00,// l
	0x7C, 0x04, 0x18, 0x04, 0x78,// m
	0x7C, 0x08, 0x04, 0x04, 0x78,// n
	0x38, 0x44, 0x44, 0x44, 0x38,// o
	0x7C, 0x14, 0x14, 0x14, 0x08,// p
	0x08, 0x14, 0x14, 0x18, 0x7C,// q
	0x7C, 0x08, 0x04, 0x04, 0x08,// r
	0x48, 0x54, 0x54, 0x54, 0x20,// s
	0x04, 0x3F, 0x44, 0x40, 0x20,// t
	0x3C, 0x40, 0x40, 0x20, 0x7C,// u
	0x1C, 0x20, 0x40, 0x20, 0x1C,// v
	0x3C, 0x40, 0x30, 0x40, 0x3C,// w
	0x44, 0x28, 0x10, 0x28, 0x44,// x
	0x0C, 0x50, 0x50, 0x50, 0x3C,// y
	0x44, 0x64, 0x54, 0x4C, 0x44,// z
	0x00, 0x08, 0x36, 0x41, 0x00,// {
	0x00, 0x00, 0x7F, 0x00, 0x00,// |
	0x00, 0x41, 0x36, 0x08, 0x00,// }
	0x0C, 0x02, 0x0C, 0x10, 0x0C,// ~
	0x7F, 0x7F, 0x7F, 0x7F, 0x7F // del
};

#endif  // Stang5x7_H

=== Файл: src\SSD1306Ascii\src\fonts\System5x7.h ===

/*
 *
 * System5x7
 *
 *
 * File Name           : System5x7.h
 * Date                : 28 Oct 2008
 * Font size in bytes  : 470
 * Font width          : 5
 * Font height         : 7
 * Font first char     : 32
 * Font last char      : 127
 * Font used chars     : 94
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef SYSTEM5x7_H
#define SYSTEM5x7_H

#define SYSTEM5x7_WIDTH 5
#define SYSTEM5x7_HEIGHT 7

GLCDFONTDECL(System5x7) = {
    0x0, 0x0, // size of zero indicates fixed width font,
    0x05, // width
    0x07, // height
    0x20, // first char
    0x61, // char count
    
    // Fixed width; char width table not used !!!!
    
    // font data
    0x00, 0x00, 0x00, 0x00, 0x00,// (space)
	0x00, 0x00, 0x5F, 0x00, 0x00,// !
	0x00, 0x07, 0x00, 0x07, 0x00,// "
	0x14, 0x7F, 0x14, 0x7F, 0x14,// #
	0x24, 0x2A, 0x7F, 0x2A, 0x12,// $
	0x23, 0x13, 0x08, 0x64, 0x62,// %
	0x36, 0x49, 0x55, 0x22, 0x50,// &
	0x00, 0x05, 0x03, 0x00, 0x00,// '
	0x00, 0x1C, 0x22, 0x41, 0x00,// (
	0x00, 0x41, 0x22, 0x1C, 0x00,// )
	0x08, 0x2A, 0x1C, 0x2A, 0x08,// *
	0x08, 0x08, 0x3E, 0x08, 0x08,// +
	0x00, 0x50, 0x30, 0x00, 0x00,// ,
	0x08, 0x08, 0x08, 0x08, 0x08,// -
	0x00, 0x60, 0x60, 0x00, 0x00,// .
	0x20, 0x10, 0x08, 0x04, 0x02,// /
	0x3E, 0x51, 0x49, 0x45, 0x3E,// 0
	0x00, 0x42, 0x7F, 0x40, 0x00,// 1
	0x42, 0x61, 0x51, 0x49, 0x46,// 2
	0x21, 0x41, 0x45, 0x4B, 0x31,// 3
	0x18, 0x14, 0x12, 0x7F, 0x10,// 4
	0x27, 0x45, 0x45, 0x45, 0x39,// 5
	0x3C, 0x4A, 0x49, 0x49, 0x30,// 6
	0x01, 0x71, 0x09, 0x05, 0x03,// 7
	0x36, 0x49, 0x49, 0x49, 0x36,// 8
	0x06, 0x49, 0x49, 0x29, 0x1E,// 9
	0x00, 0x36, 0x36, 0x00, 0x00,// :
	0x00, 0x56, 0x36, 0x00, 0x00,// ;
	0x00, 0x08, 0x14, 0x22, 0x41,// <
	0x14, 0x14, 0x14, 0x14, 0x14,// =
	0x41, 0x22, 0x14, 0x08, 0x00,// >
	0x02, 0x01, 0x51, 0x09, 0x06,// ?
	0x32, 0x49, 0x79, 0x41, 0x3E,// @
	0x7E, 0x11, 0x11, 0x11, 0x7E,// A
	0x7F, 0x49, 0x49, 0x49, 0x36,// B
	0x3E, 0x41, 0x41, 0x41, 0x22,// C
	0x7F, 0x41, 0x41, 0x22, 0x1C,// D
	0x7F, 0x49, 0x49, 0x49, 0x41,// E
	0x7F, 0x09, 0x09, 0x01, 0x01,// F
	0x3E, 0x41, 0x41, 0x51, 0x32,// G
	0x7F, 0x08, 0x08, 0x08, 0x7F,// H
	0x00, 0x41, 0x7F, 0x41, 0x00,// I
	0x20, 0x40, 0x41, 0x3F, 0x01,// J
	0x7F, 0x08, 0x14, 0x22, 0x41,// K
	0x7F, 0x40, 0x40, 0x40, 0x40,// L
	0x7F, 0x02, 0x04, 0x02, 0x7F,// M
	0x7F, 0x04, 0x08, 0x10, 0x7F,// N
	0x3E, 0x41, 0x41, 0x41, 0x3E,// O
	0x7F, 0x09, 0x09, 0x09, 0x06,// P
	0x3E, 0x41, 0x51, 0x21, 0x5E,// Q
	0x7F, 0x09, 0x19, 0x29, 0x46,// R
	0x46, 0x49, 0x49, 0x49, 0x31,// S
	0x01, 0x01, 0x7F, 0x01, 0x01,// T
	0x3F, 0x40, 0x40, 0x40, 0x3F,// U
	0x1F, 0x20, 0x40, 0x20, 0x1F,// V
	0x7F, 0x20, 0x18, 0x20, 0x7F,// W
	0x63, 0x14, 0x08, 0x14, 0x63,// X
	0x03, 0x04, 0x78, 0x04, 0x03,// Y
	0x61, 0x51, 0x49, 0x45, 0x43,// Z
	0x00, 0x00, 0x7F, 0x41, 0x41,// [
	0x02, 0x04, 0x08, 0x10, 0x20,// "\"
	0x41, 0x41, 0x7F, 0x00, 0x00,// ]
	0x04, 0x02, 0x01, 0x02, 0x04,// ^
	0x40, 0x40, 0x40, 0x40, 0x40,// _
	0x00, 0x01, 0x02, 0x04, 0x00,// `
	0x20, 0x54, 0x54, 0x54, 0x78,// a
	0x7F, 0x48, 0x44, 0x44, 0x38,// b
	0x38, 0x44, 0x44, 0x44, 0x20,// c
	0x38, 0x44, 0x44, 0x48, 0x7F,// d
	0x38, 0x54, 0x54, 0x54, 0x18,// e
	0x08, 0x7E, 0x09, 0x01, 0x02,// f
	0x08, 0x14, 0x54, 0x54, 0x3C,// g
	0x7F, 0x08, 0x04, 0x04, 0x78,// h
	0x00, 0x44, 0x7D, 0x40, 0x00,// i
	0x20, 0x40, 0x44, 0x3D, 0x00,// j
	0x00, 0x7F, 0x10, 0x28, 0x44,// k
	0x00, 0x41, 0x7F, 0x40, 0x00,// l
	0x7C, 0x04, 0x18, 0x04, 0x78,// m
	0x7C, 0x08, 0x04, 0x04, 0x78,// n
	0x38, 0x44, 0x44, 0x44, 0x38,// o
	0x7C, 0x14, 0x14, 0x14, 0x08,// p
	0x08, 0x14, 0x14, 0x18, 0x7C,// q
	0x7C, 0x08, 0x04, 0x04, 0x08,// r
	0x48, 0x54, 0x54, 0x54, 0x20,// s
	0x04, 0x3F, 0x44, 0x40, 0x20,// t
	0x3C, 0x40, 0x40, 0x20, 0x7C,// u
	0x1C, 0x20, 0x40, 0x20, 0x1C,// v
	0x3C, 0x40, 0x30, 0x40, 0x3C,// w
	0x44, 0x28, 0x10, 0x28, 0x44,// x
	0x0C, 0x50, 0x50, 0x50, 0x3C,// y
	0x44, 0x64, 0x54, 0x4C, 0x44,// z
	0x00, 0x08, 0x36, 0x41, 0x00,// {
	0x00, 0x00, 0x7F, 0x00, 0x00,// |
	0x00, 0x41, 0x36, 0x08, 0x00,// }
	0x08, 0x08, 0x2A, 0x1C, 0x08,// ->
	0x08, 0x1C, 0x2A, 0x08, 0x08, // <-
	0x00, 0x06, 0x09, 0x09, 0x06 // degree symbol
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\System5x7R.h ===

/*
 *
 * System5x7
 *
 *
 * File Name           : System5x7.h
 * Date                : 28 Oct 2008
 * Font size in bytes  : 470
 * Font width          : 5
 * Font height         : 7
 * Font first char     : 32
 * Font last char      : 127
 * Font used chars     : 94
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef SYSTEM5x7R_H
#define SYSTEM5x7R_H

#define SYSTEM5x7R_WIDTH 5
#define SYSTEM5x7R_HEIGHT 7

GLCDFONTDECL(System5x7R) = {
	0x0, 0x0, // size of zero indicates fixed width font, actual length is width * height
	0x05,	  // width
	0x07,	  // height
	0x20,	  // first char
	0xA0,	  // char count

	// Fixed width; char width table not used !!!!

	// font data
	0x00, 0x00, 0x00, 0x00, 0x00, // (space) // 32
	0x00, 0x00, 0x5F, 0x00, 0x00, // !  33
	0x00, 0x07, 0x00, 0x07, 0x00, // "  34
	0x14, 0x7F, 0x14, 0x7F, 0x14, // #  35
	0x24, 0x2A, 0x7F, 0x2A, 0x12, // $  36
	0x23, 0x13, 0x08, 0x64, 0x62, // %  37
	0x36, 0x49, 0x55, 0x22, 0x50, // &  38
	0x00, 0x05, 0x03, 0x00, 0x00, // '  39
	0x00, 0x1C, 0x22, 0x41, 0x00, // (  40
	0x00, 0x41, 0x22, 0x1C, 0x00, // )  41
	0x08, 0x2A, 0x1C, 0x2A, 0x08, // *  42
	0x08, 0x08, 0x3E, 0x08, 0x08, // +  43
	0x00, 0x50, 0x30, 0x00, 0x00, // ,  44
	0x08, 0x08, 0x08, 0x08, 0x08, // -  45
	0x00, 0x60, 0x60, 0x00, 0x00, // .  46
	0x20, 0x10, 0x08, 0x04, 0x02, // /  47
	0x3E, 0x41, 0x41, 0x41, 0x3E, // 0	48
	0x00, 0x42, 0x7F, 0x40, 0x00, // 1	49
	0x42, 0x61, 0x51, 0x49, 0x46, // 2	50
	0x21, 0x41, 0x45, 0x4B, 0x31, // 3	51
	0x18, 0x14, 0x12, 0x7F, 0x10, // 4	52
	0x27, 0x45, 0x45, 0x45, 0x39, // 5	53
	0x3C, 0x4A, 0x49, 0x49, 0x30, // 6	54
	0x01, 0x71, 0x09, 0x05, 0x03, // 7	55
	0x36, 0x49, 0x49, 0x49, 0x36, // 8	56
	0x06, 0x49, 0x49, 0x29, 0x1E, // 9	57
	0x00, 0x36, 0x36, 0x00, 0x00, // :	58
	0x00, 0x56, 0x36, 0x00, 0x00, // ;	59
	0x00, 0x08, 0x14, 0x22, 0x41, // <	60
	0x14, 0x14, 0x14, 0x14, 0x14, // =	61
	0x41, 0x22, 0x14, 0x08, 0x00, // >	62
	0x02, 0x01, 0x51, 0x09, 0x06, // ?	63
	0x32, 0x49, 0x79, 0x41, 0x3E, // @	64
	0x7E, 0x11, 0x11, 0x11, 0x7E, // A	65
	0x7F, 0x49, 0x49, 0x49, 0x36, // B	66
	0x3E, 0x41, 0x41, 0x41, 0x22, // C	67
	0x7F, 0x41, 0x41, 0x22, 0x1C, // D	68
	0x7F, 0x49, 0x49, 0x49, 0x41, // E	69
	0x7F, 0x09, 0x09, 0x01, 0x01, // F	70
	0x3E, 0x41, 0x41, 0x51, 0x32, // G	71
	0x7F, 0x08, 0x08, 0x08, 0x7F, // H	72
	0x00, 0x41, 0x7F, 0x41, 0x00, // I	73
	0x20, 0x40, 0x41, 0x3F, 0x01, // J	74
	0x7F, 0x08, 0x14, 0x22, 0x41, // K	75
	0x7F, 0x40, 0x40, 0x40, 0x40, // L	76
	0x7F, 0x02, 0x04, 0x02, 0x7F, // M	77
	0x7F, 0x04, 0x08, 0x10, 0x7F, // N	78
	0x3E, 0x41, 0x41, 0x41, 0x3E, // O	79
	0x7F, 0x09, 0x09, 0x09, 0x06, // P	80
	0x3E, 0x41, 0x51, 0x21, 0x5E, // Q	81
	0x7F, 0x09, 0x19, 0x29, 0x46, // R	82
	0x46, 0x49, 0x49, 0x49, 0x31, // S	83
	0x01, 0x01, 0x7F, 0x01, 0x01, // T	84
	0x3F, 0x40, 0x40, 0x40, 0x3F, // U	85
	0x1F, 0x20, 0x40, 0x20, 0x1F, // V	86
	0x7F, 0x20, 0x18, 0x20, 0x7F, // W	87
	0x63, 0x14, 0x08, 0x14, 0x63, // X	88
	0x03, 0x04, 0x78, 0x04, 0x03, // Y	89
	0x61, 0x51, 0x49, 0x45, 0x43, // Z	90
	0x00, 0x00, 0x7F, 0x41, 0x41, // [	91
	0x02, 0x04, 0x08, 0x10, 0x20, // \  92
	0x41, 0x41, 0x7F, 0x00, 0x00, // ]	93
	0x04, 0x02, 0x01, 0x02, 0x04, // ^	94
	0x40, 0x40, 0x40, 0x40, 0x40, // _	95
	0x00, 0x01, 0x02, 0x04, 0x00, // `	96
	0x20, 0x54, 0x54, 0x54, 0x78, // a	97
	0x7F, 0x48, 0x44, 0x44, 0x38, // b	98
	0x38, 0x44, 0x44, 0x44, 0x20, // c	99
	0x38, 0x44, 0x44, 0x48, 0x7F, // d	100
	0x38, 0x54, 0x54, 0x54, 0x18, // e	101
	0x08, 0x7E, 0x09, 0x01, 0x02, // f	102
	0x08, 0x14, 0x54, 0x54, 0x3C, // g	103
	0x7F, 0x08, 0x04, 0x04, 0x78, // h	104
	0x00, 0x44, 0x7D, 0x40, 0x00, // i	105
	0x20, 0x40, 0x44, 0x3D, 0x00, // j	106
	0x00, 0x7F, 0x10, 0x28, 0x44, // k	107
	0x00, 0x41, 0x7F, 0x40, 0x00, // l	108
	0x7C, 0x04, 0x18, 0x04, 0x78, // m	109
	0x7C, 0x08, 0x04, 0x04, 0x78, // n	110
	0x38, 0x44, 0x44, 0x44, 0x38, // o	111
	0x7C, 0x14, 0x14, 0x14, 0x08, // p	112
	0x08, 0x14, 0x14, 0x18, 0x7C, // q	113
	0x7C, 0x08, 0x04, 0x04, 0x08, // r	114
	0x48, 0x54, 0x54, 0x54, 0x20, // s	115
	0x04, 0x3F, 0x44, 0x40, 0x20, // t	116
	0x3C, 0x40, 0x40, 0x20, 0x7C, // u	117
	0x1C, 0x20, 0x40, 0x20, 0x1C, // v	118
	0x3C, 0x40, 0x30, 0x40, 0x3C, // w	119
	0x44, 0x28, 0x10, 0x28, 0x44, // x	120
	0x0C, 0x50, 0x50, 0x50, 0x3C, // y	121
	0x44, 0x64, 0x54, 0x4C, 0x44, // z	122
	0x00, 0x08, 0x36, 0x41, 0x00, // {	123
	0x00, 0x00, 0x7F, 0x00, 0x00, // |	124
	0x00, 0x41, 0x36, 0x08, 0x00, // }	125
	0x00, 0x00, 0x0F, 0x09, 0x0F, // ?	126
	0x08, 0x1C, 0x2A, 0x08, 0x08, // <-	127
								  // -------------------------------------------------
	0x7C, 0x14, 0x14, 0x14, 0x08, // p	128
	0x38, 0x44, 0x44, 0x44, 0x20, // c	129
	0x04, 0x04, 0x7c, 0x04, 0x04, // т	130
	0x0C, 0x50, 0x50, 0x50, 0x3C, // у	131
	0x30, 0x48, 0xfc, 0x48, 0x30, // ф	132
	0x44, 0x28, 0x10, 0x28, 0x44, // х	133
	0x7c, 0x40, 0x40, 0x40, 0xfc, // ц	134
	0x0c, 0x10, 0x10, 0x10, 0x7c, // ч	135
	0x7c, 0x40, 0x7c, 0x40, 0x7c, // ш	136
	0x7c, 0x40, 0x7c, 0x40, 0xfc, // щ	137
	0x04, 0x7c, 0x50, 0x50, 0x20, // ъ	138
	0x7c, 0x50, 0x50, 0x20, 0x7c, // ы	139
	0x7c, 0x50, 0x50, 0x20, 0x00, // ь	140
	0x28, 0x44, 0x54, 0x54, 0x38, // э	141
	0x7c, 0x10, 0x38, 0x44, 0x38, // ю	142
	0x08, 0x54, 0x34, 0x14, 0x7c, // я	143
								  // -------------------------------------------------
	0x7e, 0x11, 0x11, 0x11, 0x7e, // А	144
	0x7f, 0x49, 0x49, 0x49, 0x33, // Б	145
	0x7f, 0x49, 0x49, 0x49, 0x36, // В	146
	0x7f, 0x01, 0x01, 0x01, 0x03, // Г	147
	0xe0, 0x51, 0x4f, 0x41, 0xff, // Д	148
	0x7f, 0x49, 0x49, 0x49, 0x41, // Е	149
	0x77, 0x08, 0x7f, 0x08, 0x77, // Ж	150
	0x41, 0x49, 0x49, 0x49, 0x36, // З	151
	0x7f, 0x10, 0x08, 0x04, 0x7f, // И	152
	0x7c, 0x21, 0x12, 0x09, 0x7c, // Й	153
	0x7f, 0x08, 0x14, 0x22, 0x41, // К	154
	0x20, 0x41, 0x3f, 0x01, 0x7f, // Л	155
	0x7f, 0x02, 0x0c, 0x02, 0x7f, // M	156
	0x7f, 0x08, 0x08, 0x08, 0x7f, // H	157
	0x3e, 0x41, 0x41, 0x41, 0x3e, // O	158
	0x7f, 0x01, 0x01, 0x01, 0x7f, // П	159
								  // -------------------------------------------------
	0x7f, 0x09, 0x09, 0x09, 0x06, // P	160
	0x3e, 0x41, 0x41, 0x41, 0x22, // C	161
	0x01, 0x01, 0x7f, 0x01, 0x01, // T	162
	0x47, 0x28, 0x10, 0x08, 0x07, // У	163
	0x1c, 0x22, 0x7f, 0x22, 0x1c, // Ф	164
	0x63, 0x14, 0x08, 0x14, 0x63, // X	165
	0x7f, 0x40, 0x40, 0x40, 0xff, // Ц	166
	0x07, 0x08, 0x08, 0x08, 0x7f, // Ч	167
	0x7f, 0x40, 0x7f, 0x40, 0x7f, // Ш	168
	0x7f, 0x40, 0x7f, 0x40, 0xff, // Щ	169
	0x01, 0x7f, 0x48, 0x48, 0x30, // Ъ	170
	0x7f, 0x48, 0x30, 0x00, 0x7f, // Ы	171
	0x00, 0x7f, 0x48, 0x48, 0x30, // Ь	172
	0x22, 0x41, 0x49, 0x49, 0x3e, // Э	173
	0x7f, 0x08, 0x3e, 0x41, 0x3e, // Ю	174
	0x46, 0x29, 0x19, 0x09, 0x7f, // Я	175
								  // -------------------------------------------------
	0x20, 0x54, 0x54, 0x54, 0x78, // а	176
	0x3c, 0x4a, 0x4a, 0x49, 0x31, // б	177
	0x7c, 0x54, 0x54, 0x28, 0x00, // в	178
	0x7c, 0x04, 0x04, 0x04, 0x0c, // г	179
	0xe0, 0x54, 0x4c, 0x44, 0xfc, // д	180
	0x38, 0x54, 0x54, 0x54, 0x18, // е	181
	0x6c, 0x10, 0x7c, 0x10, 0x6c, // ж	182
	0x44, 0x44, 0x54, 0x54, 0x28, // з	183
	0x7c, 0x20, 0x10, 0x08, 0x7c, // и	184
	0x7c, 0x41, 0x22, 0x11, 0x7c, // й	185
	0x7c, 0x10, 0x28, 0x44, 0x00, // к	186
	0x20, 0x44, 0x3c, 0x04, 0x7c, // л	187
	0x7c, 0x08, 0x10, 0x08, 0x7c, // м	188
	0x7c, 0x10, 0x10, 0x10, 0x7c, // н	189
	0x38, 0x44, 0x44, 0x44, 0x38, // о	190
	0x7c, 0x04, 0x04, 0x04, 0x7c  // п	191
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\SystemFont5x7.h ===

#ifndef SYSTEM5FONTx7_H
#define SYSTEMFONT5x7_H

/*
 * added to allow fontname to match header file name. 
 * as well as keep the old header filename for backward compability
 */

#define SYSTEMFONT5x7_WIDTH 5
#define SYSTEMFONT5x7_HEIGHT 7

#define SystemFont5x7 System5x7

#include "System5x7.h"

#endif


=== Файл: src\SSD1306Ascii\src\fonts\TimesNewRoman13.h ===

/*
 *
 * TimesNewRoman13
 * times_new_roman_size12
 *
 * created with GLCDFontCreator
 * original framework by F. Maximilian Thiele
 * Modified By Siddharth Kaul
 *
 *
 * File Name           : TimesNewRoman13.h
 * Date                : 10.11.2012
 * Font size in bytes  : 6732
 * Font width          : 10
 * Font height         : 13
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef _TimesNewRoman13_H
#define _TimesNewRoman13_H

#define TimesNewRoman13_WIDTH 10
#define TimesNewRoman13_HEIGHT 13

GLCDFONTDECL(TimesNewRoman13) = {
    0x1A, 0x4C, // size
    0x0A, // width
    0x0D, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x02, 0x01, 0x03, 0x06, 0x05, 0x09, 0x09, 0x01, 0x03, 0x03, 
    0x05, 0x07, 0x02, 0x03, 0x01, 0x03, 0x05, 0x03, 0x05, 0x05, 
    0x06, 0x05, 0x05, 0x05, 0x05, 0x05, 0x01, 0x02, 0x06, 0x06, 
    0x06, 0x04, 0x0A, 0x08, 0x07, 0x07, 0x08, 0x07, 0x06, 0x08, 
    0x08, 0x03, 0x04, 0x08, 0x07, 0x0B, 0x08, 0x08, 0x06, 0x08, 
    0x08, 0x05, 0x07, 0x08, 0x07, 0x0B, 0x08, 0x08, 0x07, 0x03, 
    0x03, 0x02, 0x06, 0x06, 0x02, 0x05, 0x05, 0x04, 0x06, 0x04, 
    0x04, 0x05, 0x06, 0x03, 0x02, 0x06, 0x03, 0x09, 0x06, 0x05, 
    0x06, 0x06, 0x04, 0x04, 0x03, 0x06, 0x06, 0x09, 0x05, 0x07, 
    0x05, 0x03, 0x01, 0x03, 0x05, 0x06, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, // 0x20 <space>
    0xFE, 0x10, // 33
    0x0E, 0x00, 0x0E, 0x00, 0x00, 0x00, // 34
    0xD0, 0x78, 0x56, 0x50, 0xF8, 0x56, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, // 35
    0x1C, 0x12, 0xFF, 0x22, 0xC4, 0x08, 0x10, 0x38, 0x10, 0x08, // 36
    0x0C, 0x12, 0x8C, 0x40, 0x30, 0x08, 0x86, 0x40, 0x80, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 0x08, 0x10, 0x08, // 37
    0xC0, 0x20, 0x3C, 0xD2, 0x8A, 0x46, 0x30, 0x10, 0x00, 0x08, 0x10, 0x10, 0x10, 0x08, 0x10, 0x10, 0x10, 0x08, // 38
    0x0E, 0x00, // 39
    0xF0, 0x0C, 0x02, 0x08, 0x30, 0x40, // 40
    0x02, 0x0C, 0xF0, 0x40, 0x30, 0x08, // 41
    0x14, 0x08, 0x3E, 0x08, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, // 42
    0x20, 0x20, 0x20, 0xFC, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, // 43
    0x00, 0x00, 0x50, 0x30, // 44
    0x80, 0x80, 0x80, 0x00, 0x00, 0x00, // 45
    0x00, 0x10, // 46
    0x00, 0xF8, 0x06, 0x18, 0x00, 0x00, // 47
    0xFC, 0x02, 0x02, 0x02, 0xFC, 0x08, 0x10, 0x10, 0x10, 0x08, // 48
    0x04, 0xFE, 0x00, 0x10, 0x18, 0x10, // 49
    0x04, 0x02, 0x82, 0x42, 0x3C, 0x10, 0x18, 0x10, 0x10, 0x18, // 50
    0x04, 0x02, 0x22, 0x32, 0xCC, 0x10, 0x10, 0x10, 0x10, 0x08, // 51
    0xC0, 0xA0, 0x98, 0x84, 0xFE, 0x80, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, // 52
    0x00, 0x0C, 0x0A, 0x12, 0xE2, 0x10, 0x10, 0x10, 0x08, 0x00, // 53
    0xF0, 0x28, 0x14, 0x12, 0xE2, 0x08, 0x10, 0x10, 0x10, 0x08, // 54
    0x04, 0x02, 0x02, 0xF2, 0x0E, 0x00, 0x00, 0x18, 0x00, 0x00, // 55
    0x8C, 0x52, 0x22, 0x52, 0x8C, 0x08, 0x10, 0x10, 0x10, 0x08, // 56
    0x3C, 0x42, 0x42, 0xC2, 0x7C, 0x10, 0x10, 0x08, 0x00, 0x00, // 57
    0x10, 0x10, // 58
    0x10, 0x00, 0x50, 0x30, // 59
    0x20, 0x50, 0x50, 0x50, 0x88, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 60
    0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 61
    0x88, 0x88, 0x50, 0x50, 0x50, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 62
    0x0C, 0xC2, 0x22, 0x1C, 0x00, 0x10, 0x00, 0x00, // 63
    0xF0, 0x08, 0xE4, 0x12, 0x0A, 0x0A, 0x92, 0x7A, 0x04, 0xF8, 0x18, 0x20, 0x48, 0x90, 0x90, 0x88, 0x88, 0x90, 0x48, 0x20, // 64
    0x00, 0x80, 0x78, 0x46, 0x58, 0x60, 0x80, 0x00, 0x10, 0x18, 0x10, 0x00, 0x00, 0x10, 0x18, 0x10, // 65
    0x02, 0xFE, 0x22, 0x22, 0x22, 0x3C, 0xC0, 0x10, 0x18, 0x10, 0x10, 0x10, 0x10, 0x08, // 66
    0xF8, 0x04, 0x02, 0x02, 0x02, 0x04, 0x8E, 0x00, 0x08, 0x10, 0x10, 0x10, 0x08, 0x00, // 67
    0x02, 0xFE, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF8, 0x10, 0x18, 0x10, 0x10, 0x10, 0x10, 0x08, 0x00, // 68
    0x02, 0xFE, 0x22, 0x22, 0x72, 0x06, 0x00, 0x10, 0x18, 0x10, 0x10, 0x10, 0x10, 0x08, // 69
    0x02, 0xFE, 0x22, 0x22, 0x72, 0x06, 0x10, 0x18, 0x10, 0x00, 0x00, 0x00, // 70
    0xF8, 0x04, 0x02, 0x02, 0x02, 0x24, 0xEE, 0x20, 0x00, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, 0x00, // 71
    0x02, 0xFE, 0x22, 0x20, 0x20, 0x22, 0xFE, 0x02, 0x10, 0x18, 0x10, 0x00, 0x00, 0x10, 0x18, 0x10, // 72
    0x02, 0xFE, 0x02, 0x10, 0x18, 0x10, // 73
    0x00, 0x02, 0xFE, 0x02, 0x18, 0x10, 0x08, 0x00, // 74
    0x02, 0xFE, 0x22, 0x50, 0x88, 0x06, 0x02, 0x02, 0x10, 0x18, 0x10, 0x00, 0x00, 0x18, 0x10, 0x10, // 75
    0x02, 0xFE, 0x02, 0x00, 0x00, 0x00, 0x00, 0x10, 0x18, 0x10, 0x10, 0x10, 0x10, 0x08, // 76
    0x02, 0xFE, 0x06, 0x18, 0xE0, 0x00, 0xE0, 0x18, 0x06, 0xFE, 0x02, 0x10, 0x18, 0x10, 0x00, 0x00, 0x18, 0x00, 0x00, 0x10, 0x18, 0x10, // 77
    0x02, 0xFE, 0x08, 0x10, 0x60, 0x82, 0xFE, 0x02, 0x10, 0x18, 0x10, 0x00, 0x00, 0x00, 0x18, 0x00, // 78
    0xF8, 0x04, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF8, 0x00, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, 0x00, // 79
    0x02, 0xFE, 0x22, 0x22, 0x22, 0x1C, 0x10, 0x18, 0x10, 0x00, 0x00, 0x00, // 80
    0xF8, 0x04, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF8, 0x00, 0x08, 0x10, 0x10, 0x30, 0x50, 0x48, 0x40, // 81
    0x02, 0xFE, 0x22, 0x22, 0xE2, 0x1C, 0x00, 0x00, 0x10, 0x18, 0x10, 0x00, 0x00, 0x08, 0x10, 0x10, // 82
    0x0C, 0x12, 0x22, 0x22, 0xC6, 0x18, 0x10, 0x10, 0x10, 0x08, // 83
    0x06, 0x02, 0x02, 0xFE, 0x02, 0x02, 0x06, 0x00, 0x00, 0x10, 0x18, 0x10, 0x00, 0x00, // 84
    0x02, 0xFE, 0x02, 0x00, 0x00, 0x02, 0xFE, 0x02, 0x00, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, 0x00, // 85
    0x02, 0x1E, 0xE2, 0x00, 0xE2, 0x1E, 0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, // 86
    0x02, 0x1E, 0xE2, 0x80, 0x62, 0x1E, 0xE2, 0x80, 0x72, 0x0E, 0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, // 87
    0x02, 0x06, 0x8A, 0x70, 0x70, 0x8A, 0x06, 0x02, 0x10, 0x18, 0x10, 0x00, 0x00, 0x10, 0x18, 0x10, // 88
    0x02, 0x06, 0x3A, 0xC0, 0x30, 0x0A, 0x06, 0x02, 0x00, 0x00, 0x10, 0x18, 0x10, 0x00, 0x00, 0x00, // 89
    0x00, 0x86, 0x42, 0x32, 0x0A, 0x06, 0x82, 0x10, 0x18, 0x10, 0x10, 0x10, 0x10, 0x18, // 90
    0xFE, 0x02, 0x02, 0x78, 0x40, 0x40, // 91
    0x06, 0xF8, 0x00, 0x00, 0x00, 0x18, // 92
    0x02, 0xFE, 0x40, 0x78, // 93
    0x10, 0x0C, 0x02, 0x02, 0x0C, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, // 95
    0x04, 0x08, 0x00, 0x00, // 96
    0xA0, 0x50, 0x50, 0xE0, 0x00, 0x08, 0x10, 0x10, 0x18, 0x10, // 97
    0xFE, 0x20, 0x10, 0x10, 0xE0, 0x08, 0x10, 0x10, 0x10, 0x08, // 98
    0xE0, 0x10, 0x10, 0x30, 0x08, 0x10, 0x10, 0x08, // 99
    0xE0, 0x10, 0x10, 0x22, 0xFE, 0x00, 0x08, 0x10, 0x10, 0x08, 0x18, 0x10, // 100
    0xE0, 0x50, 0x50, 0x60, 0x08, 0x10, 0x10, 0x08, // 101
    0x10, 0xFC, 0x12, 0x02, 0x10, 0x18, 0x10, 0x00, // 102
    0x60, 0x90, 0x90, 0x70, 0x10, 0x68, 0x90, 0x90, 0x90, 0x60, // 103
    0x02, 0xFE, 0x20, 0x10, 0xE0, 0x00, 0x10, 0x18, 0x10, 0x00, 0x18, 0x10, // 104
    0x10, 0xF2, 0x00, 0x10, 0x18, 0x10, // 105
    0x10, 0xF2, 0x80, 0x78, // 106
    0x02, 0xFE, 0x40, 0xB0, 0x10, 0x00, 0x10, 0x18, 0x10, 0x00, 0x18, 0x10, // 107
    0x02, 0xFE, 0x00, 0x10, 0x18, 0x10, // 108
    0x10, 0xF0, 0x20, 0x10, 0xE0, 0x20, 0x10, 0xE0, 0x00, 0x10, 0x18, 0x10, 0x00, 0x18, 0x10, 0x00, 0x18, 0x10, // 109
    0x10, 0xF0, 0x20, 0x10, 0xE0, 0x00, 0x10, 0x18, 0x10, 0x00, 0x18, 0x10, // 110
    0xE0, 0x10, 0x10, 0x10, 0xE0, 0x08, 0x10, 0x10, 0x10, 0x08, // 111
    0x10, 0xF0, 0x20, 0x10, 0x10, 0xE0, 0x80, 0xF8, 0x88, 0x10, 0x10, 0x08, // 112
    0xE0, 0x10, 0x10, 0x20, 0xF0, 0x00, 0x08, 0x10, 0x10, 0x88, 0xF8, 0x80, // 113
    0x10, 0xF0, 0x20, 0x10, 0x10, 0x18, 0x10, 0x00, // 114
    0x60, 0x50, 0x90, 0xB0, 0x18, 0x10, 0x10, 0x08, // 115
    0x10, 0xFC, 0x10, 0x00, 0x18, 0x10, // 116
    0x10, 0xF0, 0x00, 0x10, 0xF0, 0x00, 0x00, 0x08, 0x10, 0x10, 0x18, 0x10, // 117
    0x30, 0xD0, 0x00, 0xC0, 0x30, 0x10, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, // 118
    0x10, 0xF0, 0x00, 0x90, 0xF0, 0x10, 0xC0, 0x30, 0x10, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, // 119
    0x10, 0x30, 0xC0, 0x30, 0x10, 0x10, 0x18, 0x00, 0x18, 0x10, // 120
    0x10, 0x70, 0x90, 0x00, 0xD0, 0x30, 0x10, 0x80, 0x80, 0x48, 0x30, 0x08, 0x00, 0x00, // 121
    0x30, 0x10, 0xD0, 0x30, 0x10, 0x10, 0x18, 0x10, 0x10, 0x18, // 122
    0x40, 0xBC, 0x02, 0x00, 0x38, 0x40, // 123
    0xFE, 0x78, // 124
    0x02, 0xBC, 0x40, 0x40, 0x38, 0x00, // 125
    0x80, 0x40, 0xC0, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, // 126
    0xFC, 0x04, 0x04, 0x04, 0x04, 0xFC, 0x18, 0x10, 0x10, 0x10, 0x10, 0x18 // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\TimesNewRoman13_italic.h ===

/*
 *
 * TimesNewRoman13_italic
 * times_new_roman_size12_italic.h
 *
 * created with GLCDFontCreator
 * original framework by F. Maximilian Thiele
 * Modified By Siddharth Kaul
 *
 *
 * File Name           : TimesNewRoman13_italic.h
 * Date                : 10.11.2012
 * Font size in bytes  : 6680
 * Font width          : 10
 * Font height         : 13
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef _TimesNewRoman13_italic_H
#define _TimesNewRoman13_italic_H

#define TimesNewRoman13_italic_WIDTH 10
#define TimesNewRoman13_italic_HEIGHT 13

GLCDFONTDECL(TimesNewRoman13_italic) = {
    0x1A, 0x18, // size
    0x0A, // width
    0x0D, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x03, 0x03, 0x05, 0x06, 0x06, 0x0A, 0x09, 0x01, 0x03, 0x03, 
    0x04, 0x07, 0x01, 0x03, 0x01, 0x03, 0x05, 0x04, 0x05, 0x05, 
    0x05, 0x06, 0x05, 0x05, 0x06, 0x06, 0x02, 0x03, 0x06, 0x06, 
    0x06, 0x05, 0x0A, 0x07, 0x07, 0x07, 0x09, 0x07, 0x07, 0x08, 
    0x09, 0x04, 0x05, 0x08, 0x06, 0x0A, 0x08, 0x08, 0x07, 0x09, 
    0x07, 0x06, 0x06, 0x07, 0x06, 0x09, 0x07, 0x05, 0x07, 0x04, 
    0x01, 0x05, 0x05, 0x06, 0x02, 0x05, 0x05, 0x04, 0x06, 0x04, 
    0x03, 0x06, 0x05, 0x02, 0x03, 0x06, 0x03, 0x08, 0x05, 0x05, 
    0x05, 0x05, 0x04, 0x04, 0x03, 0x05, 0x05, 0x07, 0x05, 0x04, 
    0x04, 0x04, 0x01, 0x04, 0x06, 0x06, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x20 <space>
    0x00, 0xE0, 0x1E, 0x10, 0x00, 0x00, // 33
    0x0E, 0x02, 0x00, 0x0E, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // 34
    0x50, 0xF0, 0x5E, 0x50, 0xF0, 0x5E, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, // 35
    0x80, 0x0C, 0xD2, 0x3E, 0xC3, 0x04, 0x08, 0x30, 0x18, 0x10, 0x08, 0x00, // 36
    0x1C, 0x12, 0x12, 0x8E, 0x60, 0x30, 0x88, 0x44, 0x42, 0xC0, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 0x18, 0x10, 0x10, 0x08, // 37
    0xC0, 0x20, 0x20, 0xFC, 0x12, 0x8A, 0x66, 0x20, 0x20, 0x08, 0x10, 0x10, 0x10, 0x08, 0x10, 0x10, 0x10, 0x00, // 38
    0x0E, 0x00, // 39
    0xE0, 0x38, 0x04, 0x38, 0x40, 0x00, // 40
    0x00, 0x82, 0xFC, 0x30, 0x08, 0x00, // 41
    0x14, 0x18, 0x3E, 0x18, 0x00, 0x00, 0x00, 0x00, // 42
    0x20, 0x20, 0x20, 0xFC, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, // 43
    0x00, 0x30, // 44
    0x80, 0x80, 0x80, 0x00, 0x00, 0x00, // 45
    0x00, 0x10, // 46
    0x80, 0x70, 0x0C, 0x08, 0x00, 0x00, // 47
    0xF0, 0x0C, 0x02, 0x82, 0x7C, 0x08, 0x10, 0x10, 0x08, 0x00, // 48
    0x00, 0x00, 0xFA, 0x06, 0x10, 0x18, 0x10, 0x00, // 49
    0x00, 0x84, 0x42, 0x22, 0x1C, 0x18, 0x10, 0x10, 0x18, 0x00, // 50
    0x00, 0x24, 0x22, 0xD2, 0x0E, 0x10, 0x10, 0x10, 0x08, 0x00, // 51
    0xC0, 0xA0, 0x98, 0xF4, 0x8E, 0x00, 0x00, 0x18, 0x00, 0x00, // 52
    0x00, 0x00, 0x0C, 0x0A, 0xF2, 0x02, 0x18, 0x10, 0x10, 0x08, 0x00, 0x00, // 53
    0xE0, 0x18, 0x14, 0x12, 0xE2, 0x08, 0x10, 0x10, 0x08, 0x00, // 54
    0x04, 0x82, 0x62, 0x1A, 0x06, 0x10, 0x08, 0x00, 0x00, 0x00, // 55
    0x80, 0x40, 0x2C, 0x32, 0xD2, 0x0C, 0x08, 0x10, 0x10, 0x10, 0x08, 0x00, // 56
    0x00, 0x38, 0x44, 0x42, 0xE2, 0x3C, 0x10, 0x10, 0x10, 0x08, 0x00, 0x00, // 57
    0x00, 0x10, 0x10, 0x00, // 58
    0x00, 0x00, 0x10, 0x40, 0x30, 0x00, // 59
    0x40, 0xA0, 0xA0, 0xA0, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, // 60
    0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 61
    0x10, 0x10, 0xA0, 0xA0, 0xA0, 0x40, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, // 62
    0x0C, 0xC2, 0x22, 0x12, 0x0C, 0x10, 0x00, 0x00, 0x00, 0x00, // 63
    0xE0, 0x18, 0xC4, 0x36, 0x0A, 0x8A, 0x72, 0x0A, 0x84, 0xF8, 0x18, 0x20, 0x58, 0x90, 0x88, 0x98, 0x90, 0x50, 0x28, 0x20, // 64
    0x00, 0xC0, 0x60, 0x58, 0x44, 0xFE, 0x00, 0x18, 0x10, 0x00, 0x00, 0x10, 0x18, 0x10, // 65
    0x80, 0x7A, 0x26, 0x22, 0x22, 0xD2, 0x0C, 0x18, 0x10, 0x10, 0x10, 0x10, 0x08, 0x00, // 66
    0xF0, 0x08, 0x04, 0x02, 0x02, 0x02, 0x0C, 0x00, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, // 67
    0x00, 0x00, 0xFA, 0x06, 0x02, 0x02, 0x02, 0x84, 0x78, 0x10, 0x18, 0x10, 0x10, 0x10, 0x10, 0x08, 0x00, 0x00, // 68
    0x00, 0x00, 0xFA, 0x26, 0x62, 0x32, 0x06, 0x10, 0x18, 0x10, 0x10, 0x10, 0x08, 0x00, // 69
    0x00, 0x00, 0xFA, 0x26, 0x62, 0x32, 0x02, 0x10, 0x18, 0x10, 0x00, 0x00, 0x00, 0x00, // 70
    0xF0, 0x0C, 0x04, 0x02, 0x22, 0xA2, 0x6C, 0x26, 0x00, 0x08, 0x10, 0x10, 0x10, 0x18, 0x00, 0x00, // 71
    0x00, 0x00, 0xFA, 0x26, 0x22, 0x20, 0x20, 0xFA, 0x06, 0x10, 0x18, 0x10, 0x00, 0x00, 0x10, 0x18, 0x10, 0x00, // 72
    0x00, 0x00, 0xFA, 0x06, 0x10, 0x18, 0x10, 0x00, // 73
    0x00, 0x00, 0x80, 0x7A, 0x06, 0x10, 0x10, 0x08, 0x00, 0x00, // 74
    0x00, 0x00, 0xFA, 0x66, 0x92, 0x08, 0x06, 0x02, 0x10, 0x18, 0x10, 0x00, 0x10, 0x18, 0x10, 0x10, // 75
    0x00, 0x00, 0xFA, 0x06, 0x02, 0x00, 0x10, 0x18, 0x10, 0x10, 0x10, 0x18, // 76
    0x00, 0x00, 0xFA, 0x0E, 0xF0, 0x80, 0x60, 0x18, 0xFC, 0x06, 0x10, 0x18, 0x10, 0x00, 0x18, 0x00, 0x10, 0x18, 0x10, 0x00, // 77
    0x00, 0x02, 0xF2, 0x0E, 0x38, 0xC0, 0x00, 0xFA, 0x10, 0x18, 0x10, 0x00, 0x00, 0x00, 0x18, 0x00, // 78
    0xE0, 0x18, 0x04, 0x02, 0x02, 0x02, 0xC2, 0x3C, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, 0x00, 0x00, // 79
    0x00, 0x00, 0xFA, 0x26, 0x22, 0x22, 0x1C, 0x10, 0x18, 0x10, 0x00, 0x00, 0x00, 0x00, // 80
    0x00, 0xE0, 0x18, 0x04, 0x02, 0x02, 0x02, 0xC2, 0x3C, 0x80, 0xC8, 0xB8, 0x90, 0x90, 0x90, 0x88, 0x40, 0x00, // 81
    0x00, 0x00, 0xFA, 0x26, 0xE2, 0x22, 0x1C, 0x10, 0x18, 0x10, 0x00, 0x00, 0x18, 0x10, // 82
    0x00, 0x80, 0x1C, 0x22, 0xC2, 0x0C, 0x18, 0x08, 0x10, 0x10, 0x08, 0x00, // 83
    0x06, 0x02, 0xF2, 0x0E, 0x02, 0x02, 0x10, 0x18, 0x10, 0x00, 0x00, 0x00, // 84
    0xFA, 0x06, 0x02, 0x00, 0x00, 0xFA, 0x06, 0x08, 0x10, 0x10, 0x10, 0x08, 0x00, 0x00, // 85
    0xC2, 0x3E, 0x82, 0x60, 0x10, 0x0A, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, // 86
    0xE2, 0x1E, 0xC2, 0x30, 0xEA, 0x1E, 0xC2, 0x30, 0x0A, 0x18, 0x08, 0x00, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, // 87
    0x00, 0x80, 0x42, 0x3E, 0xD2, 0x0A, 0x06, 0x18, 0x10, 0x00, 0x10, 0x18, 0x10, 0x00, // 88
    0x02, 0xDE, 0x22, 0x18, 0x06, 0x10, 0x18, 0x10, 0x00, 0x00, // 89
    0x00, 0x04, 0xC2, 0x22, 0x12, 0x0E, 0x02, 0x10, 0x18, 0x10, 0x10, 0x10, 0x18, 0x00, // 90
    0x00, 0xE0, 0x1E, 0x02, 0x60, 0x58, 0x40, 0x00, // 91
    0xFE, 0x18, // 92
    0x00, 0x00, 0x82, 0x7A, 0x06, 0x40, 0x40, 0x38, 0x00, 0x00, // 93
    0x20, 0x18, 0x04, 0x18, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, // 95
    0x02, 0x04, 0x00, 0x00, // 96
    0xC0, 0x20, 0x10, 0x90, 0x70, 0x18, 0x10, 0x08, 0x18, 0x10, // 97
    0x80, 0x7A, 0x26, 0x10, 0xF0, 0x08, 0x10, 0x10, 0x08, 0x00, // 98
    0xC0, 0x20, 0x10, 0x30, 0x08, 0x10, 0x10, 0x08, // 99
    0xC0, 0x20, 0x10, 0x90, 0xFA, 0x06, 0x18, 0x10, 0x08, 0x18, 0x10, 0x00, // 100
    0xC0, 0xA0, 0x90, 0x70, 0x18, 0x10, 0x10, 0x08, // 101
    0x10, 0xF8, 0x14, 0x38, 0x00, 0x00, // 102
    0x00, 0xE0, 0x90, 0x90, 0x70, 0x10, 0xE0, 0x98, 0x90, 0xA0, 0x60, 0x00, // 103
    0x00, 0xFA, 0x26, 0x10, 0xF0, 0x18, 0x00, 0x00, 0x18, 0x10, // 104
    0xF0, 0x04, 0x10, 0x00, // 105
    0x90, 0x70, 0x04, 0x38, 0x00, 0x00, // 106
    0x00, 0xFA, 0xC6, 0x30, 0x10, 0x10, 0x18, 0x00, 0x08, 0x10, 0x08, 0x00, // 107
    0x80, 0x7A, 0x06, 0x18, 0x10, 0x00, // 108
    0x10, 0xF0, 0x20, 0x10, 0xF0, 0x20, 0x10, 0xF0, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x10, // 109
    0x10, 0xF0, 0x20, 0x10, 0xF0, 0x18, 0x00, 0x00, 0x18, 0x10, // 110
    0xC0, 0x20, 0x10, 0x10, 0xE0, 0x08, 0x10, 0x10, 0x08, 0x00, // 111
    0x10, 0xF0, 0x20, 0x10, 0xF0, 0xF8, 0x90, 0x10, 0x08, 0x00, // 112
    0xC0, 0x20, 0x10, 0x10, 0xF0, 0x18, 0x90, 0xC8, 0xB8, 0x00, // 113
    0x10, 0xF0, 0x20, 0x30, 0x18, 0x00, 0x00, 0x00, // 114
    0x00, 0x20, 0x50, 0x90, 0x18, 0x10, 0x10, 0x08, // 115
    0x90, 0x78, 0x14, 0x18, 0x10, 0x00, // 116
    0x90, 0x70, 0x00, 0x80, 0x70, 0x18, 0x10, 0x10, 0x18, 0x10, // 117
    0x10, 0xE0, 0x00, 0x80, 0x70, 0x00, 0x18, 0x08, 0x00, 0x00, // 118
    0x10, 0xF0, 0x80, 0x40, 0xF0, 0x00, 0xF0, 0x00, 0x18, 0x00, 0x00, 0x18, 0x08, 0x00, // 119
    0x00, 0x10, 0xF0, 0x20, 0x10, 0x10, 0x08, 0x00, 0x18, 0x00, // 120
    0x10, 0xF0, 0x00, 0xF0, 0x60, 0x18, 0x08, 0x00, // 121
    0x00, 0xB0, 0x50, 0x30, 0x18, 0x10, 0x10, 0x18, // 122
    0x40, 0xA0, 0x1C, 0x02, 0x70, 0x98, 0x00, 0x00, // 123
    0xFE, 0x78, // 124
    0x00, 0x00, 0x72, 0x9C, 0x80, 0x70, 0x08, 0x00, // 125
    0xC0, 0x40, 0x40, 0x80, 0x80, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 126
    0xFC, 0x04, 0x04, 0x04, 0x04, 0xFC, 0x18, 0x10, 0x10, 0x10, 0x10, 0x18 // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\TimesNewRoman16.h ===

/*
 *
 * TimesNewRoman16
 * times_news_roman_size16.h
 *
 * created with GLCDFontCreator
 * original framework by F. Maximilian Thiele
 * Modified By Siddharth Kaul
 *
 *
 * File Name           : TimesNewRoman16.h
 * Date                : 10.11.2012
 * Font size in bytes  : 10534
 * Font width          : 10
 * Font height         : 16
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef _TimesNewRoman16_H
#define _TimesNewRoman16_H

#define TimesNewRoman16_WIDTH 10
#define TimesNewRoman16_HEIGHT 16

GLCDFONTDECL(TimesNewRoman16) = {
    0x29, 0x26, // size
    0x0A, // width
    0x10, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x02, 0x01, 0x03, 0x08, 0x06, 0x0C, 0x0B, 0x01, 0x04, 0x04, 
    0x07, 0x09, 0x02, 0x04, 0x01, 0x04, 0x06, 0x04, 0x06, 0x06, 
    0x07, 0x06, 0x06, 0x07, 0x06, 0x06, 0x01, 0x02, 0x07, 0x09, 
    0x07, 0x05, 0x0E, 0x0B, 0x09, 0x09, 0x0A, 0x09, 0x08, 0x0A, 
    0x0B, 0x05, 0x06, 0x0B, 0x09, 0x0E, 0x0C, 0x0A, 0x08, 0x0A, 
    0x0A, 0x07, 0x09, 0x0B, 0x0B, 0x0F, 0x0B, 0x0A, 0x09, 0x03, 
    0x04, 0x03, 0x08, 0x08, 0x02, 0x06, 0x07, 0x05, 0x07, 0x05, 
    0x04, 0x07, 0x07, 0x03, 0x03, 0x08, 0x03, 0x0B, 0x07, 0x06, 
    0x07, 0x07, 0x05, 0x04, 0x04, 0x07, 0x07, 0x0B, 0x07, 0x07, 
    0x06, 0x04, 0x01, 0x04, 0x09, 0x08, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, // 0x20 <space>
    0xFE, 0x0B, // 33
    0x1E, 0x00, 0x1E, 0x00, 0x00, 0x00, // 34
    0x20, 0x20, 0xF0, 0x2E, 0x20, 0xF0, 0x2E, 0x20, 0x01, 0x0F, 0x01, 0x01, 0x0F, 0x01, 0x01, 0x01, // 35
    0x1C, 0x22, 0xFF, 0x42, 0x82, 0x0C, 0x06, 0x08, 0x1F, 0x08, 0x08, 0x07, // 36
    0x3C, 0x42, 0x42, 0x3C, 0x00, 0xC0, 0x20, 0x10, 0x8C, 0x42, 0x40, 0x80, 0x00, 0x00, 0x0C, 0x02, 0x01, 0x00, 0x00, 0x00, 0x07, 0x08, 0x08, 0x07, // 37
    0x00, 0x80, 0x5C, 0x62, 0xE2, 0x12, 0x1C, 0xA0, 0x60, 0x20, 0x00, 0x07, 0x0C, 0x08, 0x08, 0x08, 0x07, 0x06, 0x09, 0x08, 0x08, 0x04, // 38
    0x1E, 0x00, // 39
    0xE0, 0x18, 0x04, 0x02, 0x07, 0x18, 0x20, 0x40, // 40
    0x02, 0x04, 0x18, 0xE0, 0x40, 0x20, 0x18, 0x07, // 41
    0x24, 0x24, 0x18, 0x7E, 0x18, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 42
    0x40, 0x40, 0x40, 0x40, 0xFC, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, // 43
    0x00, 0x00, 0x28, 0x18, // 44
    0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, // 45
    0x00, 0x08, // 46
    0x00, 0xC0, 0x38, 0x06, 0x0C, 0x03, 0x00, 0x00, // 47
    0xF8, 0x04, 0x02, 0x02, 0x04, 0xF8, 0x03, 0x04, 0x08, 0x08, 0x04, 0x03, // 48
    0x04, 0x04, 0xFE, 0x00, 0x00, 0x08, 0x0F, 0x08, // 49
    0x0C, 0x02, 0x02, 0x82, 0x44, 0x38, 0x0C, 0x0A, 0x09, 0x08, 0x08, 0x0C, // 50
    0x04, 0x02, 0x42, 0x62, 0x52, 0x8C, 0x08, 0x08, 0x08, 0x08, 0x04, 0x03, // 51
    0x80, 0x40, 0x20, 0x18, 0x04, 0xFE, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0F, 0x01, // 52
    0x10, 0x1C, 0x12, 0x12, 0x22, 0xC2, 0x08, 0x08, 0x08, 0x08, 0x04, 0x03, // 53
    0xE0, 0x58, 0x24, 0x22, 0x62, 0x82, 0x03, 0x04, 0x08, 0x08, 0x04, 0x03, // 54
    0x04, 0x02, 0x02, 0x02, 0x82, 0x72, 0x0E, 0x00, 0x00, 0x00, 0x0C, 0x03, 0x00, 0x00, // 55
    0x1C, 0xA2, 0x42, 0x42, 0xA2, 0x1C, 0x07, 0x08, 0x08, 0x08, 0x08, 0x07, // 56
    0x38, 0x44, 0x82, 0x82, 0x44, 0xF8, 0x08, 0x08, 0x04, 0x04, 0x03, 0x00, // 57
    0x20, 0x08, // 58
    0x20, 0x00, 0x28, 0x18, // 59
    0x40, 0xA0, 0xA0, 0x10, 0x10, 0x10, 0x08, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, // 60
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, // 61
    0x08, 0x10, 0x10, 0x10, 0xA0, 0xA0, 0x40, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, // 62
    0x0C, 0x02, 0x82, 0x62, 0x1C, 0x00, 0x00, 0x0B, 0x00, 0x00, // 63
    0xC0, 0x30, 0x08, 0x04, 0xC4, 0x22, 0x12, 0x12, 0xE2, 0x32, 0x04, 0x08, 0xF0, 0x00, 0x0F, 0x10, 0x20, 0x4F, 0x88, 0x88, 0x84, 0x8F, 0x89, 0x88, 0x44, 0x26, 0x11, 0x08, // 64
    0x00, 0x00, 0x00, 0xC0, 0x38, 0x06, 0x38, 0xC0, 0x00, 0x00, 0x00, 0x08, 0x08, 0x0E, 0x09, 0x01, 0x01, 0x01, 0x09, 0x0E, 0x08, 0x08, // 65
    0x02, 0x02, 0xFE, 0x42, 0x42, 0x42, 0x64, 0x98, 0x00, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x04, 0x03, // 66
    0xF0, 0x08, 0x04, 0x02, 0x02, 0x02, 0x02, 0x04, 0x1E, 0x01, 0x02, 0x04, 0x08, 0x08, 0x08, 0x08, 0x04, 0x02, // 67
    0x02, 0x02, 0xFE, 0x02, 0x02, 0x02, 0x02, 0x04, 0x08, 0xF0, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x04, 0x02, 0x01, // 68
    0x02, 0x02, 0xFE, 0x42, 0x42, 0x42, 0xE2, 0x06, 0x00, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x0C, 0x02, // 69
    0x02, 0x02, 0xFE, 0x42, 0x42, 0x42, 0xE2, 0x06, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x00, 0x00, 0x00, // 70
    0xF0, 0x08, 0x04, 0x02, 0x02, 0x02, 0x42, 0x44, 0xCE, 0x40, 0x01, 0x02, 0x04, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x00, // 71
    0x02, 0x02, 0xFE, 0x42, 0x42, 0x40, 0x42, 0x42, 0xFE, 0x02, 0x02, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x00, 0x08, 0x08, 0x0F, 0x08, 0x08, // 72
    0x02, 0x02, 0xFE, 0x02, 0x02, 0x08, 0x08, 0x0F, 0x08, 0x08, // 73
    0x00, 0x02, 0x02, 0xFE, 0x02, 0x02, 0x0C, 0x08, 0x08, 0x07, 0x00, 0x00, // 74
    0x02, 0x02, 0xFE, 0x42, 0x42, 0xA0, 0x12, 0x0A, 0x06, 0x02, 0x00, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x00, 0x01, 0x0A, 0x0C, 0x08, 0x08, // 75
    0x02, 0x02, 0xFE, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x0C, 0x02, // 76
    0x02, 0x02, 0xFE, 0x0C, 0x30, 0xC0, 0x00, 0x00, 0x80, 0x70, 0x0C, 0xFE, 0x02, 0x02, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x01, 0x02, 0x0E, 0x01, 0x08, 0x08, 0x0F, 0x08, 0x08, // 77
    0x02, 0x02, 0xFE, 0x08, 0x10, 0x20, 0xC0, 0x02, 0x02, 0xFE, 0x02, 0x02, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x00, 0x00, 0x01, 0x02, 0x0F, 0x00, 0x00, // 78
    0xF0, 0x08, 0x04, 0x02, 0x02, 0x02, 0x02, 0x04, 0x08, 0xF0, 0x01, 0x02, 0x04, 0x08, 0x08, 0x08, 0x08, 0x04, 0x02, 0x01, // 79
    0x02, 0x02, 0xFE, 0x82, 0x82, 0x82, 0x44, 0x38, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x00, 0x00, 0x00, // 80
    0xF0, 0x08, 0x04, 0x02, 0x02, 0x02, 0x02, 0x04, 0x08, 0xF0, 0x01, 0x02, 0x04, 0x08, 0x08, 0x18, 0x28, 0x24, 0x42, 0x41, // 81
    0x02, 0x02, 0xFE, 0x42, 0x42, 0xC2, 0x24, 0x18, 0x00, 0x00, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x00, 0x03, 0x04, 0x08, 0x08, // 82
    0x18, 0x24, 0x22, 0x42, 0x42, 0x84, 0x0E, 0x0E, 0x04, 0x08, 0x08, 0x08, 0x04, 0x03, // 83
    0x0E, 0x02, 0x02, 0x02, 0xFE, 0x02, 0x02, 0x02, 0x0E, 0x00, 0x00, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x00, 0x00, // 84
    0x02, 0x02, 0xFE, 0x02, 0x02, 0x00, 0x02, 0x02, 0xFE, 0x02, 0x02, 0x00, 0x00, 0x03, 0x04, 0x08, 0x08, 0x08, 0x04, 0x03, 0x00, 0x00, // 85
    0x02, 0x02, 0x1E, 0xE2, 0x00, 0x00, 0x00, 0xE2, 0x1E, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x07, 0x08, 0x07, 0x00, 0x00, 0x00, 0x00, // 86
    0x02, 0x06, 0x0E, 0x72, 0x80, 0x02, 0x82, 0x5E, 0xE2, 0x00, 0x00, 0xE2, 0x1E, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0C, 0x03, 0x00, 0x00, 0x03, 0x0C, 0x03, 0x00, 0x00, 0x00, // 87
    0x02, 0x02, 0x06, 0x0A, 0xB2, 0x40, 0xB0, 0x0A, 0x06, 0x02, 0x02, 0x08, 0x08, 0x0C, 0x0A, 0x01, 0x00, 0x01, 0x0A, 0x0C, 0x08, 0x08, // 88
    0x02, 0x02, 0x0E, 0x32, 0xC0, 0x20, 0x1A, 0x06, 0x02, 0x02, 0x00, 0x00, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x00, 0x00, 0x00, // 89
    0x00, 0x0E, 0x02, 0x82, 0x62, 0x12, 0x0E, 0x02, 0x00, 0x08, 0x0E, 0x09, 0x08, 0x08, 0x08, 0x08, 0x0C, 0x02, // 90
    0xFE, 0x02, 0x02, 0x7F, 0x40, 0x40, // 91
    0x06, 0x78, 0x80, 0x00, 0x00, 0x00, 0x03, 0x0C, // 92
    0x02, 0x02, 0xFE, 0x40, 0x40, 0x7F, // 93
    0x40, 0x30, 0x0C, 0x02, 0x02, 0x0C, 0x30, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, // 95
    0x02, 0x0C, 0x00, 0x00, // 96
    0x40, 0x20, 0x20, 0xA0, 0xC0, 0x00, 0x06, 0x09, 0x09, 0x04, 0x0F, 0x08, // 97
    0x04, 0xFE, 0x40, 0x20, 0x20, 0x40, 0x80, 0x00, 0x07, 0x08, 0x08, 0x08, 0x04, 0x03, // 98
    0xC0, 0x20, 0x20, 0x20, 0x40, 0x07, 0x08, 0x08, 0x08, 0x04, // 99
    0x80, 0x40, 0x20, 0x20, 0x44, 0xFE, 0x00, 0x03, 0x04, 0x08, 0x08, 0x04, 0x0F, 0x04, // 100
    0xC0, 0xA0, 0xA0, 0xA0, 0xC0, 0x07, 0x08, 0x08, 0x08, 0x04, // 101
    0x20, 0xFC, 0x22, 0x22, 0x08, 0x0F, 0x08, 0x08, // 102
    0x00, 0xC0, 0x20, 0x20, 0x20, 0xE0, 0x20, 0x30, 0x4D, 0x4A, 0x4A, 0x4A, 0x49, 0x30, // 103
    0x04, 0xFE, 0x40, 0x20, 0x20, 0xC0, 0x00, 0x08, 0x0F, 0x08, 0x00, 0x08, 0x0F, 0x08, // 104
    0x40, 0xE2, 0x00, 0x08, 0x0F, 0x08, // 105
    0x00, 0x40, 0xE2, 0x40, 0x40, 0x3F, // 106
    0x04, 0xFE, 0x00, 0x80, 0x60, 0x20, 0x20, 0x00, 0x08, 0x0F, 0x09, 0x01, 0x02, 0x0C, 0x08, 0x08, // 107
    0x04, 0xFE, 0x00, 0x08, 0x0F, 0x08, // 108
    0x40, 0xE0, 0x40, 0x20, 0x20, 0xC0, 0x40, 0x20, 0x20, 0xC0, 0x00, 0x08, 0x0F, 0x08, 0x00, 0x08, 0x0F, 0x08, 0x00, 0x08, 0x0F, 0x08, // 109
    0x40, 0xE0, 0x40, 0x20, 0x20, 0xC0, 0x00, 0x08, 0x0F, 0x08, 0x00, 0x08, 0x0F, 0x08, // 110
    0x80, 0x40, 0x20, 0x20, 0x40, 0x80, 0x03, 0x04, 0x08, 0x08, 0x04, 0x03, // 111
    0x40, 0xE0, 0x40, 0x20, 0x20, 0x40, 0x80, 0x40, 0x7F, 0x44, 0x08, 0x08, 0x04, 0x03, // 112
    0x80, 0x40, 0x20, 0x20, 0x40, 0xE0, 0x00, 0x07, 0x0C, 0x08, 0x08, 0x44, 0x7F, 0x40, // 113
    0x40, 0xE0, 0x40, 0x20, 0x20, 0x08, 0x0F, 0x08, 0x00, 0x00, // 114
    0xC0, 0x20, 0x20, 0x60, 0x0C, 0x09, 0x09, 0x06, // 115
    0x20, 0xF8, 0x20, 0x20, 0x00, 0x0F, 0x08, 0x04, // 116
    0x20, 0xE0, 0x00, 0x00, 0x20, 0xE0, 0x00, 0x00, 0x07, 0x08, 0x08, 0x04, 0x0F, 0x04, // 117
    0x20, 0xE0, 0x20, 0x00, 0x20, 0xE0, 0x20, 0x00, 0x00, 0x07, 0x08, 0x07, 0x00, 0x00, // 118
    0x20, 0xE0, 0x20, 0x00, 0x20, 0xE0, 0x20, 0x00, 0x20, 0xE0, 0x20, 0x00, 0x00, 0x07, 0x0C, 0x03, 0x00, 0x07, 0x0C, 0x03, 0x00, 0x00, // 119
    0x20, 0x60, 0xA0, 0x00, 0xA0, 0x60, 0x20, 0x08, 0x0C, 0x0A, 0x01, 0x0A, 0x0C, 0x08, // 120
    0x20, 0xE0, 0x20, 0x00, 0x20, 0xE0, 0x20, 0x40, 0x40, 0x23, 0x1C, 0x07, 0x00, 0x00, // 121
    0x00, 0x60, 0x20, 0xA0, 0x60, 0x20, 0x08, 0x0C, 0x0B, 0x08, 0x08, 0x0C, // 122
    0x80, 0x78, 0x04, 0x02, 0x00, 0x1F, 0x20, 0x40, // 123
    0xFE, 0xFF, // 124
    0x02, 0x04, 0x78, 0x80, 0x40, 0x20, 0x1F, 0x00, // 125
    0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, // 126
    0xFE, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFE, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0F // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\TimesNewRoman16_bold.h ===

/*
 *
 * TimesNewRoman16_bold
 *
 * created with GLCDFontCreator
 * original framework by F. Maximilian Thiele
 * Modified By Siddharth Kaul
 *
 *
 * File Name           : TimesNewRoman16_bold.h
 * Date                : 10.11.2012
 * Font size in bytes  : 11270
 * Font width          : 10
 * Font height         : 16
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef TimesNewRoman16_bold_H
#define TimesNewRoman16_bold_H

#define TimesNewRoman16_bold_WIDTH 10
#define TimesNewRoman16_bold_HEIGHT 16

GLCDFONTDECL(TimesNewRoman16_bold) = {
    0x2C, 0x06, // size
    0x0A, // width
    0x10, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x02, 0x02, 0x06, 0x08, 0x07, 0x0E, 0x0C, 0x02, 0x04, 0x04, 
    0x05, 0x09, 0x02, 0x04, 0x02, 0x04, 0x07, 0x06, 0x07, 0x07, 
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x02, 0x02, 0x08, 0x08, 
    0x08, 0x06, 0x0E, 0x0B, 0x0A, 0x09, 0x0B, 0x09, 0x09, 0x0A, 
    0x0C, 0x06, 0x08, 0x0C, 0x09, 0x10, 0x0C, 0x0A, 0x09, 0x0A, 
    0x0C, 0x07, 0x08, 0x0B, 0x0B, 0x0F, 0x0B, 0x0A, 0x09, 0x03, 
    0x04, 0x03, 0x07, 0x08, 0x02, 0x07, 0x07, 0x05, 0x07, 0x06, 
    0x05, 0x07, 0x08, 0x04, 0x03, 0x09, 0x04, 0x0C, 0x08, 0x06, 
    0x07, 0x07, 0x06, 0x05, 0x05, 0x08, 0x08, 0x0A, 0x08, 0x08, 
    0x06, 0x05, 0x01, 0x05, 0x07, 0x08, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, // 0x20 <space>
    0x3E, 0xFE, 0x0C, 0x0D, // 33
    0x1E, 0x1E, 0x00, 0x00, 0x1E, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 34
    0x20, 0x20, 0xF0, 0x2E, 0x20, 0xF0, 0x2E, 0x20, 0x01, 0x0F, 0x01, 0x01, 0x0F, 0x01, 0x01, 0x01, // 35
    0x1C, 0x3E, 0x62, 0xFF, 0xC2, 0x86, 0x0C, 0x06, 0x0C, 0x08, 0x1F, 0x09, 0x0F, 0x07, // 36
    0x3C, 0x7E, 0x42, 0x7E, 0x3C, 0x00, 0xC0, 0x20, 0x18, 0x84, 0xC2, 0x40, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x08, 0x04, 0x03, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x08, 0x0F, 0x07, // 37
    0x00, 0x80, 0x40, 0x3C, 0xFE, 0xE2, 0x22, 0x1E, 0xAC, 0x60, 0x20, 0x00, 0x07, 0x0F, 0x0C, 0x08, 0x08, 0x0B, 0x07, 0x06, 0x0D, 0x0C, 0x04, 0x02, // 38
    0x1E, 0x1E, 0x00, 0x00, // 39
    0xE0, 0xF8, 0x0C, 0x02, 0x07, 0x1F, 0x30, 0x40, // 40
    0x02, 0x0C, 0xF8, 0xE0, 0x40, 0x30, 0x1F, 0x07, // 41
    0x28, 0x38, 0x1E, 0x38, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, // 42
    0x40, 0x40, 0x40, 0x40, 0xFC, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, // 43
    0x00, 0x00, 0x4C, 0x3C, // 44
    0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, // 45
    0x00, 0x00, 0x0C, 0x0C, // 46
    0x00, 0xC0, 0x38, 0x06, 0x0C, 0x03, 0x00, 0x00, // 47
    0xF8, 0xFC, 0x06, 0x02, 0x06, 0xFC, 0xF8, 0x03, 0x07, 0x0C, 0x08, 0x0C, 0x07, 0x03, // 48
    0x02, 0x02, 0xFE, 0xFE, 0x00, 0x00, 0x08, 0x08, 0x0F, 0x0F, 0x08, 0x08, // 49
    0x08, 0x0C, 0x06, 0x86, 0xFE, 0x3C, 0x00, 0x08, 0x0C, 0x0E, 0x0D, 0x0C, 0x0C, 0x02, // 50
    0x08, 0x04, 0x46, 0x66, 0xFE, 0xDC, 0x80, 0x0C, 0x0C, 0x08, 0x08, 0x08, 0x07, 0x03, // 51
    0x80, 0x40, 0x20, 0x18, 0xFC, 0xFE, 0x00, 0x03, 0x03, 0x03, 0x03, 0x0F, 0x0F, 0x03, // 52
    0x20, 0x3C, 0x36, 0x36, 0x66, 0xE6, 0xC2, 0x0C, 0x0C, 0x0C, 0x08, 0x08, 0x04, 0x03, // 53
    0xE0, 0xF8, 0x3C, 0x24, 0x66, 0xC2, 0x82, 0x03, 0x07, 0x0C, 0x08, 0x0C, 0x07, 0x03, // 54
    0x0C, 0x06, 0x06, 0x06, 0xE6, 0x1E, 0x02, 0x00, 0x00, 0x08, 0x07, 0x00, 0x00, 0x00, // 55
    0x1C, 0xBE, 0x72, 0x62, 0xE2, 0xFE, 0x9C, 0x07, 0x0F, 0x08, 0x08, 0x08, 0x0F, 0x07, // 56
    0x38, 0x7C, 0xC6, 0x82, 0x86, 0xFC, 0xF8, 0x08, 0x08, 0x0C, 0x04, 0x07, 0x03, 0x00, // 57
    0x60, 0x60, 0x0C, 0x0C, // 58
    0x60, 0x60, 0x4C, 0x3C, // 59
    0x80, 0x40, 0x40, 0x40, 0x20, 0x20, 0x20, 0x10, 0x00, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x04, // 60
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, // 61
    0x10, 0x20, 0x20, 0x20, 0x40, 0x40, 0x40, 0x80, 0x04, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x00, // 62
    0x1C, 0x1E, 0x02, 0xC2, 0x7E, 0x3C, 0x00, 0x00, 0x0C, 0x0D, 0x00, 0x00, // 63
    0xE0, 0x10, 0x08, 0x84, 0xC2, 0x62, 0x22, 0x22, 0xC2, 0xE2, 0x04, 0x08, 0xF0, 0x00, 0x0F, 0x10, 0x20, 0x47, 0x8F, 0x88, 0x84, 0x86, 0x8F, 0x88, 0x44, 0x22, 0x11, 0x08, // 64
    0x00, 0x00, 0x80, 0x70, 0x0C, 0x1E, 0x78, 0xE0, 0x80, 0x00, 0x00, 0x08, 0x0C, 0x0B, 0x09, 0x01, 0x01, 0x01, 0x0B, 0x0F, 0x0E, 0x08, // 65
    0x02, 0x02, 0xFE, 0xFE, 0x42, 0x42, 0x42, 0xE2, 0xBE, 0x1C, 0x08, 0x08, 0x0F, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x0F, 0x07, // 66
    0xF0, 0xFC, 0x0C, 0x02, 0x02, 0x02, 0x04, 0x0C, 0x1E, 0x01, 0x07, 0x06, 0x08, 0x08, 0x08, 0x08, 0x04, 0x02, // 67
    0x02, 0x02, 0xFE, 0xFE, 0x02, 0x02, 0x02, 0x06, 0x0C, 0xF8, 0xF0, 0x08, 0x08, 0x0F, 0x0F, 0x08, 0x08, 0x08, 0x0C, 0x06, 0x03, 0x01, // 68
    0x02, 0x02, 0xFE, 0xFE, 0x42, 0x42, 0xF2, 0x02, 0x0E, 0x08, 0x08, 0x0F, 0x0F, 0x08, 0x08, 0x09, 0x08, 0x0E, // 69
    0x02, 0x02, 0xFE, 0xFE, 0x42, 0x42, 0xF2, 0x02, 0x0E, 0x08, 0x08, 0x0F, 0x0F, 0x08, 0x08, 0x01, 0x00, 0x00, // 70
    0xF0, 0xFC, 0x0C, 0x02, 0x02, 0x02, 0x84, 0x8C, 0x9E, 0x80, 0x01, 0x07, 0x06, 0x08, 0x08, 0x08, 0x08, 0x0F, 0x07, 0x00, // 71
    0x02, 0x02, 0xFE, 0xFE, 0x42, 0x40, 0x40, 0x42, 0xFE, 0xFE, 0x02, 0x02, 0x08, 0x08, 0x0F, 0x0F, 0x08, 0x00, 0x00, 0x08, 0x0F, 0x0F, 0x08, 0x08, // 72
    0x02, 0x02, 0xFE, 0xFE, 0x02, 0x02, 0x08, 0x08, 0x0F, 0x0F, 0x08, 0x08, // 73
    0x00, 0x00, 0x00, 0x02, 0x02, 0xFE, 0xFE, 0x02, 0x07, 0x0F, 0x08, 0x08, 0x08, 0x0F, 0x07, 0x00, // 74
    0x02, 0x02, 0xFE, 0xFE, 0x42, 0xE2, 0x90, 0x10, 0x0A, 0x06, 0x02, 0x02, 0x08, 0x08, 0x0F, 0x0F, 0x08, 0x08, 0x01, 0x0B, 0x0E, 0x0C, 0x08, 0x08, // 75
    0x02, 0x02, 0xFE, 0xFE, 0x02, 0x02, 0x00, 0x00, 0x00, 0x08, 0x08, 0x0F, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x0E, // 76
    0x02, 0x02, 0xFE, 0x06, 0x3E, 0xF8, 0xC0, 0x00, 0x00, 0xC0, 0x38, 0x06, 0xFE, 0xFE, 0x02, 0x02, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x01, 0x07, 0x0E, 0x03, 0x00, 0x08, 0x08, 0x0F, 0x0F, 0x08, 0x08, // 77
    0x02, 0x02, 0xFE, 0x06, 0x0E, 0x38, 0x70, 0xC2, 0x82, 0xFE, 0x02, 0x02, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x00, 0x00, 0x01, 0x03, 0x0F, 0x00, 0x00, // 78
    0xF0, 0xFC, 0x0C, 0x02, 0x02, 0x02, 0x02, 0x0C, 0xFC, 0xF0, 0x01, 0x07, 0x06, 0x08, 0x08, 0x08, 0x08, 0x06, 0x07, 0x01, // 79
    0x02, 0x02, 0xFE, 0xFE, 0x42, 0x42, 0x42, 0x7E, 0x3C, 0x08, 0x08, 0x0F, 0x0F, 0x08, 0x08, 0x00, 0x00, 0x00, // 80
    0xF0, 0xFC, 0x0C, 0x02, 0x02, 0x02, 0x02, 0x0C, 0xFC, 0xF0, 0x01, 0x07, 0x06, 0x08, 0x18, 0x38, 0x68, 0x46, 0x47, 0x01, // 81
    0x02, 0x02, 0xFE, 0xFE, 0x42, 0x42, 0xC2, 0xC2, 0x7E, 0x3C, 0x00, 0x00, 0x08, 0x08, 0x0F, 0x0F, 0x08, 0x08, 0x00, 0x03, 0x0F, 0x0C, 0x08, 0x08, // 82
    0x1C, 0x3E, 0x72, 0xE2, 0xC2, 0x84, 0x1E, 0x0F, 0x04, 0x08, 0x08, 0x09, 0x0F, 0x07, // 83
    0x0E, 0x02, 0x02, 0xFE, 0xFE, 0x02, 0x02, 0x0E, 0x00, 0x08, 0x08, 0x0F, 0x0F, 0x08, 0x08, 0x00, // 84
    0x02, 0x02, 0xFE, 0xFE, 0x02, 0x00, 0x00, 0x02, 0xFE, 0x02, 0x02, 0x00, 0x00, 0x07, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x07, 0x00, 0x00, // 85
    0x02, 0x02, 0x0E, 0x7E, 0xF2, 0x80, 0x00, 0xC0, 0x32, 0x0E, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0F, 0x0E, 0x01, 0x00, 0x00, 0x00, // 86
    0x02, 0x0E, 0x7E, 0xF2, 0x80, 0x00, 0xE2, 0x1E, 0x7E, 0xF2, 0x80, 0x00, 0xE2, 0x1E, 0x02, 0x00, 0x00, 0x00, 0x01, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x01, 0x0F, 0x0E, 0x01, 0x00, 0x00, // 87
    0x02, 0x02, 0x06, 0x1E, 0xFA, 0xE0, 0xA0, 0x1A, 0x06, 0x02, 0x02, 0x08, 0x0C, 0x0C, 0x0B, 0x00, 0x01, 0x0B, 0x0F, 0x0C, 0x08, 0x08, // 88
    0x02, 0x06, 0x1E, 0x7A, 0xE2, 0x80, 0x60, 0x1A, 0x06, 0x02, 0x00, 0x00, 0x08, 0x08, 0x0F, 0x0F, 0x08, 0x08, 0x00, 0x00, // 89
    0x00, 0x1E, 0x06, 0xC2, 0xE2, 0x7A, 0x1E, 0x06, 0x02, 0x08, 0x0C, 0x0F, 0x0B, 0x08, 0x08, 0x08, 0x0C, 0x0F, // 90
    0xFE, 0xFE, 0x02, 0x7F, 0x7F, 0x40, // 91
    0x06, 0x78, 0x80, 0x00, 0x00, 0x00, 0x03, 0x0C, // 92
    0x02, 0xFE, 0xFE, 0x40, 0x7F, 0x7F, // 93
    0x40, 0x30, 0x0C, 0x02, 0x0C, 0x30, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, // 95
    0x02, 0x04, 0x00, 0x00, // 96
    0x40, 0x60, 0x20, 0x20, 0xE0, 0xC0, 0x00, 0x06, 0x0F, 0x09, 0x09, 0x0F, 0x0F, 0x08, // 97
    0x02, 0xFE, 0xFE, 0x20, 0x20, 0xE0, 0xC0, 0x00, 0x0F, 0x07, 0x08, 0x08, 0x0F, 0x07, // 98
    0xC0, 0xE0, 0x20, 0x60, 0x60, 0x07, 0x0F, 0x08, 0x08, 0x04, // 99
    0xC0, 0xE0, 0x20, 0x22, 0xFE, 0xFE, 0x00, 0x07, 0x0F, 0x08, 0x08, 0x0F, 0x0F, 0x08, // 100
    0xC0, 0xE0, 0x20, 0x20, 0xE0, 0xC0, 0x07, 0x0F, 0x09, 0x09, 0x09, 0x05, // 101
    0x20, 0xFC, 0xFE, 0x22, 0x06, 0x08, 0x0F, 0x0F, 0x08, 0x00, // 102
    0xC0, 0xE0, 0x20, 0x20, 0xE0, 0xE0, 0x20, 0x3D, 0x5B, 0x5A, 0x5A, 0x5B, 0x59, 0x30, // 103
    0x02, 0xFE, 0xFE, 0x40, 0x20, 0xE0, 0xC0, 0x00, 0x08, 0x0F, 0x0F, 0x08, 0x00, 0x0F, 0x0F, 0x08, // 104
    0x20, 0xE6, 0xE6, 0x00, 0x08, 0x0F, 0x0F, 0x08, // 105
    0x20, 0xE6, 0xE6, 0x40, 0x7F, 0x3F, // 106
    0x02, 0xFE, 0xFE, 0x00, 0x80, 0x60, 0x20, 0x20, 0x00, 0x08, 0x0F, 0x0F, 0x09, 0x03, 0x0E, 0x0C, 0x08, 0x08, // 107
    0x02, 0xFE, 0xFE, 0x00, 0x08, 0x0F, 0x0F, 0x08, // 108
    0x20, 0xE0, 0xE0, 0x40, 0x20, 0xE0, 0xC0, 0x40, 0x20, 0xE0, 0xC0, 0x00, 0x08, 0x0F, 0x0F, 0x08, 0x00, 0x0F, 0x0F, 0x08, 0x00, 0x0F, 0x0F, 0x08, // 109
    0x20, 0xE0, 0xE0, 0x40, 0x20, 0xE0, 0xC0, 0x00, 0x08, 0x0F, 0x0F, 0x08, 0x00, 0x0F, 0x0F, 0x08, // 110
    0xC0, 0xE0, 0x20, 0x20, 0xE0, 0xC0, 0x07, 0x0F, 0x08, 0x08, 0x0F, 0x07, // 111
    0x20, 0xE0, 0xE0, 0x20, 0x20, 0xE0, 0xC0, 0x40, 0x7F, 0x7F, 0x48, 0x08, 0x0F, 0x07, // 112
    0xC0, 0xE0, 0x20, 0x20, 0xC0, 0xE0, 0x00, 0x07, 0x0F, 0x08, 0x48, 0x7F, 0x7F, 0x40, // 113
    0x20, 0xE0, 0xE0, 0x40, 0x20, 0x60, 0x08, 0x0F, 0x0F, 0x08, 0x00, 0x00, // 114
    0xC0, 0xE0, 0xA0, 0x20, 0x60, 0x0C, 0x09, 0x0B, 0x0F, 0x06, // 115
    0x20, 0xF0, 0xFC, 0x20, 0x20, 0x00, 0x07, 0x0F, 0x08, 0x04, // 116
    0x20, 0xE0, 0xE0, 0x00, 0x20, 0xE0, 0xE0, 0x00, 0x00, 0x07, 0x0F, 0x08, 0x08, 0x0F, 0x0F, 0x08, // 117
    0x20, 0x60, 0xE0, 0xA0, 0x00, 0xA0, 0x60, 0x20, 0x00, 0x00, 0x03, 0x0F, 0x0C, 0x03, 0x00, 0x00, // 118
    0x60, 0xE0, 0xA0, 0x00, 0xA0, 0xE0, 0xA0, 0x00, 0xA0, 0x60, 0x00, 0x01, 0x0F, 0x0E, 0x01, 0x01, 0x0F, 0x0E, 0x01, 0x00, // 119
    0x20, 0x20, 0xE0, 0xE0, 0x80, 0x60, 0x20, 0x20, 0x08, 0x08, 0x0C, 0x03, 0x0F, 0x0E, 0x08, 0x08, // 120
    0x20, 0xE0, 0xE0, 0xA0, 0x00, 0xA0, 0x60, 0x20, 0x60, 0x60, 0x43, 0x3F, 0x0E, 0x01, 0x00, 0x00, // 121
    0x60, 0x20, 0xA0, 0xE0, 0xE0, 0x20, 0x08, 0x0E, 0x0F, 0x0B, 0x08, 0x0C, // 122
    0x80, 0x7C, 0x3E, 0x02, 0x02, 0x00, 0x3F, 0x7E, 0x40, 0x40, // 123
    0xFE, 0x7F, // 124
    0x02, 0x02, 0x3E, 0x7C, 0x80, 0x40, 0x40, 0x7E, 0x3F, 0x00, // 125
    0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, // 126
    0xFE, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFE, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0F // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\TimesNewRoman16_italic.h ===

/*
 *
 * TimesNewRoman16_italic
 *
 * created with GLCDFontCreator
 * original framework by F. Maximilian Thiele
 * Modified By Siddharth Kaul
 *
 *
 * File Name           : TimesNewRoman16_italic.h
 * Date                : 10.11.2012
 * Font size in bytes  : 10998
 * Font width          : 10
 * Font height         : 16
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef _TimesNewRoman16_italic_H
#define _TimesNewRoman16_italic_H

#define TimesNewRoman16_italic_WIDTH 10
#define TimesNewRoman16_italic_HEIGHT 16

GLCDFONTDECL(TimesNewRoman16_italic) = {
    0x2A, 0xF6, // size
    0x0A, // width
    0x10, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x03, 0x03, 0x05, 0x07, 0x07, 0x0C, 0x0B, 0x01, 0x04, 0x04, 
    0x06, 0x09, 0x02, 0x04, 0x02, 0x04, 0x07, 0x05, 0x07, 0x06, 
    0x06, 0x07, 0x07, 0x07, 0x07, 0x07, 0x04, 0x05, 0x09, 0x09, 
    0x09, 0x06, 0x0E, 0x09, 0x09, 0x0A, 0x0B, 0x0A, 0x0A, 0x0B, 
    0x0B, 0x05, 0x07, 0x0B, 0x08, 0x0D, 0x0B, 0x0A, 0x0A, 0x0A, 
    0x09, 0x08, 0x08, 0x0A, 0x08, 0x0B, 0x0A, 0x07, 0x09, 0x07, 
    0x02, 0x07, 0x07, 0x08, 0x02, 0x07, 0x07, 0x06, 0x08, 0x06, 
    0x05, 0x08, 0x07, 0x03, 0x04, 0x08, 0x04, 0x0B, 0x07, 0x07, 
    0x07, 0x07, 0x06, 0x06, 0x04, 0x07, 0x07, 0x0A, 0x07, 0x07, 
    0x06, 0x05, 0x01, 0x05, 0x08, 0x08, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x20 <space>
    0x00, 0xC0, 0x3E, 0x08, 0x03, 0x00, // 33
    0x3C, 0x06, 0x00, 0x3C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, // 34
    0x20, 0xE0, 0x38, 0x26, 0x20, 0xE0, 0x38, 0x0D, 0x03, 0x01, 0x01, 0x0D, 0x03, 0x01, // 35
    0x00, 0x1C, 0x32, 0xE2, 0x5E, 0x83, 0x0C, 0x06, 0x08, 0x1E, 0x09, 0x0C, 0x07, 0x00, // 36
    0x38, 0x44, 0x42, 0x22, 0x1C, 0xC0, 0x60, 0x10, 0x88, 0x44, 0x42, 0x80, 0x00, 0x08, 0x04, 0x02, 0x01, 0x00, 0x00, 0x07, 0x08, 0x08, 0x04, 0x03, // 37
    0x80, 0x80, 0x40, 0x40, 0xFC, 0xA2, 0x12, 0x0E, 0x40, 0xC0, 0x40, 0x07, 0x0C, 0x08, 0x08, 0x08, 0x0B, 0x06, 0x0D, 0x09, 0x08, 0x04, // 38
    0x3C, 0x00, // 39
    0x80, 0xE0, 0x30, 0x08, 0x3F, 0x40, 0x00, 0x00, // 40
    0x00, 0x00, 0x06, 0xF8, 0x10, 0x08, 0x07, 0x01, // 41
    0x24, 0x24, 0x18, 0x7E, 0x18, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 42
    0x40, 0x40, 0x40, 0x40, 0xFC, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, // 43
    0x00, 0x00, 0x14, 0x0C, // 44
    0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, // 45
    0x00, 0x00, 0x0C, 0x0C, // 46
    0x00, 0x80, 0x70, 0x0C, 0x06, 0x01, 0x00, 0x00, // 47
    0xE0, 0x18, 0x04, 0x02, 0x02, 0x02, 0xFC, 0x07, 0x08, 0x08, 0x08, 0x04, 0x03, 0x00, // 48
    0x00, 0x00, 0x80, 0x72, 0x0E, 0x08, 0x0C, 0x0B, 0x08, 0x00, // 49
    0x00, 0x00, 0x04, 0x02, 0x82, 0x62, 0x1C, 0x08, 0x0C, 0x0A, 0x09, 0x08, 0x04, 0x00, // 50
    0x00, 0x00, 0x44, 0x62, 0x92, 0x0C, 0x0C, 0x08, 0x08, 0x04, 0x03, 0x00, // 51
    0x80, 0x40, 0x30, 0x08, 0xE4, 0x1E, 0x01, 0x01, 0x01, 0x0D, 0x03, 0x01, // 52
    0x00, 0x00, 0x10, 0x1E, 0x22, 0xC2, 0x02, 0x0C, 0x08, 0x08, 0x08, 0x06, 0x01, 0x00, // 53
    0xC0, 0x70, 0x18, 0x14, 0x14, 0xE2, 0x02, 0x07, 0x08, 0x08, 0x08, 0x06, 0x01, 0x00, // 54
    0x04, 0x02, 0x02, 0xC2, 0x32, 0x0E, 0x02, 0x08, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, // 55
    0x00, 0x80, 0x5C, 0x22, 0x42, 0xA2, 0x1C, 0x07, 0x08, 0x08, 0x08, 0x04, 0x03, 0x00, // 56
    0x00, 0xF0, 0x0C, 0x02, 0x02, 0x82, 0x7C, 0x08, 0x08, 0x09, 0x05, 0x03, 0x01, 0x00, // 57
    0x00, 0x00, 0x60, 0x60, 0x0C, 0x0C, 0x00, 0x00, // 58
    0x00, 0x00, 0x00, 0x60, 0x60, 0x20, 0x14, 0x0C, 0x00, 0x00, // 59
    0x80, 0x40, 0x40, 0x40, 0x20, 0x20, 0x20, 0x10, 0x10, 0x00, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x04, 0x04, // 60
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 61
    0x10, 0x10, 0x20, 0x20, 0x20, 0x40, 0x40, 0x40, 0x80, 0x04, 0x04, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x00, // 62
    0x00, 0x0C, 0x82, 0x42, 0x22, 0x1C, 0x08, 0x03, 0x00, 0x00, 0x00, 0x00, // 63
    0xC0, 0x30, 0x08, 0x04, 0xC4, 0x22, 0x12, 0x12, 0xE2, 0x32, 0x04, 0x08, 0xF0, 0x00, 0x0F, 0x10, 0x20, 0x4F, 0x88, 0x88, 0x84, 0x8F, 0x89, 0x88, 0x44, 0x26, 0x11, 0x08, // 64
    0x00, 0x00, 0x00, 0x80, 0xE0, 0x98, 0x84, 0xFE, 0x00, 0x08, 0x0C, 0x0B, 0x00, 0x00, 0x08, 0x08, 0x0F, 0x08, // 65
    0x00, 0x00, 0x80, 0x72, 0x4E, 0x42, 0x42, 0xA2, 0x1C, 0x08, 0x0C, 0x0B, 0x08, 0x08, 0x08, 0x04, 0x03, 0x00, // 66
    0xE0, 0x18, 0x04, 0x04, 0x02, 0x02, 0x02, 0x04, 0x1C, 0x06, 0x03, 0x04, 0x08, 0x08, 0x08, 0x08, 0x04, 0x02, 0x00, 0x00, // 67
    0x00, 0x00, 0x80, 0x72, 0x0E, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF8, 0x08, 0x0C, 0x0B, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x03, 0x00, // 68
    0x00, 0x00, 0x80, 0x72, 0x4E, 0x42, 0xC2, 0x72, 0x02, 0x0E, 0x08, 0x0C, 0x0B, 0x08, 0x08, 0x08, 0x09, 0x0C, 0x02, 0x00, // 69
    0x00, 0x00, 0x80, 0x72, 0x4E, 0x42, 0xC2, 0x72, 0x02, 0x0E, 0x08, 0x0C, 0x0B, 0x08, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // 70
    0xE0, 0x18, 0x04, 0x04, 0x02, 0x02, 0x02, 0x42, 0xC4, 0x5C, 0x46, 0x03, 0x04, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0C, 0x03, 0x00, 0x00, // 71
    0x00, 0x00, 0x80, 0x72, 0x4E, 0x42, 0x40, 0x40, 0xC0, 0x72, 0x0E, 0x08, 0x0C, 0x0B, 0x00, 0x00, 0x00, 0x08, 0x0C, 0x0B, 0x08, 0x00, // 72
    0x00, 0x00, 0x80, 0x72, 0x0E, 0x08, 0x0C, 0x0B, 0x08, 0x00, // 73
    0x00, 0x00, 0x00, 0x00, 0xC2, 0x3A, 0x06, 0x0E, 0x08, 0x08, 0x04, 0x03, 0x00, 0x00, // 74
    0x00, 0x00, 0x80, 0x72, 0xCE, 0x22, 0x10, 0x08, 0x0A, 0x06, 0x02, 0x08, 0x0C, 0x0B, 0x08, 0x00, 0x01, 0x0A, 0x0C, 0x08, 0x08, 0x00, // 75
    0x00, 0x00, 0x80, 0x72, 0x0E, 0x02, 0x02, 0x00, 0x08, 0x0C, 0x0B, 0x08, 0x08, 0x08, 0x08, 0x0E, // 76
    0x00, 0x00, 0x80, 0x72, 0x0E, 0xFC, 0x00, 0x00, 0xC0, 0x20, 0x90, 0x7C, 0x0E, 0x08, 0x0C, 0x0B, 0x08, 0x00, 0x0F, 0x06, 0x01, 0x08, 0x0C, 0x0B, 0x08, 0x00, // 77
    0x00, 0x00, 0x82, 0x72, 0x0E, 0x38, 0xC0, 0x00, 0x00, 0xE2, 0x1E, 0x08, 0x0C, 0x0B, 0x08, 0x00, 0x00, 0x03, 0x0C, 0x07, 0x00, 0x00, // 78
    0xC0, 0x30, 0x08, 0x04, 0x02, 0x02, 0x02, 0x02, 0x84, 0x78, 0x03, 0x04, 0x08, 0x08, 0x08, 0x08, 0x04, 0x02, 0x01, 0x00, // 79
    0x00, 0x00, 0x80, 0x72, 0x4E, 0x42, 0x42, 0x42, 0x22, 0x1C, 0x08, 0x0C, 0x0B, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 80
    0xC0, 0x30, 0x08, 0x04, 0x02, 0x02, 0x02, 0x02, 0x84, 0x78, 0x47, 0x3C, 0x28, 0x28, 0x48, 0x44, 0x44, 0x22, 0x21, 0x00, // 81
    0x00, 0x00, 0x80, 0x72, 0x4E, 0xC2, 0x42, 0x22, 0x1C, 0x08, 0x0C, 0x0B, 0x08, 0x00, 0x00, 0x03, 0x0C, 0x08, // 82
    0x00, 0x00, 0x1C, 0x22, 0x42, 0x82, 0x04, 0x1C, 0x0C, 0x07, 0x04, 0x08, 0x08, 0x08, 0x07, 0x00, // 83
    0x08, 0x06, 0x02, 0x82, 0x72, 0x0E, 0x02, 0x02, 0x00, 0x08, 0x0C, 0x0B, 0x08, 0x00, 0x00, 0x00, // 84
    0x82, 0x72, 0x0E, 0x02, 0x02, 0x00, 0x00, 0x80, 0x72, 0x0E, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x04, 0x03, 0x00, 0x00, // 85
    0xC2, 0x3E, 0x02, 0x82, 0x40, 0x30, 0x0E, 0x06, 0x0F, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // 86
    0x82, 0x7E, 0x02, 0xC0, 0x32, 0x8A, 0x7E, 0x82, 0x42, 0x30, 0x0A, 0x0F, 0x06, 0x01, 0x00, 0x00, 0x0F, 0x06, 0x01, 0x00, 0x00, 0x00, // 87
    0x00, 0x00, 0x02, 0x02, 0x9E, 0xE2, 0x20, 0x10, 0x0A, 0x06, 0x08, 0x0C, 0x0A, 0x01, 0x00, 0x08, 0x0F, 0x08, 0x08, 0x00, // 88
    0x00, 0x02, 0x1E, 0xE2, 0x20, 0x10, 0x0A, 0x08, 0x08, 0x0F, 0x08, 0x00, 0x00, 0x00, // 89
    0x00, 0x00, 0x0E, 0x82, 0x42, 0x22, 0x1A, 0x06, 0x02, 0x08, 0x0C, 0x0B, 0x08, 0x08, 0x08, 0x0C, 0x02, 0x00, // 90
    0x00, 0x00, 0x80, 0x78, 0x06, 0x02, 0x02, 0x60, 0x5C, 0x43, 0x40, 0x00, 0x00, 0x00, // 91
    0x7E, 0xC0, 0x00, 0x0F, // 92
    0x00, 0x00, 0x00, 0x02, 0xC2, 0x3A, 0x06, 0x40, 0x40, 0x60, 0x1C, 0x03, 0x00, 0x00, // 93
    0x40, 0x30, 0x0C, 0x02, 0x0C, 0x30, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, // 95
    0x02, 0x0C, 0x00, 0x00, // 96
    0x00, 0x80, 0x40, 0x20, 0x20, 0xC0, 0x60, 0x0F, 0x08, 0x08, 0x04, 0x0E, 0x0B, 0x04, // 97
    0x00, 0x80, 0x72, 0x4E, 0x20, 0x20, 0xC0, 0x04, 0x0B, 0x08, 0x08, 0x04, 0x06, 0x01, // 98
    0x00, 0xC0, 0x40, 0x20, 0x20, 0x60, 0x07, 0x08, 0x08, 0x08, 0x04, 0x00, // 99
    0x00, 0x80, 0x40, 0x20, 0x20, 0xC0, 0x72, 0x0E, 0x0F, 0x08, 0x08, 0x04, 0x0E, 0x0B, 0x04, 0x00, // 100
    0x00, 0xC0, 0x40, 0x20, 0x20, 0xE0, 0x07, 0x0A, 0x0A, 0x09, 0x05, 0x00, // 101
    0x00, 0x20, 0xA0, 0x70, 0x2C, 0x20, 0x1C, 0x03, 0x00, 0x00, // 102
    0x00, 0xC0, 0x40, 0x20, 0x20, 0x20, 0xE0, 0x20, 0x30, 0x4D, 0x4A, 0x4A, 0x4A, 0x51, 0x30, 0x00, // 103
    0x00, 0x80, 0x72, 0x8E, 0x40, 0x20, 0xE0, 0x0C, 0x03, 0x01, 0x00, 0x0C, 0x0B, 0x04, // 104
    0x20, 0xA0, 0x64, 0x0C, 0x0B, 0x04, // 105
    0x00, 0x00, 0xA0, 0x64, 0x20, 0x1C, 0x03, 0x00, // 106
    0x00, 0x80, 0x72, 0x8E, 0x60, 0x20, 0x20, 0x20, 0x0C, 0x03, 0x01, 0x03, 0x0C, 0x08, 0x04, 0x00, // 107
    0x00, 0x80, 0x72, 0x0E, 0x0C, 0x0B, 0x04, 0x00, // 108
    0x00, 0xA0, 0x60, 0x80, 0x40, 0x20, 0xE0, 0x80, 0x40, 0x20, 0xE0, 0x0C, 0x03, 0x01, 0x00, 0x0C, 0x03, 0x01, 0x00, 0x0C, 0x0B, 0x04, // 109
    0x00, 0x20, 0xE0, 0x80, 0x40, 0x20, 0xE0, 0x0C, 0x03, 0x01, 0x00, 0x0C, 0x0B, 0x04, // 110
    0x00, 0xC0, 0x40, 0x20, 0x20, 0x20, 0xC0, 0x07, 0x08, 0x08, 0x08, 0x04, 0x06, 0x01, // 111
    0x20, 0xA0, 0xE0, 0x40, 0x20, 0x20, 0xC0, 0x5C, 0x0B, 0x08, 0x08, 0x04, 0x02, 0x01, // 112
    0x00, 0x80, 0x40, 0x20, 0x20, 0xC0, 0x60, 0x07, 0x08, 0x48, 0x64, 0x5E, 0x03, 0x00, // 113
    0x00, 0xA0, 0xE0, 0x40, 0x20, 0x60, 0x0C, 0x03, 0x00, 0x00, 0x00, 0x00, // 114
    0x00, 0xC0, 0x20, 0x20, 0x20, 0x60, 0x0E, 0x08, 0x09, 0x09, 0x06, 0x00, // 115
    0x00, 0xA0, 0x70, 0x28, 0x0C, 0x0B, 0x08, 0x04, // 116
    0x40, 0xA0, 0x60, 0x00, 0x00, 0x80, 0x60, 0x0C, 0x0B, 0x08, 0x04, 0x0E, 0x0B, 0x04, // 117
    0x20, 0x60, 0xC0, 0x00, 0x00, 0x20, 0xE0, 0x00, 0x00, 0x0F, 0x04, 0x02, 0x01, 0x00, // 118
    0x20, 0x60, 0xC0, 0x00, 0x00, 0x80, 0xE0, 0x00, 0x20, 0xE0, 0x00, 0x00, 0x0F, 0x02, 0x01, 0x00, 0x0F, 0x04, 0x03, 0x00, // 119
    0x00, 0x20, 0x20, 0xE0, 0x40, 0x20, 0x20, 0x08, 0x0C, 0x02, 0x01, 0x0E, 0x08, 0x00, // 120
    0x20, 0x60, 0xC0, 0x00, 0x00, 0xA0, 0x60, 0x20, 0x10, 0x0F, 0x04, 0x02, 0x01, 0x00, // 121
    0x40, 0x20, 0x20, 0xA0, 0x60, 0x20, 0x0C, 0x0A, 0x09, 0x08, 0x04, 0x00, // 122
    0x80, 0x40, 0x38, 0x0C, 0x02, 0x38, 0x47, 0x00, 0x00, 0x00, // 123
    0xFE, 0xFF, // 124
    0x00, 0x00, 0x00, 0xE2, 0x1C, 0x40, 0x30, 0x1C, 0x02, 0x01, // 125
    0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, // 126
    0xFE, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFE, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0F // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\utf8font10x16.h ===

/*
 * utf8font10x16 - utf8 font up to U+00FB
 * See here for full font information:
 * http://www.fileformat.info/info/charset/UTF-8/list.htm
 *
 * Font is called 10x16 even though the actual font is only 15 high
 * since font will use 16 vertical pixels (one pixel of pad between lines)
 *
 * Oringally created with FontCreator
 * written by F. Maximilian Thiele
 * Hand edited by Bill Perry
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : utf8font10x15.h
 * Date                : 31.08.2014
 * Font size in bytes  : 14641
 * Font width          : 10
 * Font height         : 15
 * Font first char     : 32
 * Font last char      : 252
 * Font used chars     : 220
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef UTF8FONT10x15_H
#define UTF8FONT10x15_H

#define UTF8FONT10x15_WIDTH 10
#define UTF8FONT10x15_HEIGHT 15

GLCDFONTDECL(utf8font10x16) = {
    0x39, 0x31, // size
    0x0A, // width
    0x0f, // height (does not include pad pixel between lines)
    0x20, // first char
    0xDC, // char count
    
    // char widths
    0x02, 0x02, 0x05, 0x05, 0x05, 0x08, 0x07, 0x02, 
    0x03, 0x02, 0x03, 0x06, 0x02, 0x03, 0x02, 0x03, 
    0x05, 0x03, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
    0x05, 0x05, 0x02, 0x02, 0x06, 0x06, 0x06, 0x05, 
    0x0A, 0x06, 0x06, 0x06, 0x06, 0x05, 0x05, 0x06, 
    0x06, 0x02, 0x04, 0x06, 0x05, 0x07, 0x06, 0x07, 
    0x06, 0x08, 0x07, 0x06, 0x06, 0x06, 0x06, 0x08, 
    0x07, 0x06, 0x05, 0x03, 0x03, 0x02, 0x05, 0x05, 
    0x02, 0x04, 0x05, 0x04, 0x05, 0x04, 0x03, 0x05, 
    0x05, 0x02, 0x02, 0x05, 0x02, 0x08, 0x05, 0x05, 
    0x05, 0x05, 0x04, 0x04, 0x03, 0x05, 0x05, 0x07, 
    0x05, 0x05, 0x04, 0x03, 0x02, 0x04, 0x06, 0x02, 
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
    0x00, 0x02, 0x05, 0x06, 0x05, 0x06, 0x02, 0x04, 
    0x03, 0x07, 0x03, 0x05, 0x05, 0x03, 0x07, 0x06, 
    0x04, 0x06, 0x03, 0x03, 0x02, 0x05, 0x05, 0x01, 
    0x03, 0x02, 0x03, 0x05, 0x08, 0x08, 0x08, 0x05, 
    0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x0A, 0x06, 
    0x05, 0x05, 0x06, 0x05, 0x02, 0x02, 0x03, 0x02, 
    0x06, 0x06, 0x07, 0x07, 0x07, 0x07, 0x07, 0x05, 
    0x07, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 
    0x04, 0x04, 0x05, 0x04, 0x04, 0x04, 0x08, 0x04, 
    0x04, 0x04, 0x05, 0x04, 0x02, 0x02, 0x03, 0x02, 
    0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x06, 
    0x05, 0x05, 0x05, 0x05, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, // 0x20 <space>
    0xF8, 0xF8, 0x16, 0x16, // 33
    0x38, 0x38, 0x00, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, // 34
    0x20, 0xE0, 0x38, 0xE0, 0x38, 0x1C, 0x06, 0x1C, 0x06, 0x04, // 35
    0x70, 0xC8, 0xFC, 0x88, 0x10, 0x0C, 0x18, 0x3E, 0x12, 0x0E, // 36
    0x78, 0x48, 0x78, 0x80, 0x60, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x06, 0x00, 0x1E, 0x12, 0x1E, // 37
    0x00, 0xB0, 0xF8, 0xC8, 0x78, 0x30, 0x00, 0x0E, 0x1E, 0x12, 0x12, 0x1E, 0x1C, 0x0A, // 38
    0x38, 0x38, 0x00, 0x00, // 39
    0xC0, 0xF0, 0x18, 0x0E, 0x3E, 0x60, // 40
    0xF0, 0xC0, 0x3E, 0x0E, // 41
    0x50, 0x38, 0x50, 0x00, 0x00, 0x00, // 42
    0x80, 0x80, 0xE0, 0xE0, 0x80, 0x80, 0x02, 0x02, 0x0E, 0x0E, 0x02, 0x02, // 43
    0x00, 0x00, 0x50, 0x30, // 44
    0x00, 0x00, 0x00, 0x04, 0x04, 0x04, // 45
    0x00, 0x00, 0x10, 0x10, // 46
    0x80, 0xF8, 0xF8, 0x1E, 0x1E, 0x00, // 47
    0xF0, 0xF8, 0x08, 0xF8, 0xF0, 0x0E, 0x1E, 0x10, 0x1E, 0x0E, // 48
    0x60, 0xF0, 0xF8, 0x00, 0x1E, 0x1E, // 49
    0x10, 0x18, 0x88, 0xF8, 0xF0, 0x18, 0x1E, 0x16, 0x12, 0x10, // 50
    0x10, 0x18, 0x88, 0xF8, 0x70, 0x08, 0x18, 0x10, 0x1E, 0x0E, // 51
    0x80, 0x60, 0xF8, 0xF8, 0x00, 0x06, 0x04, 0x1E, 0x1E, 0x04, // 52
    0xC0, 0x78, 0x48, 0xC8, 0x88, 0x08, 0x18, 0x10, 0x1E, 0x0E, // 53
    0xE0, 0xF8, 0x48, 0xD8, 0x90, 0x0E, 0x1E, 0x10, 0x1E, 0x0E, // 54
    0x08, 0x08, 0xE8, 0xF8, 0x18, 0x00, 0x1E, 0x1E, 0x00, 0x00, // 55
    0x70, 0x78, 0x88, 0x78, 0x70, 0x0E, 0x1E, 0x10, 0x1E, 0x0E, // 56
    0xF0, 0xF8, 0x08, 0xF8, 0xF0, 0x08, 0x1A, 0x12, 0x1E, 0x06, // 57
    0x40, 0x40, 0x10, 0x10, // 58
    0x40, 0x40, 0x50, 0x30, // 59
    0x80, 0x80, 0xC0, 0xC0, 0xC0, 0x60, 0x06, 0x06, 0x0C, 0x0C, 0x0C, 0x18, // 60
    0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, // 61
    0x60, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x18, 0x0C, 0x0C, 0x0C, 0x06, 0x06, // 62
    0x10, 0x18, 0x88, 0xF8, 0xF0, 0x00, 0x00, 0x16, 0x16, 0x00, // 63
    0xC0, 0x20, 0x10, 0x88, 0x48, 0x48, 0x48, 0xD8, 0x30, 0xE0, 0x0E, 0x30, 0x2E, 0x50, 0x50, 0x50, 0x5E, 0x50, 0x28, 0x16, // 64
    0x00, 0xE0, 0x38, 0x38, 0xE0, 0x00, 0x1C, 0x1E, 0x02, 0x02, 0x1E, 0x1C, // 65
    0xF8, 0xF8, 0x88, 0x88, 0xF8, 0x70, 0x1E, 0x1E, 0x10, 0x10, 0x1E, 0x0E, // 66
    0xF0, 0xF8, 0x08, 0x08, 0x18, 0x10, 0x0E, 0x1E, 0x10, 0x10, 0x1C, 0x0C, // 67
    0xF8, 0xF8, 0x08, 0x08, 0xF8, 0xF0, 0x1E, 0x1E, 0x10, 0x10, 0x1E, 0x0E, // 68
    0xF8, 0xF8, 0x88, 0x88, 0x88, 0x1E, 0x1E, 0x10, 0x10, 0x10, // 69
    0xF8, 0xF8, 0x88, 0x88, 0x88, 0x1E, 0x1E, 0x00, 0x00, 0x00, // 70
    0xF0, 0xF8, 0x08, 0x88, 0x98, 0x90, 0x0E, 0x1E, 0x10, 0x10, 0x1E, 0x0E, // 71
    0xF8, 0xF8, 0x80, 0x80, 0xF8, 0xF8, 0x1E, 0x1E, 0x00, 0x00, 0x1E, 0x1E, // 72
    0xF8, 0xF8, 0x1E, 0x1E, // 73
    0x00, 0x00, 0xF8, 0xF8, 0x0C, 0x10, 0x1E, 0x0E, // 74
    0xF8, 0xF8, 0xC0, 0xF0, 0xB8, 0x08, 0x1E, 0x1E, 0x00, 0x02, 0x1E, 0x1C, // 75
    0xF8, 0xF8, 0x00, 0x00, 0x00, 0x1E, 0x1E, 0x10, 0x10, 0x10, // 76
    0xF8, 0xF8, 0xC0, 0x00, 0xC0, 0xF8, 0xF8, 0x1E, 0x1E, 0x02, 0x1E, 0x00, 0x1E, 0x1E, // 77
    0xF8, 0xF8, 0xF0, 0x80, 0xF8, 0xF8, 0x1E, 0x1E, 0x00, 0x0E, 0x1E, 0x1E, // 78
    0xE0, 0xF0, 0x18, 0x08, 0x18, 0xF0, 0xE0, 0x06, 0x0E, 0x18, 0x10, 0x18, 0x0E, 0x06, // 79
    0xF8, 0xF8, 0x08, 0x08, 0xF8, 0xF0, 0x1E, 0x1E, 0x02, 0x02, 0x02, 0x00, // 80
    0xE0, 0xF0, 0x18, 0x08, 0x18, 0xF0, 0xE0, 0x00, 0x06, 0x0E, 0x18, 0x14, 0x18, 0x1E, 0x3E, 0x30, // 81
    0xF8, 0xF8, 0x88, 0x88, 0xF8, 0x70, 0x00, 0x1E, 0x1E, 0x00, 0x02, 0x0E, 0x1C, 0x10, // 82
    0x70, 0xF8, 0xC8, 0x88, 0xB8, 0x30, 0x0C, 0x1C, 0x10, 0x12, 0x1E, 0x0E, // 83
    0x08, 0x08, 0xF8, 0xF8, 0x08, 0x08, 0x00, 0x00, 0x1E, 0x1E, 0x00, 0x00, // 84
    0xF8, 0xF8, 0x00, 0x00, 0xF8, 0xF8, 0x0E, 0x1E, 0x10, 0x10, 0x1E, 0x0E, // 85
    0x38, 0xF8, 0x80, 0x80, 0xF8, 0x38, 0x00, 0x06, 0x1E, 0x1E, 0x06, 0x00, // 86
    0xF8, 0xF8, 0x00, 0xF8, 0xF8, 0x00, 0xF8, 0xF8, 0x06, 0x1E, 0x1C, 0x02, 0x06, 0x18, 0x1E, 0x06, // 87
    0x08, 0x38, 0xF0, 0xC0, 0xF0, 0x38, 0x08, 0x10, 0x1C, 0x0E, 0x06, 0x0E, 0x1C, 0x10, // 88
    0x18, 0x78, 0xE0, 0xE0, 0x78, 0x18, 0x00, 0x00, 0x1E, 0x1E, 0x00, 0x00, // 89
    0x08, 0x88, 0xE8, 0x78, 0x18, 0x18, 0x1E, 0x16, 0x10, 0x10, // 90
    0xF8, 0xF8, 0x08, 0x7E, 0x7E, 0x40, // 91
    0xF8, 0xF8, 0x80, 0x00, 0x1E, 0x1E, // 92
    0xF8, 0xF8, 0x7E, 0x7E, // 93
    0xE0, 0xF8, 0x18, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, // 95
    0x08, 0x18, 0x00, 0x00, // 96
    0x40, 0x40, 0xC0, 0x80, 0x1C, 0x12, 0x1E, 0x1E, // 97
    0xF8, 0xF8, 0x40, 0xC0, 0x80, 0x1E, 0x1E, 0x10, 0x1E, 0x0E, // 98
    0x80, 0xC0, 0x40, 0x80, 0x0E, 0x1E, 0x10, 0x08, // 99
    0x80, 0xC0, 0x40, 0xF8, 0xF8, 0x0E, 0x1E, 0x10, 0x1E, 0x1E, // 100
    0x80, 0xC0, 0x40, 0x80, 0x0E, 0x1E, 0x12, 0x0A, // 101
    0xF0, 0xF8, 0x48, 0x1E, 0x1E, 0x00, // 102
    0x80, 0xC0, 0x40, 0xC0, 0xC0, 0x2E, 0x7E, 0x50, 0x7E, 0x3E, // 103
    0xF8, 0xF8, 0x40, 0xC0, 0x80, 0x1E, 0x1E, 0x00, 0x1E, 0x1E, // 104
    0xD8, 0xD8, 0x1E, 0x1E, // 105
    0xD8, 0xD8, 0x7E, 0x3E, // 106
    0xF8, 0xF8, 0x80, 0xC0, 0x00, 0x1E, 0x1E, 0x06, 0x1E, 0x18, // 107
    0xF8, 0xF8, 0x1E, 0x1E, // 108
    0xC0, 0xC0, 0x40, 0xC0, 0x80, 0x40, 0xC0, 0x80, 0x1E, 0x1E, 0x00, 0x1E, 0x1E, 0x00, 0x1E, 0x1E, // 109
    0xC0, 0xC0, 0x40, 0xC0, 0x80, 0x1E, 0x1E, 0x00, 0x1E, 0x1E, // 110
    0x80, 0xC0, 0x40, 0xC0, 0x80, 0x0E, 0x1E, 0x10, 0x1E, 0x0E, // 111
    0xC0, 0xC0, 0x40, 0xC0, 0x80, 0x7E, 0x7E, 0x10, 0x1E, 0x0E, // 112
    0x80, 0xC0, 0x40, 0xC0, 0xC0, 0x0E, 0x1E, 0x10, 0x7E, 0x7E, // 113
    0xC0, 0xC0, 0x40, 0x40, 0x1E, 0x1E, 0x00, 0x00, // 114
    0x80, 0xC0, 0x40, 0x80, 0x0A, 0x12, 0x1E, 0x0E, // 115
    0xE0, 0xF0, 0x40, 0x0E, 0x1E, 0x10, // 116
    0xC0, 0xC0, 0x00, 0xC0, 0xC0, 0x0E, 0x1E, 0x10, 0x1E, 0x1E, // 117
    0xC0, 0xC0, 0x00, 0xC0, 0xC0, 0x00, 0x1E, 0x18, 0x1E, 0x00, // 118
    0xC0, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0xC0, 0x02, 0x1E, 0x1C, 0x02, 0x1C, 0x1E, 0x02, // 119
    0x40, 0xC0, 0x00, 0xC0, 0x40, 0x10, 0x1A, 0x06, 0x18, 0x10, // 120
    0xC0, 0xC0, 0x00, 0xC0, 0xC0, 0x40, 0x4E, 0x3C, 0x0E, 0x00, // 121
    0x40, 0x40, 0xC0, 0xC0, 0x18, 0x1E, 0x16, 0x10, // 122
    0xF0, 0xF8, 0x08, 0x3E, 0x7C, 0x40, // 123
    0xF8, 0xF8, 0x7E, 0x7E, // 124
    0x08, 0xF8, 0xF0, 0x00, 0x40, 0x7C, 0x3E, 0x02, // 125
    0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x02, 0x02, 0x02, // 126
    0xF0, 0xF0, 0x1E, 0x1E, // 127
    0xF0, 0xF0, 0x1E, 0x1E, // 128
    0xF0, 0xF0, 0x1E, 0x1E, // 129
    0xF0, 0xF0, 0x1E, 0x1E, // 130
    0xF0, 0xF0, 0x1E, 0x1E, // 131
    0xF0, 0xF0, 0x1E, 0x1E, // 132
    0xF0, 0xF0, 0x1E, 0x1E, // 133
    0xF0, 0xF0, 0x1E, 0x1E, // 134
    0xF0, 0xF0, 0x1E, 0x1E, // 135
    0xF0, 0xF0, 0x1E, 0x1E, // 136
    0xF0, 0xF0, 0x1E, 0x1E, // 137
    0xF0, 0xF0, 0x1E, 0x1E, // 138
    0xF0, 0xF0, 0x1E, 0x1E, // 139
    0xF0, 0xF0, 0x1E, 0x1E, // 140
    0xF0, 0xF0, 0x1E, 0x1E, // 141
    0xF0, 0xF0, 0x1E, 0x1E, // 142
    0xF0, 0xF0, 0x1E, 0x1E, // 143
    0xF0, 0xF0, 0x1E, 0x1E, // 144
    0xF0, 0xF0, 0x1E, 0x1E, // 145
    0xF0, 0xF0, 0x1E, 0x1E, // 146
    0xF0, 0xF0, 0x1E, 0x1E, // 147
    0xF0, 0xF0, 0x1E, 0x1E, // 148
    0xF0, 0xF0, 0x1E, 0x1E, // 149
    0xF0, 0xF0, 0x1E, 0x1E, // 150
    0xF0, 0xF0, 0x1E, 0x1E, // 151
    0xF0, 0xF0, 0x1E, 0x1E, // 152
    0xF0, 0xF0, 0x1E, 0x1E, // 153
    0xF0, 0xF0, 0x1E, 0x1E, // 154
    0xF0, 0xF0, 0x1E, 0x1E, // 155
    0xF0, 0xF0, 0x1E, 0x1E, // 156
    0xF0, 0xF0, 0x1E, 0x1E, // 157
    0xF0, 0xF0, 0x1E, 0x1E, // 158
    0xF0, 0xF0, 0x1E, 0x1E, // 159
    0x40, 0x40, 0x7E, 0x7E, // 161
    0x80, 0xC0, 0xC0, 0xF8, 0x80, 0x0E, 0x7E, 0x1E, 0x18, 0x08, // 162
    0x80, 0xF0, 0xF8, 0x88, 0x18, 0x10, 0x18, 0x1E, 0x16, 0x10, 0x10, 0x10, // 163
    0x20, 0xF0, 0x20, 0x20, 0xF0, 0x04, 0x0E, 0x04, 0x04, 0x0E, // 164
    0x88, 0xF8, 0xE0, 0xE0, 0xF8, 0x88, 0x04, 0x04, 0x1E, 0x1E, 0x04, 0x04, // 165
    0xF8, 0xF8, 0x7C, 0x7C, // 166
    0xB0, 0x48, 0xC8, 0x90, 0x26, 0x4C, 0x48, 0x36, // 167
    0x10, 0x00, 0x10, 0x00, 0x00, 0x00, // 168
    0xE0, 0x10, 0xC8, 0x28, 0x48, 0x10, 0xE0, 0x06, 0x08, 0x12, 0x14, 0x12, 0x08, 0x06, // 169
    0x68, 0x68, 0x78, 0x00, 0x00, 0x00, // 170
    0xC0, 0x40, 0x00, 0xC0, 0x40, 0x0E, 0x18, 0x02, 0x0E, 0x18, // 171
    0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x0E, 0x0E, // 172
    0x00, 0x00, 0x00, 0x04, 0x04, 0x04, // 173
    0xE0, 0x10, 0xE8, 0xA8, 0x68, 0x10, 0xE0, 0x06, 0x08, 0x16, 0x10, 0x16, 0x08, 0x06, // 174
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 175
    0x30, 0x48, 0x48, 0x30, 0x00, 0x00, 0x00, 0x00, // 176
    0x60, 0x60, 0xF8, 0xF8, 0x60, 0x60, 0x18, 0x18, 0x1A, 0x1A, 0x18, 0x18, // 177
    0x48, 0x68, 0x58, 0x00, 0x00, 0x00, // 178
    0x48, 0x58, 0x78, 0x00, 0x00, 0x00, // 179
    0x18, 0x08, 0x00, 0x00, // 180
    0xC0, 0xC0, 0x00, 0xC0, 0xC0, 0x7E, 0x7E, 0x10, 0x1E, 0x1E, // 181
    0xF0, 0xF8, 0x08, 0xF8, 0x08, 0x00, 0x7E, 0x00, 0x7E, 0x00, // 182
    0x00, 0x02, // 183
    0x00, 0x00, 0x00, 0xA0, 0xA0, 0xE0, // 184
    0x10, 0x78, 0x00, 0x00, // 185
    0x78, 0x48, 0x78, 0x00, 0x00, 0x00, // 186
    0xC0, 0x80, 0x00, 0xC0, 0x80, 0x10, 0x1E, 0x04, 0x10, 0x1E, // 187
    0x10, 0x78, 0x00, 0x80, 0x40, 0x30, 0x08, 0x00, 0x00, 0x10, 0x0C, 0x02, 0x00, 0x0C, 0x1E, 0x08, // 188
    0x10, 0x78, 0x00, 0x80, 0x40, 0x30, 0x08, 0x00, 0x00, 0x10, 0x0C, 0x02, 0x00, 0x12, 0x1A, 0x16, // 189
    0x48, 0x58, 0x78, 0x80, 0x40, 0x30, 0x08, 0x00, 0x00, 0x10, 0x0C, 0x02, 0x00, 0x0C, 0x1E, 0x08, // 190
    0x00, 0x40, 0x40, 0x00, 0x00, 0x38, 0x7E, 0x46, 0x60, 0x20, // 191
    0x00, 0xE0, 0x39, 0x3B, 0xE0, 0x00, 0x1C, 0x1E, 0x02, 0x02, 0x1E, 0x1C, // 192
    0x00, 0xE0, 0x3B, 0x39, 0xE0, 0x00, 0x1C, 0x1E, 0x02, 0x02, 0x1E, 0x1C, // 193
    0x00, 0xE2, 0x3B, 0x39, 0xE3, 0x02, 0x1C, 0x1E, 0x02, 0x02, 0x1E, 0x1C, // 194
    0x00, 0xE3, 0x39, 0x3A, 0xE3, 0x00, 0x1C, 0x1E, 0x02, 0x02, 0x1E, 0x1C, // 195
    0x00, 0xE2, 0x38, 0x3A, 0xE0, 0x00, 0x1C, 0x1E, 0x02, 0x02, 0x1E, 0x1C, // 196
    0x00, 0xE0, 0x3B, 0x3B, 0xE0, 0x00, 0x1C, 0x1E, 0x02, 0x02, 0x1E, 0x1C, // 197
    0x00, 0xE0, 0xF8, 0x98, 0xF8, 0xF8, 0x48, 0x48, 0x48, 0x48, 0x1E, 0x0E, 0x00, 0x00, 0x1E, 0x1E, 0x10, 0x10, 0x10, 0x10, // 198
    0xF0, 0xF8, 0x08, 0x08, 0x18, 0x10, 0x0E, 0xBE, 0xB0, 0xF0, 0x1C, 0x0C, // 199
    0xF8, 0xF9, 0x8B, 0x88, 0x88, 0x1E, 0x1E, 0x10, 0x10, 0x10, // 200
    0xF8, 0xF8, 0x8B, 0x89, 0x88, 0x1E, 0x1E, 0x10, 0x10, 0x10, // 201
    0xF8, 0xFA, 0x8B, 0x89, 0x8B, 0x02, 0x1E, 0x1E, 0x10, 0x10, 0x10, 0x00, // 202
    0xF8, 0xFA, 0x88, 0x8A, 0x88, 0x1E, 0x1E, 0x10, 0x10, 0x10, // 203
    0xF9, 0xFB, 0x1E, 0x1E, // 204
    0xFB, 0xF9, 0x1E, 0x1E, // 205
    0xFB, 0xF9, 0x03, 0x1E, 0x1E, 0x00, // 206
    0xF8, 0xFA, 0x1E, 0x1E, // 207
    0xF8, 0xF8, 0x88, 0x08, 0xF8, 0xF0, 0x1E, 0x1E, 0x10, 0x10, 0x1E, 0x0E, // 208
    0xF8, 0xFB, 0xF1, 0x82, 0xFB, 0xF8, 0x1E, 0x1E, 0x00, 0x0E, 0x1E, 0x1E, // 209
    0xE0, 0xF0, 0x18, 0x09, 0x1B, 0xF0, 0xE0, 0x06, 0x0E, 0x18, 0x10, 0x18, 0x0E, 0x06, // 210
    0xE0, 0xF0, 0x1B, 0x09, 0x18, 0xF0, 0xE0, 0x06, 0x0E, 0x18, 0x10, 0x18, 0x0E, 0x06, // 211
    0xE0, 0xF2, 0x1B, 0x09, 0x1B, 0xF2, 0xE0, 0x06, 0x0E, 0x18, 0x10, 0x18, 0x0E, 0x06, // 212
    0xE0, 0xF3, 0x19, 0x0A, 0x1B, 0xF0, 0xE0, 0x06, 0x0E, 0x18, 0x10, 0x18, 0x0E, 0x06, // 213
    0xE0, 0xF0, 0x1A, 0x08, 0x1A, 0xF0, 0xE0, 0x06, 0x0E, 0x18, 0x10, 0x18, 0x0E, 0x06, // 214
    0x40, 0xE0, 0x80, 0xE0, 0x40, 0x04, 0x0E, 0x02, 0x0E, 0x04, // 215
    0xE0, 0xF0, 0x18, 0xC8, 0x78, 0xF0, 0xE8, 0x16, 0x0E, 0x1E, 0x12, 0x18, 0x0E, 0x06, // 216
    0xF8, 0xF8, 0x01, 0x03, 0xF8, 0xF8, 0x0E, 0x1E, 0x10, 0x10, 0x1E, 0x0E, // 217
    0xF8, 0xF8, 0x03, 0x01, 0xF8, 0xF8, 0x0E, 0x1E, 0x10, 0x10, 0x1E, 0x0E, // 218
    0xF8, 0xFA, 0x03, 0x01, 0xFB, 0xFA, 0x0E, 0x1E, 0x10, 0x10, 0x1E, 0x0E, // 219
    0xF8, 0xFA, 0x00, 0x02, 0xF8, 0xF8, 0x0E, 0x1E, 0x10, 0x10, 0x1E, 0x0E, // 220
    0x18, 0x78, 0xE3, 0xE1, 0x78, 0x18, 0x00, 0x00, 0x1E, 0x1E, 0x00, 0x00, // 221
    0xF8, 0xF8, 0x20, 0x20, 0xE0, 0xC0, 0x1E, 0x1E, 0x04, 0x04, 0x06, 0x02, // 222
    0xF0, 0xF8, 0xC8, 0xF8, 0x30, 0x00, 0x1E, 0x1E, 0x00, 0x12, 0x1E, 0x0C, // 223
    0x40, 0x48, 0xD8, 0x80, 0x1C, 0x12, 0x1E, 0x1E, // 224
    0x40, 0x58, 0xC8, 0x80, 0x1C, 0x12, 0x1E, 0x1E, // 225
    0x50, 0x58, 0xC8, 0x98, 0x10, 0x1C, 0x12, 0x1E, 0x1E, 0x00, // 226
    0x58, 0x48, 0xD0, 0x98, 0x1C, 0x12, 0x1E, 0x1E, // 227
    0x50, 0x40, 0xD0, 0x80, 0x1C, 0x12, 0x1E, 0x1E, // 228
    0x40, 0x58, 0xD8, 0x80, 0x1C, 0x12, 0x1E, 0x1E, // 229
    0x40, 0x40, 0x40, 0xC0, 0xC0, 0x40, 0xC0, 0x80, 0x1C, 0x1E, 0x12, 0x0E, 0x1E, 0x12, 0x1A, 0x0A, // 230
    0x80, 0xC0, 0x40, 0x80, 0xAE, 0xBE, 0xF0, 0x08, // 231
    0x80, 0xC8, 0x58, 0x80, 0x0E, 0x1E, 0x12, 0x0A, // 232
    0x80, 0xD8, 0x48, 0x80, 0x0E, 0x1E, 0x12, 0x0A, // 233
    0x90, 0xD8, 0x48, 0x98, 0x10, 0x0E, 0x1E, 0x12, 0x0A, 0x00, // 234
    0x90, 0xC0, 0x50, 0x80, 0x0E, 0x1E, 0x12, 0x0A, // 235
    0xC8, 0xD8, 0x1E, 0x1E, // 236
    0xD8, 0xC8, 0x1E, 0x1E, // 237
    0xD8, 0xC8, 0x18, 0x1E, 0x1E, 0x00, // 238
    0xC0, 0xD0, 0x1E, 0x1E, // 239
    0x80, 0xE0, 0x58, 0xF8, 0xC0, 0x0E, 0x1E, 0x10, 0x1E, 0x0E, // 240
    0xD8, 0xC8, 0x50, 0xD8, 0x80, 0x1E, 0x1E, 0x00, 0x1E, 0x1E, // 241
    0x80, 0xC0, 0x48, 0xD8, 0x80, 0x0E, 0x1E, 0x10, 0x1E, 0x0E, // 242
    0x80, 0xD8, 0x48, 0xC0, 0x80, 0x0E, 0x1E, 0x10, 0x1E, 0x0E, // 243
    0x90, 0xD8, 0x48, 0xD8, 0x90, 0x0E, 0x1E, 0x10, 0x1E, 0x0E, // 244
    0x98, 0xC8, 0x50, 0xD8, 0x80, 0x0E, 0x1E, 0x10, 0x1E, 0x0E, // 245
    0x80, 0xD0, 0x40, 0xD0, 0x80, 0x0E, 0x1E, 0x10, 0x1E, 0x0E, // 246
    0x80, 0x80, 0xA0, 0xA0, 0x80, 0x80, 0x02, 0x02, 0x0A, 0x0A, 0x02, 0x02, // 247
    0x80, 0xC0, 0x40, 0xC0, 0xC0, 0x1E, 0x1E, 0x16, 0x1E, 0x0E, // 248
    0xC0, 0xC0, 0x08, 0xD8, 0xC0, 0x0E, 0x1E, 0x10, 0x1E, 0x1E, // 249
    0xC0, 0xD8, 0x08, 0xC0, 0xC0, 0x0E, 0x1E, 0x10, 0x1E, 0x1E, // 250
    0xD0, 0xD8, 0x08, 0xD8, 0xD0, 0x0E, 0x1E, 0x10, 0x1E, 0x1E // 251
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Verdana12.h ===

/*
 *
 * Verdana12
 *
 * created with GLCDFontCreator
 * original framework by F. Maximilian Thiele
 * Modified By Siddharth Kaul
 *
 *
 * File Name           : Verdana12.h
 * Date                : 10.11.2012
 * Font size in bytes  : 6546
 * Font width          : 10
 * Font height         : 12
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef _Verdana12_H
#define _Verdana12_H

#define _Verdana12_WIDTH 10
#define _Verdana12_HEIGHT 12

GLCDFONTDECL(Verdana12) = {
    0x19, 0x92, // size
    0x0A, // width
    0x0C, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x02, 0x01, 0x04, 0x08, 0x06, 0x0B, 0x08, 0x01, 0x03, 0x03, 
    0x05, 0x07, 0x02, 0x04, 0x01, 0x05, 0x06, 0x05, 0x06, 0x06, 
    0x07, 0x06, 0x06, 0x06, 0x06, 0x06, 0x01, 0x02, 0x07, 0x07, 
    0x07, 0x05, 0x0A, 0x08, 0x06, 0x07, 0x07, 0x06, 0x06, 0x07, 
    0x07, 0x03, 0x04, 0x06, 0x06, 0x08, 0x07, 0x08, 0x06, 0x08, 
    0x07, 0x06, 0x07, 0x07, 0x08, 0x0B, 0x06, 0x07, 0x06, 0x03, 
    0x05, 0x03, 0x08, 0x08, 0x02, 0x06, 0x06, 0x05, 0x06, 0x06, 
    0x04, 0x06, 0x06, 0x01, 0x03, 0x05, 0x01, 0x09, 0x06, 0x06, 
    0x06, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x09, 0x05, 0x05, 
    0x05, 0x05, 0x01, 0x05, 0x08, 0x09, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, // 0x20 <space>
    0xFE, 0x20, // 33
    0x07, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, // 34
    0x80, 0x90, 0xF8, 0x96, 0x90, 0xF8, 0x96, 0x10, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, // 35
    0x18, 0x24, 0xFF, 0x44, 0x44, 0x84, 0x20, 0x20, 0xF0, 0x20, 0x20, 0x10, // 36
    0x1C, 0x22, 0x22, 0x1C, 0x80, 0x70, 0x0C, 0xC2, 0x20, 0x20, 0xC0, 0x00, 0x00, 0x00, 0x20, 0x10, 0x00, 0x00, 0x10, 0x20, 0x20, 0x10, // 37
    0xDC, 0x22, 0x22, 0x22, 0x5C, 0x80, 0x60, 0x00, 0x10, 0x20, 0x20, 0x20, 0x20, 0x10, 0x10, 0x20, // 38
    0x07, 0x00, // 39
    0xF8, 0x06, 0x01, 0x10, 0x60, 0x80, // 40
    0x01, 0x06, 0xF8, 0x80, 0x60, 0x10, // 41
    0x0A, 0x04, 0x1F, 0x04, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, // 42
    0x40, 0x40, 0x40, 0xF8, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, // 43
    0x00, 0x00, 0x80, 0x70, // 44
    0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, // 45
    0x00, 0x30, // 46
    0x00, 0x00, 0xE0, 0x1C, 0x03, 0x80, 0x70, 0x00, 0x00, 0x00, // 47
    0xFC, 0x02, 0x02, 0x02, 0x02, 0xFC, 0x10, 0x20, 0x20, 0x20, 0x20, 0x10, // 48
    0x04, 0x04, 0xFE, 0x00, 0x00, 0x20, 0x20, 0x30, 0x20, 0x20, // 49
    0x0C, 0x82, 0x42, 0x42, 0x22, 0x1C, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, // 50
    0x04, 0x02, 0x22, 0x22, 0x22, 0xDC, 0x10, 0x20, 0x20, 0x20, 0x20, 0x10, // 51
    0x60, 0x50, 0x48, 0x44, 0xFE, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, // 52
    0x1E, 0x12, 0x12, 0x12, 0x12, 0xE2, 0x10, 0x20, 0x20, 0x20, 0x20, 0x10, // 53
    0xF8, 0x14, 0x12, 0x12, 0x12, 0xE0, 0x10, 0x20, 0x20, 0x20, 0x20, 0x10, // 54
    0x02, 0x02, 0x82, 0x62, 0x1A, 0x06, 0x00, 0x20, 0x10, 0x00, 0x00, 0x00, // 55
    0xDC, 0x22, 0x22, 0x22, 0x22, 0xDC, 0x10, 0x20, 0x20, 0x20, 0x20, 0x10, // 56
    0x3C, 0x42, 0x42, 0x42, 0x42, 0xFC, 0x00, 0x20, 0x20, 0x20, 0x10, 0x00, // 57
    0x18, 0x30, // 58
    0x00, 0x18, 0x80, 0x70, // 59
    0x40, 0xA0, 0xA0, 0x10, 0x10, 0x08, 0x08, 0x00, 0x00, 0x00, 0x10, 0x10, 0x20, 0x20, // 60
    0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 61
    0x08, 0x08, 0x10, 0x10, 0xA0, 0xA0, 0x40, 0x20, 0x20, 0x10, 0x10, 0x00, 0x00, 0x00, // 62
    0x04, 0x02, 0xE2, 0x22, 0x1C, 0x00, 0x00, 0x20, 0x00, 0x00, // 63
    0xF0, 0x0C, 0x04, 0xF2, 0x0A, 0x0A, 0xFA, 0x04, 0x0C, 0xF0, 0x00, 0x30, 0x20, 0x40, 0x50, 0x50, 0x50, 0x10, 0x10, 0x00, // 64
    0x00, 0xE0, 0x98, 0x86, 0x86, 0x98, 0xE0, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, // 65
    0xFE, 0x22, 0x22, 0x22, 0x3C, 0xC0, 0x30, 0x20, 0x20, 0x20, 0x20, 0x10, // 66
    0xF8, 0x04, 0x02, 0x02, 0x02, 0x02, 0x04, 0x00, 0x10, 0x20, 0x20, 0x20, 0x20, 0x10, // 67
    0xFE, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF8, 0x30, 0x20, 0x20, 0x20, 0x20, 0x10, 0x00, // 68
    0xFE, 0x22, 0x22, 0x22, 0x22, 0x22, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, // 69
    0xFE, 0x22, 0x22, 0x22, 0x22, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, // 70
    0xF8, 0x04, 0x02, 0x02, 0x22, 0x22, 0xE4, 0x00, 0x10, 0x20, 0x20, 0x20, 0x20, 0x10, // 71
    0xFE, 0x20, 0x20, 0x20, 0x20, 0x20, 0xFE, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, // 72
    0x02, 0xFE, 0x02, 0x20, 0x30, 0x20, // 73
    0x00, 0x02, 0x02, 0xFE, 0x20, 0x20, 0x20, 0x10, // 74
    0xFE, 0x20, 0x50, 0x88, 0x04, 0x02, 0x30, 0x00, 0x00, 0x00, 0x10, 0x20, // 75
    0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, // 76
    0xFE, 0x06, 0x38, 0xC0, 0xC0, 0x38, 0x06, 0xFE, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, // 77
    0xFE, 0x06, 0x18, 0x20, 0xC0, 0x00, 0xFE, 0x30, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, // 78
    0xF8, 0x04, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF8, 0x00, 0x10, 0x20, 0x20, 0x20, 0x20, 0x10, 0x00, // 79
    0xFE, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, // 80
    0xF8, 0x04, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF8, 0x00, 0x10, 0x20, 0x20, 0x20, 0x60, 0x90, 0x80, // 81
    0xFE, 0x22, 0x22, 0x62, 0xA2, 0x1C, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, // 82
    0x1C, 0x22, 0x22, 0x22, 0x22, 0xC4, 0x10, 0x20, 0x20, 0x20, 0x20, 0x10, // 83
    0x02, 0x02, 0x02, 0xFE, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, // 84
    0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x10, 0x20, 0x20, 0x20, 0x10, 0x00, // 85
    0x06, 0x38, 0xC0, 0x00, 0x00, 0xC0, 0x38, 0x06, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, // 86
    0x1E, 0xE0, 0x00, 0xC0, 0x38, 0x06, 0x38, 0xC0, 0x00, 0xE0, 0x1E, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, // 87
    0x06, 0x88, 0x70, 0x70, 0x88, 0x06, 0x30, 0x00, 0x00, 0x00, 0x00, 0x30, // 88
    0x02, 0x0C, 0x10, 0xE0, 0x10, 0x0C, 0x02, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, // 89
    0x02, 0x82, 0x62, 0x12, 0x0A, 0x06, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, // 90
    0xFF, 0x01, 0x01, 0xF0, 0x80, 0x80, // 91
    0x03, 0x1C, 0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x30, 0xC0, // 92
    0x01, 0x01, 0xFF, 0x80, 0x80, 0xF0, // 93
    0x10, 0x08, 0x04, 0x02, 0x02, 0x04, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, // 95
    0x01, 0x02, 0x00, 0x00, // 96
    0x80, 0x48, 0x48, 0x48, 0x48, 0xF0, 0x10, 0x20, 0x20, 0x20, 0x20, 0x30, // 97
    0xFF, 0x10, 0x08, 0x08, 0x08, 0xF0, 0x30, 0x20, 0x20, 0x20, 0x20, 0x10, // 98
    0xF0, 0x08, 0x08, 0x08, 0x10, 0x10, 0x20, 0x20, 0x20, 0x10, // 99
    0xF0, 0x08, 0x08, 0x08, 0x08, 0xFF, 0x10, 0x20, 0x20, 0x20, 0x10, 0x30, // 100
    0xF0, 0x48, 0x48, 0x48, 0x48, 0x70, 0x10, 0x20, 0x20, 0x20, 0x20, 0x10, // 101
    0x08, 0xFE, 0x09, 0x09, 0x00, 0x30, 0x00, 0x00, // 102
    0xF0, 0x08, 0x08, 0x08, 0x08, 0xF8, 0x10, 0xA0, 0xA0, 0xA0, 0x90, 0x70, // 103
    0xFF, 0x10, 0x08, 0x08, 0x08, 0xF0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x30, // 104
    0xF9, 0x30, // 105
    0x00, 0x08, 0xF9, 0x80, 0x80, 0x70, // 106
    0xFF, 0x40, 0xA0, 0x10, 0x08, 0x30, 0x00, 0x00, 0x10, 0x20, // 107
    0xFF, 0x30, // 108
    0xF8, 0x08, 0x08, 0x08, 0xF0, 0x08, 0x08, 0x08, 0xF0, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, // 109
    0xF8, 0x10, 0x08, 0x08, 0x08, 0xF0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x30, // 110
    0xF0, 0x08, 0x08, 0x08, 0x08, 0xF0, 0x10, 0x20, 0x20, 0x20, 0x20, 0x10, // 111
    0xF8, 0x10, 0x08, 0x08, 0x08, 0xF0, 0xF0, 0x20, 0x20, 0x20, 0x20, 0x10, // 112
    0xF0, 0x08, 0x08, 0x08, 0x08, 0xF8, 0x10, 0x20, 0x20, 0x20, 0x10, 0xF0, // 113
    0xF8, 0x10, 0x08, 0x08, 0x30, 0x00, 0x00, 0x00, // 114
    0x30, 0x48, 0x48, 0x48, 0x88, 0x20, 0x20, 0x20, 0x20, 0x10, // 115
    0x08, 0xFE, 0x08, 0x08, 0x08, 0x00, 0x10, 0x20, 0x20, 0x20, // 116
    0xF8, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x10, 0x20, 0x20, 0x20, 0x10, 0x30, // 117
    0x18, 0xE0, 0x00, 0xE0, 0x18, 0x00, 0x00, 0x30, 0x00, 0x00, // 118
    0x18, 0xE0, 0x00, 0xE0, 0x18, 0xE0, 0x00, 0xE0, 0x18, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, // 119
    0x18, 0xA0, 0x40, 0xA0, 0x18, 0x30, 0x00, 0x00, 0x00, 0x30, // 120
    0x18, 0xE0, 0x00, 0xE0, 0x18, 0x00, 0x80, 0x70, 0x00, 0x00, // 121
    0x08, 0x88, 0x48, 0x28, 0x18, 0x30, 0x20, 0x20, 0x20, 0x20, // 122
    0x20, 0x20, 0xDE, 0x01, 0x01, 0x00, 0x00, 0x70, 0x80, 0x80, // 123
    0xFF, 0xF0, // 124
    0x01, 0x01, 0xDE, 0x20, 0x20, 0x80, 0x80, 0x70, 0x00, 0x00, // 125
    0xC0, 0x20, 0x20, 0x40, 0x40, 0x80, 0x80, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 126
    0xFE, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFE, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30 // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Verdana12_bold.h ===

/*
 *
 * Verdana12_bold
 *
 * created with GLCDFontCreator
 * original framework by F. Maximilian Thiele
 * Modified By Siddharth Kaul
 *
 *
 * File Name           : Verdana12_bold.h
 * Date                : 10.11.2012
 * Font size in bytes  : 7266
 * Font width          : 10
 * Font height         : 12
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef _Verdana12_bold_H
#define _Verdana12_bold_H

#define Verdana12_bold_WIDTH 10
#define Verdana12_bold_HEIGHT 12

GLCDFONTDECL(Verdana12_bold) = {
    0x1C, 0x62, // size
    0x0A, // width
    0x0C, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x02, 0x02, 0x05, 0x08, 0x07, 0x0D, 0x08, 0x02, 0x04, 0x04, 
    0x05, 0x07, 0x02, 0x04, 0x02, 0x06, 0x07, 0x06, 0x07, 0x07, 
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x02, 0x02, 0x07, 0x07, 
    0x07, 0x05, 0x0A, 0x07, 0x07, 0x07, 0x08, 0x06, 0x06, 0x08, 
    0x08, 0x04, 0x06, 0x07, 0x07, 0x09, 0x08, 0x09, 0x07, 0x09, 
    0x08, 0x07, 0x08, 0x08, 0x07, 0x0C, 0x07, 0x08, 0x06, 0x04, 
    0x06, 0x04, 0x08, 0x09, 0x03, 0x06, 0x06, 0x06, 0x06, 0x06, 
    0x05, 0x06, 0x06, 0x02, 0x04, 0x07, 0x02, 0x0A, 0x06, 0x06, 
    0x06, 0x06, 0x05, 0x05, 0x05, 0x06, 0x06, 0x0A, 0x06, 0x06, 
    0x05, 0x06, 0x02, 0x06, 0x08, 0x09, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, // 0x20 <space>
    0x7E, 0x7E, 0x30, 0x30, // 33
    0x07, 0x07, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, // 34
    0xC0, 0xD8, 0xF8, 0xDE, 0xD8, 0xF8, 0xDE, 0x18, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, // 35
    0x38, 0x7C, 0x64, 0xFF, 0x64, 0xE4, 0xC8, 0x10, 0x20, 0x20, 0xF0, 0x20, 0x30, 0x10, // 36
    0x3C, 0x7E, 0x42, 0x7E, 0x3C, 0xC0, 0x20, 0x18, 0xE6, 0xF0, 0x10, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x10, 0x30, 0x20, 0x30, 0x10, // 37
    0xDC, 0xFE, 0x22, 0x7E, 0xDC, 0x80, 0x60, 0x20, 0x10, 0x30, 0x20, 0x20, 0x20, 0x10, 0x30, 0x20, // 38
    0x07, 0x07, 0x00, 0x00, // 39
    0xF8, 0xFE, 0x07, 0x01, 0x10, 0x70, 0xE0, 0x80, // 40
    0x01, 0x07, 0xFE, 0xF8, 0x80, 0xE0, 0x70, 0x10, // 41
    0x12, 0x0C, 0x3F, 0x0C, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, // 42
    0x20, 0x20, 0x20, 0xFC, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, // 43
    0x00, 0x00, 0xF0, 0x70, // 44
    0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, // 45
    0x00, 0x00, 0x30, 0x30, // 46
    0x00, 0x80, 0xE0, 0x7C, 0x1F, 0x03, 0xC0, 0xF0, 0x30, 0x00, 0x00, 0x00, // 47
    0xFC, 0xFE, 0x02, 0x02, 0x02, 0xFE, 0xFC, 0x10, 0x30, 0x20, 0x20, 0x20, 0x30, 0x10, // 48
    0x04, 0x04, 0xFE, 0xFE, 0x00, 0x00, 0x20, 0x20, 0x30, 0x30, 0x20, 0x20, // 49
    0x04, 0x06, 0x82, 0xC2, 0x62, 0x3E, 0x1C, 0x20, 0x30, 0x30, 0x20, 0x20, 0x20, 0x20, // 50
    0x04, 0x06, 0x22, 0x22, 0x22, 0xFE, 0xDC, 0x10, 0x30, 0x20, 0x20, 0x20, 0x30, 0x10, // 51
    0xC0, 0xA0, 0x98, 0x84, 0xFE, 0xFE, 0x80, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, // 52
    0x00, 0x1E, 0x1E, 0x12, 0x12, 0xF2, 0xE2, 0x10, 0x30, 0x20, 0x20, 0x20, 0x30, 0x10, // 53
    0xF8, 0xFC, 0x16, 0x12, 0x12, 0xF2, 0xE0, 0x10, 0x30, 0x20, 0x20, 0x20, 0x30, 0x10, // 54
    0x02, 0x02, 0x82, 0xE2, 0x7A, 0x1E, 0x06, 0x00, 0x20, 0x30, 0x10, 0x00, 0x00, 0x00, // 55
    0xDC, 0xFE, 0x22, 0x22, 0x22, 0xFE, 0xDC, 0x10, 0x30, 0x20, 0x20, 0x20, 0x30, 0x10, // 56
    0x3C, 0x7E, 0x42, 0x42, 0x42, 0xFE, 0xFC, 0x00, 0x20, 0x20, 0x20, 0x30, 0x10, 0x00, // 57
    0x18, 0x18, 0x30, 0x30, // 58
    0x18, 0x18, 0xF0, 0x70, // 59
    0x60, 0x60, 0x90, 0x90, 0x08, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x20, // 60
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 61
    0x04, 0x08, 0x08, 0x90, 0x90, 0x60, 0x60, 0x20, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, // 62
    0x04, 0x62, 0x72, 0x1E, 0x0C, 0x00, 0x30, 0x30, 0x00, 0x00, // 63
    0xF0, 0x0C, 0xF4, 0xFA, 0x0A, 0xFA, 0xFA, 0x04, 0x0C, 0xF0, 0x00, 0x30, 0x20, 0x50, 0x50, 0x50, 0x50, 0x10, 0x10, 0x00, // 64
    0x80, 0xF8, 0xFE, 0x86, 0xFE, 0xF8, 0x80, 0x30, 0x30, 0x00, 0x00, 0x00, 0x30, 0x30, // 65
    0xFE, 0xFE, 0x22, 0x22, 0x3E, 0xFC, 0xC0, 0x30, 0x30, 0x20, 0x20, 0x20, 0x30, 0x10, // 66
    0xF8, 0xFC, 0x06, 0x02, 0x02, 0x02, 0x04, 0x00, 0x10, 0x30, 0x20, 0x20, 0x20, 0x10, // 67
    0xFE, 0xFE, 0x02, 0x02, 0x02, 0x06, 0xFC, 0xF8, 0x30, 0x30, 0x20, 0x20, 0x20, 0x30, 0x10, 0x00, // 68
    0xFE, 0xFE, 0x22, 0x22, 0x22, 0x22, 0x30, 0x30, 0x20, 0x20, 0x20, 0x20, // 69
    0xFE, 0xFE, 0x22, 0x22, 0x22, 0x22, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, // 70
    0xF8, 0xFC, 0x06, 0x02, 0x42, 0x42, 0xC2, 0xC4, 0x00, 0x10, 0x30, 0x20, 0x20, 0x20, 0x30, 0x30, // 71
    0xFE, 0xFE, 0x20, 0x20, 0x20, 0x20, 0xFE, 0xFE, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, // 72
    0x02, 0xFE, 0xFE, 0x02, 0x20, 0x30, 0x30, 0x20, // 73
    0x00, 0x02, 0x02, 0x02, 0xFE, 0xFE, 0x20, 0x20, 0x20, 0x20, 0x30, 0x10, // 74
    0xFE, 0xFE, 0x70, 0xD8, 0x8C, 0x06, 0x02, 0x30, 0x30, 0x00, 0x00, 0x10, 0x30, 0x20, // 75
    0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, // 76
    0xFE, 0x0E, 0x3C, 0xF0, 0xC0, 0x30, 0x0C, 0xFE, 0xFE, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, // 77
    0xFE, 0x06, 0x1C, 0x38, 0xE0, 0xC0, 0x00, 0xFE, 0x30, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30, 0x30, // 78
    0xF8, 0xFC, 0x06, 0x02, 0x02, 0x02, 0x06, 0xFC, 0xF8, 0x00, 0x10, 0x30, 0x20, 0x20, 0x20, 0x30, 0x10, 0x00, // 79
    0xFE, 0xFE, 0x42, 0x42, 0x42, 0x7E, 0x3C, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, // 80
    0xF8, 0xFC, 0x06, 0x02, 0x02, 0x02, 0x06, 0xFC, 0xF8, 0x00, 0x10, 0x30, 0x20, 0x60, 0xE0, 0xB0, 0x90, 0x80, // 81
    0xFE, 0xFE, 0x22, 0x62, 0xE2, 0xBE, 0x1C, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x10, 0x30, 0x20, // 82
    0x1C, 0x3E, 0x32, 0x22, 0x62, 0xE2, 0xC4, 0x10, 0x20, 0x20, 0x20, 0x20, 0x30, 0x10, // 83
    0x02, 0x02, 0x02, 0xFE, 0xFE, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, // 84
    0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x10, 0x30, 0x20, 0x20, 0x20, 0x20, 0x30, 0x10, // 85
    0x0E, 0x7E, 0xF0, 0x80, 0xF0, 0x7E, 0x0E, 0x00, 0x00, 0x30, 0x30, 0x30, 0x00, 0x00, // 86
    0x0E, 0x7E, 0xF0, 0x80, 0xE0, 0x3E, 0x3E, 0xE0, 0x80, 0xF0, 0x7E, 0x0E, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, // 87
    0x06, 0x8E, 0xF8, 0x70, 0xF8, 0x8E, 0x06, 0x30, 0x30, 0x00, 0x00, 0x00, 0x30, 0x30, // 88
    0x06, 0x0E, 0x18, 0xF0, 0xF0, 0x18, 0x0E, 0x06, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, // 89
    0x02, 0xC2, 0xF2, 0x3E, 0x0E, 0x02, 0x30, 0x30, 0x20, 0x20, 0x20, 0x20, // 90
    0xFF, 0xFF, 0x01, 0x01, 0xF0, 0xF0, 0x80, 0x80, // 91
    0x03, 0x1F, 0x7C, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x30, 0xF0, 0xC0, // 92
    0x01, 0x01, 0xFF, 0xFF, 0x80, 0x80, 0xF0, 0xF0, // 93
    0x10, 0x18, 0x0C, 0x06, 0x06, 0x0C, 0x18, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, // 95
    0x01, 0x03, 0x02, 0x00, 0x00, 0x00, // 96
    0xC0, 0xE8, 0x28, 0x28, 0xF8, 0xF0, 0x10, 0x30, 0x20, 0x20, 0x30, 0x30, // 97
    0xFF, 0xFF, 0x08, 0x08, 0xF8, 0xF0, 0x30, 0x30, 0x20, 0x20, 0x30, 0x10, // 98
    0xF0, 0xF8, 0x08, 0x08, 0x08, 0x10, 0x10, 0x30, 0x20, 0x20, 0x20, 0x10, // 99
    0xF0, 0xF8, 0x08, 0x08, 0xFF, 0xFF, 0x10, 0x30, 0x20, 0x20, 0x30, 0x30, // 100
    0xF0, 0xF8, 0x48, 0x48, 0x78, 0x70, 0x10, 0x30, 0x20, 0x20, 0x20, 0x10, // 101
    0x08, 0xFE, 0xFF, 0x09, 0x09, 0x00, 0x30, 0x30, 0x00, 0x00, // 102
    0xF0, 0xF8, 0x08, 0x08, 0xF8, 0xF8, 0x10, 0xB0, 0xA0, 0xA0, 0xF0, 0x70, // 103
    0xFF, 0xFF, 0x08, 0x08, 0xF8, 0xF0, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, // 104
    0xFB, 0xFB, 0x30, 0x30, // 105
    0x00, 0x08, 0xFB, 0xFB, 0x80, 0x80, 0xF0, 0x70, // 106
    0xFF, 0xFF, 0x60, 0xF0, 0x98, 0x08, 0x00, 0x30, 0x30, 0x00, 0x00, 0x10, 0x30, 0x20, // 107
    0xFF, 0xFF, 0x30, 0x30, // 108
    0xF8, 0xF8, 0x10, 0x08, 0xF8, 0xF0, 0x10, 0x08, 0xF8, 0xF0, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, // 109
    0xF8, 0xF8, 0x08, 0x08, 0xF8, 0xF0, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, // 110
    0xF0, 0xF8, 0x08, 0x08, 0xF8, 0xF0, 0x10, 0x30, 0x20, 0x20, 0x30, 0x10, // 111
    0xF8, 0xF8, 0x08, 0x08, 0xF8, 0xF0, 0xF0, 0xF0, 0x20, 0x20, 0x30, 0x10, // 112
    0xF0, 0xF8, 0x08, 0x08, 0xF8, 0xF8, 0x10, 0x30, 0x20, 0x20, 0xF0, 0xF0, // 113
    0xF8, 0xF8, 0x10, 0x18, 0x18, 0x30, 0x30, 0x00, 0x00, 0x00, // 114
    0x30, 0x78, 0x48, 0xC8, 0x88, 0x20, 0x20, 0x20, 0x30, 0x10, // 115
    0x08, 0xFE, 0xFE, 0x08, 0x08, 0x00, 0x10, 0x30, 0x20, 0x20, // 116
    0xF8, 0xF8, 0x00, 0x00, 0xF8, 0xF8, 0x10, 0x30, 0x20, 0x20, 0x30, 0x30, // 117
    0x38, 0xF8, 0xC0, 0xC0, 0xF8, 0x38, 0x00, 0x10, 0x30, 0x30, 0x10, 0x00, // 118
    0x78, 0xF8, 0x80, 0xC0, 0x38, 0x38, 0xC0, 0x80, 0xF8, 0x78, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, // 119
    0x18, 0xB8, 0xE0, 0xE0, 0xB8, 0x18, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, // 120
    0x38, 0xF8, 0xC0, 0xC0, 0xF8, 0x38, 0x00, 0x90, 0xF0, 0x70, 0x10, 0x00, // 121
    0x08, 0xC8, 0xE8, 0x78, 0x18, 0x30, 0x30, 0x20, 0x20, 0x20, // 122
    0x20, 0x20, 0xFE, 0xDF, 0x01, 0x01, 0x00, 0x00, 0x70, 0xF0, 0x80, 0x80, // 123
    0xFF, 0xFF, 0xF0, 0xF0, // 124
    0x01, 0x01, 0xDF, 0xFE, 0x20, 0x20, 0x80, 0x80, 0xF0, 0x70, 0x00, 0x00, // 125
    0xE0, 0x10, 0x10, 0x20, 0x40, 0x80, 0x80, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 126
    0xFE, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFE, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30 // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Verdana12_italic.h ===

/*
 *
 * Verdana12_italic
 *
 * created with GLCDFontCreator
 * original framework by F. Maximilian Thiele
 * Modified By Siddharth Kaul
 *
 *
 * File Name           : Verdana12_italic.h
 * Date                : 10.11.2012
 * Font size in bytes  : 7122
 * Font width          : 10
 * Font height         : 12
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef _Verdana12_italic_H
#define _Verdana12_italic_H

#define Verdana12_italic_WIDTH 10
#define Verdana12_italic_HEIGHT 12

GLCDFONTDECL(Verdana12_italic) = {
    0x1B, 0xD2, // size
    0x0A, // width
    0x0C, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x03, 0x03, 0x04, 0x07, 0x07, 0x0B, 0x08, 0x02, 0x04, 0x04, 
    0x05, 0x07, 0x02, 0x03, 0x01, 0x05, 0x07, 0x05, 0x07, 0x07, 
    0x07, 0x07, 0x07, 0x06, 0x07, 0x07, 0x02, 0x03, 0x07, 0x07, 
    0x07, 0x05, 0x0A, 0x07, 0x07, 0x07, 0x08, 0x08, 0x07, 0x08, 
    0x09, 0x05, 0x05, 0x08, 0x06, 0x0A, 0x09, 0x07, 0x07, 0x07, 
    0x07, 0x08, 0x06, 0x08, 0x07, 0x0B, 0x08, 0x06, 0x08, 0x05, 
    0x03, 0x05, 0x07, 0x07, 0x02, 0x06, 0x06, 0x06, 0x07, 0x06, 
    0x04, 0x06, 0x07, 0x03, 0x03, 0x06, 0x03, 0x0B, 0x07, 0x06, 
    0x06, 0x06, 0x05, 0x06, 0x04, 0x07, 0x05, 0x08, 0x07, 0x05, 
    0x06, 0x06, 0x01, 0x06, 0x07, 0x09, 
    
    // font data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x20 <space>
    0x00, 0xF0, 0x0E, 0x20, 0x00, 0x00, // 33
    0x06, 0x01, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, // 34
    0x40, 0xC8, 0x78, 0xCE, 0x78, 0x4E, 0x08, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, // 35
    0x00, 0x18, 0x24, 0xFC, 0x47, 0x84, 0x08, 0x10, 0x20, 0xE0, 0x30, 0x20, 0x10, 0x00, // 36
    0x18, 0x24, 0x22, 0x92, 0x4C, 0x20, 0x90, 0x48, 0x24, 0x22, 0xC0, 0x00, 0x20, 0x10, 0x00, 0x00, 0x00, 0x10, 0x20, 0x20, 0x10, 0x00, // 37
    0xC0, 0x3C, 0x22, 0x22, 0x52, 0x8C, 0x40, 0x20, 0x10, 0x20, 0x20, 0x20, 0x10, 0x00, 0x10, 0x20, // 38
    0x06, 0x01, 0x00, 0x00, // 39
    0xE0, 0x18, 0x06, 0x01, 0x70, 0x80, 0x00, 0x00, // 40
    0x00, 0x00, 0x81, 0x7E, 0x80, 0x60, 0x10, 0x00, // 41
    0x0A, 0x04, 0x1F, 0x04, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, // 42
    0x40, 0x40, 0x40, 0xF8, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, // 43
    0x00, 0x00, 0x80, 0x70, // 44
    0x40, 0x40, 0x40, 0x00, 0x00, 0x00, // 45
    0x00, 0x30, // 46
    0x00, 0x80, 0x60, 0x18, 0x04, 0x20, 0x10, 0x00, 0x00, 0x00, // 47
    0xE0, 0x18, 0x04, 0x02, 0x02, 0xC2, 0x3C, 0x10, 0x20, 0x20, 0x20, 0x10, 0x00, 0x00, // 48
    0x00, 0x00, 0x84, 0x74, 0x0E, 0x20, 0x20, 0x30, 0x20, 0x20, // 49
    0x00, 0x84, 0x42, 0x42, 0x22, 0x22, 0x1C, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, // 50
    0x00, 0x00, 0x04, 0x22, 0x22, 0xD2, 0x0C, 0x10, 0x20, 0x20, 0x20, 0x20, 0x10, 0x00, // 51
    0x40, 0x60, 0x50, 0x48, 0xC4, 0x72, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, // 52
    0x00, 0x18, 0x16, 0x12, 0x12, 0xE2, 0x02, 0x10, 0x20, 0x20, 0x20, 0x10, 0x00, 0x00, // 53
    0xF0, 0x28, 0x14, 0x14, 0x12, 0x12, 0xE2, 0x10, 0x20, 0x20, 0x20, 0x20, 0x10, 0x00, // 54
    0x02, 0x82, 0x42, 0x32, 0x0A, 0x06, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, // 55
    0x80, 0x58, 0x24, 0x22, 0x22, 0xD2, 0x0C, 0x10, 0x20, 0x20, 0x20, 0x10, 0x00, 0x00, // 56
    0x38, 0x44, 0x42, 0x42, 0x42, 0xA2, 0x7C, 0x20, 0x20, 0x20, 0x20, 0x10, 0x00, 0x00, // 57
    0x00, 0x18, 0x30, 0x00, // 58
    0x00, 0x00, 0x18, 0x80, 0x70, 0x00, // 59
    0x40, 0xA0, 0xA0, 0x10, 0x10, 0x08, 0x08, 0x00, 0x00, 0x00, 0x10, 0x10, 0x20, 0x20, // 60
    0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 61
    0x08, 0x08, 0x10, 0x10, 0xA0, 0xA0, 0x40, 0x20, 0x20, 0x10, 0x10, 0x00, 0x00, 0x00, // 62
    0x04, 0xC2, 0x22, 0x22, 0x1C, 0x20, 0x00, 0x00, 0x00, 0x00, // 63
    0xE0, 0x18, 0xE4, 0x14, 0x0A, 0x0A, 0xCA, 0x3A, 0x84, 0x78, 0x10, 0x20, 0x40, 0x50, 0x50, 0x50, 0x10, 0x10, 0x00, 0x00, // 64
    0x00, 0xC0, 0x60, 0x58, 0x44, 0x42, 0xFE, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, // 65
    0x80, 0x70, 0x2E, 0x22, 0x22, 0x32, 0xCC, 0x30, 0x20, 0x20, 0x20, 0x20, 0x10, 0x00, // 66
    0xF0, 0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x00, 0x10, 0x20, 0x20, 0x20, 0x10, 0x00, // 67
    0x80, 0x70, 0x0E, 0x02, 0x02, 0x02, 0x84, 0x78, 0x30, 0x20, 0x20, 0x20, 0x20, 0x10, 0x00, 0x00, // 68
    0x80, 0x70, 0x2E, 0x22, 0x22, 0x22, 0x22, 0x02, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, // 69
    0x80, 0x70, 0x2E, 0x22, 0x22, 0x22, 0x22, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 70
    0xF0, 0x08, 0x04, 0x02, 0x42, 0x42, 0xC2, 0x04, 0x00, 0x10, 0x20, 0x20, 0x20, 0x30, 0x00, 0x00, // 71
    0x80, 0x70, 0x2E, 0x20, 0x20, 0x20, 0xA0, 0x70, 0x0E, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, // 72
    0x00, 0x80, 0x72, 0x0E, 0x02, 0x20, 0x30, 0x20, 0x00, 0x00, // 73
    0x00, 0x00, 0x82, 0x72, 0x0E, 0x20, 0x20, 0x10, 0x00, 0x00, // 74
    0x80, 0x70, 0x2E, 0x60, 0x90, 0x08, 0x04, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00, // 75
    0x80, 0x70, 0x0E, 0x00, 0x00, 0x00, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, // 76
    0x80, 0x70, 0x0E, 0x18, 0xE0, 0x40, 0x30, 0x88, 0x74, 0x0E, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, // 77
    0x80, 0x70, 0x0E, 0x18, 0x20, 0xC0, 0x80, 0x70, 0x0E, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, // 78
    0xF0, 0x08, 0x04, 0x02, 0x02, 0x84, 0x78, 0x00, 0x10, 0x20, 0x20, 0x10, 0x00, 0x00, // 79
    0x80, 0x70, 0x4E, 0x42, 0x42, 0x22, 0x1C, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 80
    0xF0, 0x08, 0x04, 0x02, 0x02, 0x84, 0x78, 0x00, 0x10, 0x20, 0x20, 0x50, 0x80, 0x80, // 81
    0x80, 0x70, 0x4E, 0x42, 0xC2, 0x22, 0x1C, 0x30, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, // 82
    0x00, 0x18, 0x24, 0x22, 0x22, 0x22, 0xC2, 0x04, 0x10, 0x20, 0x20, 0x20, 0x20, 0x10, 0x00, 0x00, // 83
    0x02, 0x82, 0x72, 0x0E, 0x02, 0x02, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, // 84
    0xE0, 0x1E, 0x00, 0x00, 0x00, 0x80, 0x70, 0x0E, 0x10, 0x20, 0x20, 0x20, 0x20, 0x10, 0x00, 0x00, // 85
    0xFE, 0x00, 0x80, 0x40, 0x30, 0x08, 0x06, 0x30, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, // 86
    0xFE, 0x00, 0xC0, 0x30, 0x0C, 0xFE, 0x00, 0xC0, 0x30, 0x0C, 0x02, 0x30, 0x10, 0x00, 0x00, 0x00, 0x30, 0x10, 0x00, 0x00, 0x00, 0x00, // 87
    0x00, 0x02, 0x8C, 0x70, 0x70, 0x88, 0x04, 0x02, 0x20, 0x10, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00, // 88
    0x02, 0x9C, 0x60, 0x10, 0x08, 0x04, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, // 89
    0x00, 0x80, 0x42, 0x22, 0x12, 0x0A, 0x06, 0x02, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, // 90
    0x00, 0xC0, 0x38, 0x07, 0x01, 0xE0, 0x90, 0x80, 0x00, 0x00, // 91
    0x0F, 0xF0, 0x00, 0x00, 0x00, 0xF0, // 92
    0x00, 0x00, 0xC1, 0x39, 0x07, 0x80, 0xE0, 0x10, 0x00, 0x00, // 93
    0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 94
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, // 95
    0x01, 0x02, 0x00, 0x00, // 96
    0x80, 0x48, 0x48, 0x48, 0xC8, 0x70, 0x10, 0x20, 0x20, 0x20, 0x30, 0x00, // 97
    0x80, 0x78, 0x0F, 0x08, 0x08, 0xF0, 0x30, 0x20, 0x20, 0x20, 0x10, 0x00, // 98
    0xE0, 0x10, 0x08, 0x08, 0x08, 0x10, 0x10, 0x20, 0x20, 0x20, 0x10, 0x00, // 99
    0xE0, 0x10, 0x08, 0x08, 0x88, 0x78, 0x07, 0x10, 0x20, 0x20, 0x20, 0x30, 0x00, 0x00, // 100
    0xE0, 0x50, 0x48, 0x48, 0x48, 0x70, 0x10, 0x20, 0x20, 0x20, 0x10, 0x00, // 101
    0x88, 0x78, 0x0E, 0x09, 0x30, 0x00, 0x00, 0x00, // 102
    0xE0, 0x10, 0x08, 0x08, 0x88, 0x78, 0x90, 0xA0, 0xA0, 0xA0, 0x70, 0x00, // 103
    0x80, 0x78, 0x17, 0x08, 0x08, 0x88, 0x70, 0x30, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, // 104
    0x80, 0x78, 0x02, 0x30, 0x00, 0x00, // 105
    0x00, 0x88, 0x7A, 0x80, 0x70, 0x00, // 106
    0x80, 0x78, 0x47, 0xA0, 0x10, 0x08, 0x30, 0x00, 0x00, 0x10, 0x20, 0x00, // 107
    0x80, 0x78, 0x07, 0x30, 0x00, 0x00, // 108
    0x80, 0x78, 0x10, 0x08, 0x08, 0xC8, 0x30, 0x08, 0x08, 0x88, 0x70, 0x30, 0x00, 0x00, 0x00, 0x20, 0x10, 0x00, 0x00, 0x00, 0x30, 0x00, // 109
    0x80, 0x78, 0x10, 0x08, 0x08, 0x88, 0x70, 0x30, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, // 110
    0xE0, 0x10, 0x08, 0x08, 0x08, 0xF0, 0x10, 0x20, 0x20, 0x20, 0x10, 0x00, // 111
    0x80, 0x78, 0x08, 0x08, 0x08, 0xF0, 0x30, 0x20, 0x20, 0x20, 0x10, 0x00, // 112
    0xE0, 0x10, 0x08, 0x08, 0x88, 0x78, 0x10, 0x20, 0x20, 0xE0, 0x30, 0x00, // 113
    0x80, 0x78, 0x10, 0x08, 0x08, 0x30, 0x00, 0x00, 0x00, 0x00, // 114
    0x00, 0x30, 0x48, 0x48, 0x88, 0x10, 0x10, 0x20, 0x20, 0x20, 0x10, 0x00, // 115
    0xC8, 0x38, 0x0E, 0x08, 0x10, 0x20, 0x20, 0x00, // 116
    0xC0, 0x38, 0x00, 0x00, 0x00, 0xC0, 0x38, 0x10, 0x20, 0x20, 0x20, 0x10, 0x30, 0x00, // 117
    0x78, 0x80, 0x80, 0x60, 0x18, 0x00, 0x30, 0x10, 0x00, 0x00, // 118
    0xF8, 0x00, 0xC0, 0x20, 0xF8, 0x00, 0xE0, 0x18, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, // 119
    0x00, 0x08, 0xB0, 0x40, 0xA0, 0x10, 0x08, 0x20, 0x10, 0x00, 0x00, 0x10, 0x20, 0x00, // 120
    0x78, 0x80, 0x80, 0x60, 0x18, 0x80, 0x70, 0x10, 0x00, 0x00, // 121
    0x00, 0x88, 0x48, 0x28, 0x18, 0x08, 0x30, 0x20, 0x20, 0x20, 0x20, 0x00, // 122
    0x20, 0x20, 0xDC, 0x03, 0x01, 0x01, 0x00, 0x70, 0x80, 0x80, 0x00, 0x00, // 123
    0xFF, 0xF0, // 124
    0x00, 0x00, 0x01, 0xD9, 0x26, 0x20, 0x80, 0x80, 0x60, 0x10, 0x00, 0x00, // 125
    0xC0, 0x20, 0x20, 0x40, 0x80, 0x80, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 126
    0xFE, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFE, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30 // 127
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Verdana_digits_24.h ===

/*
 *
 * Verdana_digits_24
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : Verdana_digits_24
 * Date                : 01.05.2008
 * Font size in bytes  : 3833
 * Font width          : 10
 * Font height         : 24
 * Font first char     : 48
 * Font last char      : 59
 * Font used chars     : 11
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty
row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef VERDANA24_H
#define VERDANA24_H

#define VERDANA24_WIDTH 17
#define VERDANA24_HEIGHT 24

/*
 * define for backward compatiblity
 */
#define Verdana24 Verdana_digits_24

GLCDFONTDECL(Verdana_digits_24) = {
    0x0E, 0xF9, // size
    0x11, // width
    0x18, // height
    0x30, // first char
    0x0B, // char count

    // char widths
    0x10, 0x0D, 0x0F, 0x0F, 0x11, 0x0F, 0x10, 0x10, 0x10, 0x10,
    0x04,

    // font data
    0x80, 0xF0, 0xFC, 0x7E, 0x0E, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x0F, 0x1E,
0x7E, 0xFC, 0xF0, 0x80, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x01, 0x0F, 0x3F, 0x7E,
0x70, 0xF0, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0, 0x70, 0x7E, 0x3F, 0x0F, 0x01, //48 '0'

    0x38, 0x38, 0x38, 0x38, 0x3C, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
0x00, 0x00, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xFF, 0xFF, 0xFF, 0xE0, 0xE0,
0xE0, 0xE0, 0xE0,                                                        // 49 '1'

    0x00, 0x1E, 0x0E, 0x0E, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0F, 0x1E, 0xFE,
0xFC, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0,
0x78, 0x3E, 0x1F, 0x07, 0x01, 0x00, 0xF0, 0xF8, 0xFC, 0xFE, 0xEF, 0xE7,
0xE3, 0xE1, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0,                    // 50 '2'

    0x00, 0x1E, 0x0E, 0x0E, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0F, 0x1E,
0xFE, 0xFC, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x1C, 0x1C, 0x1C,
0x1E, 0x36, 0x77, 0xF3, 0xE1, 0xC0, 0x78, 0x70, 0x70, 0xF0, 0xE0, 0xE0,
0xE0, 0xE0, 0xE0, 0xF0, 0x70, 0x78, 0x3F, 0x1F, 0x0F,                   // 51 '3'

    0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xF0, 0xF8, 0x7C, 0x1E, 0xFF,
0xFF, 0xFF, 0x00, 0x00, 0x00, 0xE0, 0xF0, 0xFC, 0xFE, 0xDF, 0xC7, 0xC3,
0xC1, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF, 0xFF, 0xFF,
0x01, 0x01, 0x01,                                                       // 52 '4'

    0x00, 0xFF, 0xFF, 0xFF, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
0x07, 0x07, 0x07, 0x00, 0x1F, 0x1F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E,
0x1E, 0x1C, 0x3C, 0xF8, 0xF8, 0xE0, 0x78, 0x70, 0x70, 0xF0, 0xE0, 0xE0,
0xE0, 0xE0, 0xE0, 0xF0, 0x70, 0x7C, 0x3F, 0x1F, 0x07,                    // 53 '5'

    0x00, 0xC0, 0xF0, 0xF8, 0x3C, 0x1E, 0x0E, 0x0E, 0x07, 0x07, 0x07, 0x07,
0x07, 0x0F, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x1C, 0x1C, 0x0E, 0x0E, 0x0E,
0x0E, 0x0E, 0x0E, 0x1E, 0x3C, 0xF8, 0xF8, 0xE0, 0x03, 0x0F, 0x3F, 0x7C,
0x78, 0xF0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0x70, 0x78, 0x3F, 0x1F, 0x07, //54 '6'

    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x87,
0xE7, 0xFF, 0x7F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0,
0xF0, 0xFC, 0x3F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0,
0xF8, 0xFC, 0x3F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //55 '7'

    0x00, 0xF0, 0xFC, 0xFE, 0x0E, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x0F, 0x1E,
0xFE, 0xFC, 0xF8, 0x00, 0x80, 0xE0, 0xF3, 0x77, 0x1F, 0x0E, 0x0E, 0x0C,
0x1C, 0x1C, 0x1C, 0x3E, 0x77, 0xF3, 0xE0, 0x80, 0x0F, 0x1F, 0x3F, 0x78,
0x70, 0xF0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0x70, 0x78, 0x3F, 0x1F, 0x0F, //56 '8'

    0xE0, 0xF8, 0xFC, 0x1E, 0x0E, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0F, 0x1E,
0x3E, 0xFC, 0xF0, 0xC0, 0x07, 0x1F, 0x1F, 0x3C, 0x78, 0x70, 0x70, 0x70,
0x70, 0x70, 0x70, 0x38, 0x38, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xF0, 0xE0,
0xE0, 0xE0, 0xE0, 0xE0, 0x70, 0x70, 0x78, 0x3C, 0x1F, 0x0F, 0x03, 0x00,    //57 '9'

    0xC0, 0xC0, 0xC0, 0xC0, 0x03, 0x03, 0x03, 0x03, 0xF0, 0xF0, 0xF0, 0xF0 // 58 ':'

};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Vicler8x16.h ===



/*
 *
 * Vicler8x16
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : Vicler8x16.h
 * Date                : 21.10.2020
 * Font size in bytes  : 11158
 * Font width          : 8
 * Font height         : 16
 * Font first char     : 32
 * Font last char      : 192
 * Font used chars     : 160
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>
#include <avr/pgmspace.h>

#ifndef VICLER8X16_H
#define VICLER8X16_H

#define VICLER8X16_WIDTH 8
#define VICLER8X16_HEIGHT 16

static const uint8_t Vicler8x16[] PROGMEM = {
    0x2B, 0x96, // size
    0x08, // width
    0x10, // height
    0x20, // first char
    0xA0, // char count
    
    // char widths
    0x04, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x0C, 0x0C, 
    0x04, 0x06, 0x03, 0x06, 0x03, 0x04, 0x08, 0x08, 0x08, 0x08, 
    0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x03, 0x00, 0x07, 0x06, 
    0x07, 0x05, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07, 0x07, 0x08, 0x07, 
    0x08, 0x07, 0x08, 0x07, 0x08, 0x09, 0x08, 0x08, 0x07, 0x07, 
    0x09, 0x07, 0x07, 0x07, 0x07, 0x07, 0x08, 0x07, 0x08, 0x07, 
    0x07, 0x07, 0x07, 0x07, 0x0A, 0x07, 0x07, 0x07, 0x07, 0x07, 
    0x08, 0x07, 0x0A, 0x08, 0x08, 0x07, 0x08, 0x09, 0x00, 0x08, 
    0x07, 0x07, 0x0A, 0x07, 0x07, 0x07, 0x07, 0x07, 0x08, 0x07, 
    0x08, 0x07, 0x07, 0x07, 0x07, 0x07, 0x08, 0x07, 0x07, 0x07, 
    
    
    // font data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 32
    0x00, 0xFC, 0x00, 0x00, 0x0B, 0x00, // 33
    0x50, 0xB0, 0x50, 0xB0, 0x50, 0xB0, 0x50, 0xB0, 0x0D, 0x0A, 0x0D, 0x0A, 0x0D, 0x0A, 0x0D, 0x0A, // 35
    0x00, 0x00, 0x00, 0x08, // 39
    0x00, 0xF0, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xF0, 0x00, 0x00, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F, 0x00, // 40
    0x00, 0xF0, 0x08, 0x28, 0x48, 0x88, 0x88, 0x48, 0x28, 0x08, 0xF0, 0x00, 0x00, 0x0F, 0x10, 0x14, 0x12, 0x11, 0x11, 0x12, 0x14, 0x10, 0x0F, 0x00, // 41
    0x00, 0x0E, 0x0A, 0x0E, 0x00, 0x00, 0x00, 0x00, // 42
    0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x01, 0x01, 0x07, 0x01, 0x01, // 43
    0x00, 0x00, 0x00, 0x00, 0x18, 0x38, // 44
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, // 45
    0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, // 46
    0x00, 0x00, 0xE0, 0x1C, 0x00, 0x38, 0x07, 0x00, // 47
    0x00, 0xF0, 0x08, 0x08, 0x08, 0x08, 0xF0, 0x00, 0x00, 0x07, 0x08, 0x08, 0x08, 0x08, 0x07, 0x00, // 48
    0x00, 0x00, 0x00, 0x10, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, // 49
    0x00, 0x08, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, // 50
    0x00, 0x08, 0x88, 0x88, 0x88, 0x88, 0xF0, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x00, // 51
    0x00, 0x78, 0x80, 0x80, 0x80, 0x80, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, // 52
    0x00, 0x70, 0x88, 0x88, 0x88, 0x88, 0x08, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x00, // 53
    0x00, 0xF8, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x07, 0x08, 0x08, 0x08, 0x08, 0x07, 0x00, // 54
    0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, // 55
    0x00, 0x70, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00, 0x07, 0x08, 0x08, 0x08, 0x08, 0x07, 0x00, // 56
    0x00, 0x70, 0x88, 0x88, 0x88, 0x88, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, // 57
    0x00, 0x60, 0x60, 0x00, 0x0C, 0x0C, // 58
    0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0xE0, 0x00, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0F, // 60
    0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, // 61
    0x00, 0xE0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x0F, 0x07, 0x07, 0x03, 0x03, 0x01, // 62
    0x20, 0x10, 0x10, 0x10, 0xE0, 0x00, 0x00, 0x0A, 0x01, 0x00, // 63
    0x00, 0xC0, 0x28, 0x20, 0x20, 0x28, 0xC0, 0x00, 0x07, 0x09, 0x09, 0x09, 0x09, 0x09, // 64
    0x00, 0xFC, 0x04, 0x04, 0x04, 0x04, 0xF8, 0x00, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x07, // 68  D
    0x00, 0x08, 0x14, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 94  grad
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, // 95
    0x00, 0xC0, 0x20, 0x20, 0x20, 0x20, 0xC0, 0x00, 0x07, 0x09, 0x09, 0x09, 0x09, 0x01, // 101  e
    0x00, 0xE0, 0x40, 0x20, 0x20, 0x40, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, // 114  r
    0x00, 0xFE, 0x00, 0x00, 0x7F, 0x00, // 124
    0x00, 0xC0, 0x20, 0x20, 0x20, 0x20, 0xC0, 0x00, 0x7F, 0x08, 0x08, 0x08, 0x08, 0x07, // 128  ?
    0x00, 0xC0, 0x20, 0x20, 0x20, 0x20, 0x40, 0x00, 0x07, 0x08, 0x08, 0x08, 0x08, 0x04, // 129  ?
    0x00, 0x20, 0x20, 0x20, 0xE0, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, // 130  ?
    0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x07, 0x48, 0x48, 0x48, 0x48, 0x3F, // 131  ?
    0x00, 0xC0, 0x20, 0x20, 0xF8, 0x20, 0x20, 0xC0, 0x00, 0x07, 0x08, 0x08, 0x3F, 0x08, 0x08, 0x07, // 132  ?
    0x00, 0x20, 0x40, 0x80, 0x80, 0x40, 0x20, 0x00, 0x08, 0x04, 0x02, 0x02, 0x04, 0x08, // 133  ?
    0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x07, 0x08, 0x08, 0x08, 0x08, 0x0F, 0x18, // 134  ?
    0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x01, 0x02, 0x02, 0x02, 0x02, 0x0F, // 135  ?
    0x00, 0xE0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xE0, 0x00, 0x07, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x07, // 136  ?
    0x00, 0xE0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x07, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x0F, 0x18, // 137  ?
    0x00, 0x20, 0xE0, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x07, // 138  ?
    0x00, 0xE0, 0x80, 0x80, 0x80, 0x00, 0x00, 0xE0, 0x00, 0x0F, 0x08, 0x08, 0x08, 0x07, 0x00, 0x0F, // 139  ?
    0x00, 0xE0, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x07, // 140  ?
    0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0xC0, 0x00, 0x08, 0x08, 0x09, 0x09, 0x09, 0x07, // 141  ?
    0x00, 0xE0, 0x00, 0x00, 0xC0, 0x20, 0x20, 0x20, 0xC0, 0x00, 0x0F, 0x01, 0x01, 0x07, 0x08, 0x08, 0x08, 0x07, // 142  ?
    0x00, 0xC0, 0x20, 0x20, 0x20, 0x20, 0xE0, 0x00, 0x08, 0x05, 0x03, 0x01, 0x01, 0x0F, // 143  ?
    0x00, 0xF8, 0x04, 0x04, 0x04, 0x04, 0xF8, 0x00, 0x0F, 0x01, 0x01, 0x01, 0x01, 0x0F, // 144  ?
    0x00, 0xFC, 0x44, 0x44, 0x44, 0x44, 0x80, 0x00, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x07, // 145  ?
    0x00, 0xFC, 0x44, 0x44, 0x44, 0x44, 0xB8, 0x00, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x07, // 146  ?
    0x00, 0xFC, 0x04, 0x04, 0x04, 0x04, 0x0C, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, // 147  ?
    0x00, 0x00, 0xF8, 0x04, 0x04, 0x04, 0xFC, 0x00, 0x00, 0x18, 0x0F, 0x08, 0x08, 0x08, 0x0F, 0x18, // 148  ?
    0x00, 0xF8, 0x44, 0x44, 0x44, 0x04, 0x04, 0x00, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, // 149  ?
    0x00, 0x04, 0x18, 0x20, 0xFC, 0x20, 0x18, 0x04, 0x00, 0x08, 0x06, 0x01, 0x0F, 0x01, 0x06, 0x08, // 150  ?
    0x00, 0x04, 0x04, 0x44, 0x44, 0x44, 0xB8, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, // 151  ?
    0x00, 0xFC, 0x00, 0x80, 0x60, 0x18, 0xFC, 0x00, 0x0F, 0x06, 0x01, 0x00, 0x00, 0x0F, // 152  ?
    0x00, 0xF8, 0x00, 0x82, 0x42, 0x30, 0xF8, 0x00, 0x0F, 0x06, 0x01, 0x00, 0x00, 0x0F, // 153  ?
    0x00, 0xFC, 0x40, 0x60, 0x90, 0x08, 0x04, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x03, 0x0C, // 154  ?
    0x00, 0x00, 0xE0, 0x18, 0x04, 0x04, 0xFC, 0x00, 0x0E, 0x01, 0x00, 0x00, 0x00, 0x0F, // 155  ?
    0x00, 0xFC, 0x08, 0x30, 0x40, 0x80, 0x40, 0x30, 0x08, 0xFC, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0F, // 156  ?
    0x00, 0xFC, 0x40, 0x40, 0x40, 0x40, 0xFC, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, // 157  ?
    0x00, 0xF8, 0x04, 0x04, 0x04, 0x04, 0xF8, 0x00, 0x07, 0x08, 0x08, 0x08, 0x08, 0x07, // 158  ?
    0x00, 0xFC, 0x04, 0x04, 0x04, 0x04, 0xFC, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, // 159  ?
    0x00, 0xFC, 0x84, 0x84, 0x84, 0x84, 0x78, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, // 160  ?
    0x00, 0xF8, 0x04, 0x04, 0x04, 0x04, 0x08, 0x00, 0x07, 0x08, 0x08, 0x08, 0x08, 0x04, // 161  ?
    0x00, 0x04, 0x04, 0x04, 0xFC, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, // 162  ?
    0x00, 0x7C, 0x80, 0x80, 0x80, 0x80, 0xFC, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x07, // 163  ?
    0x00, 0xF8, 0x04, 0x04, 0x04, 0xFE, 0x04, 0x04, 0x04, 0xF8, 0x00, 0x07, 0x08, 0x08, 0x08, 0x3F, 0x08, 0x08, 0x08, 0x07, // 164  ?
    0x00, 0x04, 0x18, 0x20, 0xC0, 0x20, 0x18, 0x04, 0x00, 0x08, 0x06, 0x01, 0x00, 0x01, 0x06, 0x08, // 165  ?
    0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x07, 0x08, 0x08, 0x08, 0x08, 0x0F, 0x18, // 166  ?
    0x00, 0x7C, 0x80, 0x80, 0x80, 0x80, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, // 167  ?
    0x00, 0xFC, 0x00, 0x00, 0xF8, 0x00, 0x00, 0xFC, 0x00, 0x07, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x07, // 168  ?
    0x00, 0xFC, 0x00, 0x00, 0xF8, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x07, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x0F, 0x18, // 169  ?
    0x00, 0xFC, 0x40, 0x40, 0x40, 0x80, 0x00, 0xFC, 0x00, 0x0F, 0x08, 0x08, 0x08, 0x07, 0x00, 0x0F, // 171  ?
    0x00, 0xFC, 0x40, 0x40, 0x40, 0x40, 0x80, 0x00, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x07, // 172  ?
    0x00, 0x08, 0x04, 0x04, 0x44, 0x44, 0xF8, 0x00, 0x04, 0x08, 0x08, 0x08, 0x08, 0x07, // 173  ?
    0x00, 0xFC, 0x40, 0x40, 0xF8, 0x04, 0x04, 0x04, 0x04, 0xF8, 0x00, 0x0F, 0x00, 0x00, 0x07, 0x08, 0x08, 0x08, 0x08, 0x07, // 174  ?
    0x00, 0x38, 0x44, 0x44, 0xC4, 0x44, 0xFC, 0x00, 0x08, 0x04, 0x03, 0x00, 0x00, 0x0F, // 175  ?
    0x00, 0xC0, 0x20, 0x20, 0x20, 0x20, 0xC0, 0x00, 0x07, 0x08, 0x08, 0x08, 0x04, 0x0F, // 176  ?
    0x00, 0xE0, 0x50, 0x48, 0x48, 0x48, 0x80, 0x00, 0x07, 0x08, 0x08, 0x08, 0x08, 0x07, // 177  ?
    0x00, 0xE0, 0x20, 0x20, 0x20, 0x20, 0xC0, 0x00, 0x0F, 0x09, 0x09, 0x09, 0x09, 0x06, // 178  ?
    0x00, 0xE0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, // 179  ?
    0x00, 0x00, 0x00, 0xC0, 0x20, 0x20, 0xE0, 0x00, 0x00, 0x18, 0x0F, 0x08, 0x08, 0x08, 0x0F, 0x18, // 180  ?
    0x00, 0xC0, 0x20, 0x20, 0x20, 0x20, 0xC0, 0x00, 0x07, 0x09, 0x09, 0x09, 0x09, 0x01, // 181  ?
    0x00, 0x20, 0x40, 0x80, 0xE0, 0x80, 0x40, 0x20, 0x00, 0x08, 0x04, 0x02, 0x0F, 0x02, 0x04, 0x08, // 182  ?
    0x00, 0x40, 0x20, 0x20, 0x20, 0x20, 0xC0, 0x00, 0x04, 0x08, 0x08, 0x09, 0x09, 0x06, // 183  ?
    0x00, 0xE0, 0x00, 0x00, 0x00, 0x80, 0xE0, 0x00, 0x0F, 0x04, 0x02, 0x01, 0x00, 0x0F, // 184  ?
    0x00, 0xE0, 0x00, 0x08, 0x08, 0x80, 0xE0, 0x00, 0x0F, 0x04, 0x02, 0x01, 0x00, 0x0F, // 185  ?
    0x00, 0xE0, 0x00, 0x00, 0x80, 0x40, 0x20, 0x00, 0x0F, 0x01, 0x01, 0x02, 0x04, 0x08, // 186  ?
    0x00, 0x00, 0x80, 0x40, 0x20, 0x20, 0xE0, 0x00, 0x0C, 0x03, 0x00, 0x00, 0x00, 0x0F, // 187  ?
    0x00, 0xE0, 0x40, 0x80, 0x00, 0x80, 0x40, 0xE0, 0x00, 0x0F, 0x00, 0x01, 0x06, 0x01, 0x00, 0x0F, // 188  ?
    0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x0F, 0x01, 0x01, 0x01, 0x01, 0x0F, // 189  ?
    0x00, 0xC0, 0x20, 0x20, 0x20, 0x20, 0xC0, 0x00, 0x07, 0x08, 0x08, 0x08, 0x08, 0x07, // 190  ?
    0x00, 0xC0, 0x20, 0x20, 0x20, 0x20, 0xC0, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F // 191  ?
    
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\Wendy3x5.h ===

/*
 *
 * Wendy3x5
 *
 *
 * File Name           : Wendy3x5.h
 * Date                : 2012 / 04 / 05
 * Creator             : AustinSaintAubin
 * Notes               : Based on"Wendy" from DAFont.com
 * Font width          : 3
 * Font height         : 5
 * Font first char     : 32
 * Font last char      : 127
 * Font used chars     : 94
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */
#ifndef Wendy3x5_H
#define Wendy3x5_H

#define Wendy3x5_WIDTH 3
#define Wendy3x5_HEIGHT 5

GLCDFONTDECL(Wendy3x5) = {
    0x0, 0x0, // size of zero indicates fixed width font, actual length is width * height
    0x03, // width
    0x05, // height
    0x20, // first char
    0x60, // char count
    
    // Fixed width; char width table not used !!!!
    
    // font data
    0x00, 0x00, 0x00,      // (space)
        0x17, 0x00, 0x00,  // !
        0x03, 0x00, 0x03,  // "
        0x0A, 0x1F, 0x0A,  // #
        0x16, 0x13, 0x1A,  // 0x
        0x09, 0x04, 0x0A,  // %
        0x0A, 0x15, 0x1A,  // &
        0x03, 0x00, 0x00,  // '
        0x00, 0x0E, 0x11,  // (
        0x11, 0x0E, 0x00,  // )
        0x06, 0x06, 0x00,  // *
        0x04, 0x0E, 0x04,  // +
        0x0C, 0x1C, 0x00,  // ,
        0x04, 0x04, 0x04,  // -
        0x10, 0x00, 0x00,  // .
        0x18, 0x04, 0x03,  // /
        0x1F, 0x11, 0x1F,  // 0
        0x02, 0x1F, 0x00,  // 1
        0x1D, 0x15, 0x17,  // 2
        0x15, 0x15, 0x1F,  // 3
        0x0F, 0x08, 0x1E,  // 4
        0x17, 0x15, 0x1D,  // 5
        0x1F, 0x15, 0x1D,  // 6
        0x01, 0x01, 0x1F,  // 7
        0x1F, 0x15, 0x1F,  // 8
        0x17, 0x15, 0x1F,  // 9
        0x00, 0x0A, 0x00,  // :
        0x00, 0x1A, 0x00,  // ;
        0x04, 0x0A, 0x11,  // <
        0x0A, 0x0A, 0x0A,  // =
        0x11, 0x0A, 0x04,  // >
        0x00, 0x15, 0x07,  // ?
        0x1F, 0x15, 0x17,  // @
        0x1F, 0x05, 0x1F,  // A
        0x1F, 0x15, 0x1B,  // B
        0x1F, 0x11, 0x11,  // C
        0x1F, 0x11, 0x0E,  // D
        0x1F, 0x15, 0x15,  // E
        0x1F, 0x05, 0x01,  // F
        0x1F, 0x11, 0x1D,  // G
        0x1F, 0x04, 0x1F,  // H
        0x11, 0x1F, 0x11,  // I
        0x08, 0x10, 0x0F,  // J
        0x1F, 0x04, 0x1B,  // K
        0x1F, 0x10, 0x10,  // L
        0x1F, 0x06, 0x1F,  // M
        0x1C, 0x04, 0x1C,  // N
        0x1F, 0x11, 0x1F,  // O
        0x1F, 0x05, 0x07,  // P
        0x0E, 0x19, 0x1E,  // Q
        0x1F, 0x05, 0x1B,  // R
        0x17, 0x15, 0x1D,  // S
        0x01, 0x1F, 0x01,  // T
        0x1F, 0x10, 0x1F,  // U
        0x0F, 0x10, 0x0F,  // V
        0x1F, 0x0C, 0x1F,  // W
        0x1B, 0x04, 0x1B,  // X
        0x17, 0x14, 0x1F,  // Y
        0x19, 0x15, 0x13,  // Z
        0x00, 0x1F, 0x11,  // [
        0x03, 0x04, 0x18,  // BackSlash
        0x11, 0x1F, 0x00,  // ]
        0x06, 0x01, 0x06,  // ^
        0x10, 0x10, 0x10,  // _
        0x01, 0x01, 0x02,  // `
        0x18, 0x14, 0x1C,  // a
        0x1F, 0x14, 0x1C,  // b
        0x1C, 0x14, 0x14,  // c
        0x1C, 0x14, 0x1F,  // d
        0x0C, 0x1A, 0x14,  // e
        0x04, 0x1E, 0x05,  // f
        0x17, 0x15, 0x1E,  // g
        0x1F, 0x04, 0x1C,  // h
        0x00, 0x1D, 0x00,  // i
        0x08, 0x10, 0x0D,  // j
        0x1F, 0x0C, 0x1A,  // k
        0x00, 0x1F, 0x00,  // l
        0x18, 0x0C, 0x18,  // m
        0x18, 0x04, 0x18,  // n
        0x1E, 0x12, 0x1E,  // o
        0x1F, 0x05, 0x07,  // p
        0x07, 0x05, 0x1F,  // q
        0x1E, 0x04, 0x04,  // r
        0x12, 0x15, 0x09,  // s
        0x02, 0x1F, 0x02,  // t
        0x1C, 0x10, 0x1C,  // u
        0x0C, 0x10, 0x0C,  // v
        0x0C, 0x18, 0x0C,  // w
        0x14, 0x08, 0x14,  // x
        0x16, 0x18, 0x06,  // y
        0x04, 0x1C, 0x10,  // z
        0x04, 0x0E, 0x11,  // {
        0x00, 0x1F, 0x00,  // |
        0x11, 0x0E, 0x04,  // }
        0x02, 0x04, 0x02,  // ~
        0x1F, 0x1F, 0x1F   // 
};

#endif


=== Файл: src\SSD1306Ascii\src\fonts\X11fixed7x14.h ===

// STARTFONT 2.1
// COMMENT "$Id: 7x14.bdf,v 1.47 2006-01-05 20:24:11+00 mgk25 Rel $"
// COMMENT "Send bug reports to Markus Kuhn <http://www.cl.cam.ac.uk/~mgk25/>"
// FONT -Misc-Fixed-Medium-R-Normal--14-130-75-75-C-70-ISO10646-1
//
// Note: Pixels are only six columns wide.
//
#ifndef X11fixed7x14_h
#define X11fixed7x14_h

GLCDFONTDECL(X11fixed7x14) = {
  0x0, 0x0, // size of zero indicates fixed width font,
  6,    // width
  14,   // height
  0x20, // first char
  0x60, // char count  
  0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,  // space
  0X00,0X00,0X00,0XFC,0X00,0X00,0X00,0X00,0X00,0X0D,0X00,0X00,  // exclam
  0X00,0X00,0X1E,0X00,0X1E,0X00,0X00,0X00,0X00,0X00,0X00,0X00,  // quotedbl
  0X00,0X20,0XFC,0X20,0XFC,0X20,0X00,0X01,0X0F,0X01,0X0F,0X01,  // numbersign
  0X30,0X48,0X88,0XFC,0X88,0X30,0X06,0X08,0X08,0X1F,0X08,0X07,  // dollar
  0X18,0X24,0XA4,0X78,0X10,0X0C,0X0C,0X02,0X07,0X09,0X09,0X06,  // percent
  0X00,0XB8,0XC4,0X44,0X38,0X80,0X07,0X08,0X08,0X05,0X06,0X09,  // ampersand
  0X00,0X00,0X00,0X1E,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,  // quotesingle
  0X00,0X00,0XE0,0X18,0X04,0X02,0X00,0X00,0X03,0X0C,0X10,0X20,  // parenleft
  0X00,0X02,0X04,0X18,0XE0,0X00,0X00,0X20,0X10,0X0C,0X03,0X00,  // parenright
  0X00,0X20,0X40,0XF0,0X40,0X20,0X00,0X02,0X01,0X07,0X01,0X02,  // asterisk
  0X00,0X80,0X80,0XF0,0X80,0X80,0X00,0X00,0X00,0X07,0X00,0X00,  // plus
  0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X24,0X1C,0X00,0X00,  // comma
  0X00,0X80,0X80,0X80,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X00,  // hyphen
  0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X08,0X1C,0X08,0X00,  // period
  0X00,0X00,0X00,0XE0,0X18,0X06,0X30,0X0C,0X03,0X00,0X00,0X00,  // slash
  0XF0,0X08,0X04,0X04,0X08,0XF0,0X03,0X04,0X08,0X08,0X04,0X03,  // zero
  0X00,0X10,0X08,0XFC,0X00,0X00,0X00,0X08,0X08,0X0F,0X08,0X08,  // one
  0X18,0X04,0X04,0X04,0XC4,0X38,0X08,0X0C,0X0A,0X09,0X08,0X08,  // two
  0X04,0X04,0X44,0X64,0X54,0X8C,0X06,0X08,0X08,0X08,0X08,0X07,  // three
  0X00,0XC0,0X30,0X08,0XFC,0X00,0X03,0X02,0X02,0X02,0X0F,0X02,  // four
  0X7C,0X24,0X24,0X24,0X24,0XC4,0X06,0X08,0X08,0X08,0X08,0X07,  // five
  0XF0,0X88,0X44,0X44,0X44,0X80,0X07,0X08,0X08,0X08,0X08,0X07,  // six
  0X04,0X04,0X04,0XC4,0X34,0X0C,0X00,0X0C,0X03,0X00,0X00,0X00,  // seven
  0X18,0XA4,0X44,0X44,0XA4,0X18,0X07,0X08,0X08,0X08,0X08,0X07,  // eight
  0X78,0X84,0X84,0X84,0X44,0XF8,0X06,0X08,0X08,0X08,0X04,0X03,  // nine
  0X00,0X00,0X20,0X70,0X20,0X00,0X00,0X00,0X04,0X0E,0X04,0X00,  // colon
  0X00,0X00,0X60,0X60,0X00,0X00,0X00,0X00,0X12,0X0E,0X00,0X00,  // semicolon
  0X00,0X80,0X40,0X20,0X10,0X08,0X00,0X00,0X01,0X02,0X04,0X08,  // less
  0X20,0X20,0X20,0X20,0X20,0X20,0X01,0X01,0X01,0X01,0X01,0X01,  // equal
  0X00,0X08,0X10,0X20,0X40,0X80,0X00,0X08,0X04,0X02,0X01,0X00,  // greater
  0X18,0X04,0X04,0XC4,0X24,0X18,0X00,0X00,0X00,0X0D,0X00,0X00,  // question
  0XF0,0X08,0XE4,0X14,0X14,0XF8,0X03,0X04,0X09,0X0A,0X0A,0X0B,  // at
  0XF0,0X88,0X84,0X84,0X88,0XF0,0X0F,0X00,0X00,0X00,0X00,0X0F,  // A
  0XFC,0X44,0X44,0X44,0XA8,0X10,0X0F,0X08,0X08,0X08,0X04,0X03,  // B
  0XF8,0X04,0X04,0X04,0X04,0X18,0X07,0X08,0X08,0X08,0X08,0X06,  // C
  0XFC,0X04,0X04,0X04,0X08,0XF0,0X0F,0X08,0X08,0X08,0X04,0X03,  // D
  0XFC,0X44,0X44,0X44,0X04,0X04,0X0F,0X08,0X08,0X08,0X08,0X08,  // E
  0XFC,0X44,0X44,0X44,0X04,0X04,0X0F,0X00,0X00,0X00,0X00,0X00,  // F
  0XF8,0X04,0X04,0X84,0X84,0X98,0X07,0X08,0X08,0X08,0X04,0X0F,  // G
  0XFC,0X40,0X40,0X40,0X40,0XFC,0X0F,0X00,0X00,0X00,0X00,0X0F,  // H
  0X00,0X04,0X04,0XFC,0X04,0X04,0X00,0X08,0X08,0X0F,0X08,0X08,  // I
  0X00,0X00,0X00,0X04,0XFC,0X04,0X06,0X08,0X08,0X08,0X07,0X00,  // J
  0XFC,0X40,0XA0,0X10,0X08,0X04,0X0F,0X00,0X00,0X01,0X02,0X0C,  // K
  0XFC,0X00,0X00,0X00,0X00,0X00,0X0F,0X08,0X08,0X08,0X08,0X08,  // L
  0XFC,0X18,0X60,0X60,0X18,0XFC,0X0F,0X00,0X00,0X00,0X00,0X0F,  // M
  0XFC,0X30,0X40,0X80,0X00,0XFC,0X0F,0X00,0X00,0X00,0X03,0X0F,  // N
  0XF8,0X04,0X04,0X04,0X04,0XF8,0X07,0X08,0X08,0X08,0X08,0X07,  // O
  0XFC,0X84,0X84,0X84,0X84,0X78,0X0F,0X00,0X00,0X00,0X00,0X00,  // P
  0XF8,0X04,0X04,0X04,0X04,0XF8,0X07,0X09,0X09,0X0A,0X1C,0X27,  // Q
  0XFC,0X84,0X84,0X84,0X84,0X78,0X0F,0X00,0X00,0X01,0X02,0X0C,  // R
  0X38,0X44,0X44,0X84,0X84,0X18,0X06,0X08,0X08,0X08,0X08,0X07,  // S
  0X04,0X04,0X04,0XFC,0X04,0X04,0X00,0X00,0X00,0X0F,0X00,0X00,  // T
  0XFC,0X00,0X00,0X00,0X00,0XFC,0X07,0X08,0X08,0X08,0X08,0X07,  // U
  0X3C,0XC0,0X00,0X00,0XC0,0X3C,0X00,0X01,0X0E,0X0E,0X01,0X00,  // V
  0X00,0XFC,0X00,0X00,0X00,0XFC,0X00,0X07,0X08,0X07,0X08,0X07,  // W
  0X0C,0X30,0XC0,0XC0,0X30,0X0C,0X0C,0X03,0X00,0X00,0X03,0X0C,  // X
  0X00,0X1C,0X60,0X80,0X60,0X1C,0X00,0X00,0X00,0X0F,0X00,0X00,  // Y
  0X04,0X04,0X84,0X64,0X14,0X0C,0X0C,0X0B,0X08,0X08,0X08,0X08,  // Z
  0X00,0X00,0XFE,0X02,0X02,0X02,0X00,0X00,0X3F,0X20,0X20,0X20,  // bracketleft
  0X06,0X18,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X0C,0X30,  // backslash
  0X00,0X02,0X02,0X02,0XFE,0X00,0X00,0X20,0X20,0X20,0X3F,0X00,  // bracketright
  0X08,0X04,0X02,0X02,0X04,0X08,0X00,0X00,0X00,0X00,0X00,0X00,  // asciicircum
  0X00,0X00,0X00,0X00,0X00,0X00,0X20,0X20,0X20,0X20,0X20,0X20,  // underscore
  0X00,0X00,0X02,0X04,0X08,0X00,0X00,0X00,0X00,0X00,0X00,0X00,  // grave
  0X40,0X20,0X20,0X20,0X20,0XC0,0X06,0X09,0X09,0X09,0X09,0X0F,  // a
  0XFC,0X40,0X20,0X20,0X20,0XC0,0X0F,0X04,0X08,0X08,0X08,0X07,  // b
  0XC0,0X20,0X20,0X20,0X20,0X40,0X07,0X08,0X08,0X08,0X08,0X04,  // c
  0XC0,0X20,0X20,0X20,0X40,0XFC,0X07,0X08,0X08,0X08,0X04,0X0F,  // d
  0XC0,0X20,0X20,0X20,0X20,0XC0,0X07,0X09,0X09,0X09,0X09,0X05,  // e
  0X40,0X40,0XF8,0X44,0X44,0X08,0X00,0X00,0X0F,0X00,0X00,0X00,  // f
  0XC0,0X20,0X20,0X20,0XC0,0X20,0X19,0X26,0X2A,0X2A,0X29,0X10,  // g
  0XFC,0X40,0X20,0X20,0X20,0XC0,0X0F,0X00,0X00,0X00,0X00,0X0F,  // h
  0X00,0X00,0X20,0XEC,0X00,0X00,0X00,0X08,0X08,0X0F,0X08,0X08,  // i
  0X00,0X00,0X00,0X00,0X20,0XEC,0X00,0X18,0X20,0X20,0X20,0X1F,  // j
  0XFC,0X00,0X80,0X40,0X20,0X00,0X0F,0X01,0X01,0X02,0X04,0X08,  // k
  0X00,0X00,0X04,0XFC,0X00,0X00,0X00,0X08,0X08,0X0F,0X08,0X08,  // l
  0X00,0XE0,0X20,0XC0,0X20,0XC0,0X00,0X0F,0X00,0X07,0X00,0X0F,  // m
  0XE0,0X40,0X20,0X20,0X20,0XC0,0X0F,0X00,0X00,0X00,0X00,0X0F,  // n
  0XC0,0X20,0X20,0X20,0X20,0XC0,0X07,0X08,0X08,0X08,0X08,0X07,  // o
  0XE0,0X40,0X20,0X20,0X20,0XC0,0X3F,0X04,0X08,0X08,0X08,0X07,  // p
  0XC0,0X20,0X20,0X20,0X40,0XE0,0X07,0X08,0X08,0X08,0X04,0X3F,  // q
  0XE0,0X40,0X20,0X20,0X20,0XC0,0X0F,0X00,0X00,0X00,0X00,0X00,  // r
  0X40,0XA0,0X20,0X20,0X20,0X40,0X04,0X08,0X09,0X09,0X0A,0X04,  // s
  0X20,0X20,0XFC,0X20,0X20,0X00,0X00,0X00,0X07,0X08,0X08,0X04,  // t
  0XE0,0X00,0X00,0X00,0X00,0XE0,0X07,0X08,0X08,0X08,0X04,0X0F,  // u
  0X00,0XE0,0X00,0X00,0X00,0XE0,0X00,0X00,0X03,0X0C,0X03,0X00,  // v
  0X00,0XE0,0X00,0X80,0X00,0XE0,0X00,0X07,0X08,0X07,0X08,0X07,  // w
  0X60,0X80,0X00,0X00,0X80,0X60,0X0C,0X02,0X01,0X01,0X02,0X0C,  // x
  0XE0,0X00,0X00,0X00,0X00,0XE0,0X13,0X24,0X24,0X24,0X22,0X1F,  // y
  0X20,0X20,0X20,0XA0,0X60,0X20,0X08,0X0C,0X0B,0X08,0X08,0X08,  // z
  0X00,0X00,0X80,0X7C,0X02,0X02,0X00,0X00,0X00,0X1F,0X20,0X20,  // braceleft
  0X00,0X00,0X00,0XFE,0X00,0X00,0X00,0X00,0X00,0X3F,0X00,0X00,  // bar
  0X00,0X02,0X02,0X7C,0X80,0X00,0X00,0X20,0X20,0X1F,0X00,0X00,  // braceright
  0X0C,0X02,0X04,0X08,0X10,0X0C,0X00,0X00,0X00,0X00,0X00,0X00,  // asciitilde
  0XFE,0XFE,0XFE,0XFE,0XFE,0XFE,0X3F,0X3F,0X3F,0X3F,0X3F,0X3F   // del
};
#endif  // X11fixed7x14_h


=== Файл: src\SSD1306Ascii\src\fonts\X11fixed7x14B.h ===

// STARTFONT 2.1
// COMMENT "$Id: 7x14B.bdf,v 1.25 2003-07-26 14:55:51+01 mgk25 Rel $"
// COMMENT "Send bug reports to Markus Kuhn <http://www.cl.cam.ac.uk/~mgk25/>"
// FONT -Misc-Fixed-Bold-R-Normal--14-130-75-75-C-70-ISO10646-1
//
// Note: Pixels are only six columns wide.
//
#ifndef X11fixed7x14B_h
#define X11fixed7x14B_h
GLCDFONTDECL(X11fixed7x14B) = {
  0x0, 0x0, // size of zero indicates fixed width font,
  6,    // width
  14,   // height
  0x20, // first char
  0x60, // char count  
  0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,  // space
  0X00,0X00,0XFC,0XFC,0X00,0X00,0X00,0X00,0X0D,0X0D,0X00,0X00,  // exclam
  0X00,0X1E,0X1E,0X00,0X1E,0X1E,0X00,0X00,0X00,0X00,0X00,0X00,  // quotedbl
  0X20,0XFC,0XFC,0XFC,0XFC,0X20,0X01,0X0F,0X0F,0X0F,0X0F,0X01,  // numbersign
  0X30,0X48,0XFC,0XFC,0X88,0X30,0X06,0X08,0X1F,0X1F,0X08,0X07,  // dollar
  0X18,0X3C,0XA4,0X78,0X1C,0X0C,0X0C,0X0E,0X07,0X09,0X0F,0X06,  // percent
  0X00,0XB8,0XFC,0X44,0XFC,0XB8,0X07,0X0F,0X08,0X07,0X0F,0X09,  // ampersand
  0X00,0X00,0X1E,0X1E,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,  // quotesingle
  0X00,0XE0,0XF8,0X1C,0X06,0X02,0X00,0X03,0X0F,0X1C,0X30,0X20,  // parenleft
  0X00,0X02,0X06,0X1C,0XF8,0XE0,0X00,0X20,0X30,0X1C,0X0F,0X03,  // parenright
  0X8C,0X50,0XFC,0XFC,0X50,0X8C,0X01,0X00,0X01,0X01,0X00,0X01,  // asterisk
  0X80,0X80,0XF0,0XF0,0X80,0X80,0X00,0X00,0X07,0X07,0X00,0X00,  // plus
  0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X24,0X3C,0X1C,0X00,  // comma
  0X80,0X80,0X80,0X80,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X00,  // hyphen
  0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X0C,0X0C,0X00,0X00,  // period
  0X00,0X00,0XC0,0XF0,0X3E,0X0E,0X38,0X3E,0X07,0X01,0X00,0X00,  // slash
  0XF8,0XFC,0X04,0X04,0XFC,0XF8,0X07,0X0F,0X08,0X08,0X0F,0X07,  // zero
  0X10,0X18,0XFC,0XFC,0X00,0X00,0X08,0X08,0X0F,0X0F,0X08,0X08,  // one
  0X18,0X1C,0X04,0XC4,0XFC,0X38,0X0C,0X0E,0X0B,0X09,0X08,0X08,  // two
  0X18,0X1C,0X44,0X44,0XFC,0XB8,0X06,0X0E,0X08,0X08,0X0F,0X07,  // three
  0X80,0XC0,0X60,0XF8,0XFC,0X00,0X03,0X03,0X02,0X0F,0X0F,0X02,  // four
  0X7C,0X7C,0X24,0X24,0XE4,0XC4,0X06,0X0E,0X08,0X08,0X0F,0X07,  // five
  0XF0,0XF8,0X4C,0X44,0XDC,0X98,0X07,0X0F,0X08,0X08,0X0F,0X07,  // six
  0X1C,0X1C,0XC4,0XF4,0X3C,0X0C,0X00,0X00,0X0F,0X0F,0X00,0X00,  // seven
  0X38,0XFC,0XC4,0XC4,0XFC,0X38,0X07,0X0F,0X08,0X08,0X0F,0X07,  // eight
  0X78,0XFC,0X84,0X84,0XFC,0XF8,0X06,0X0E,0X08,0X0C,0X07,0X03,  // nine
  0X00,0X00,0X30,0X30,0X00,0X00,0X00,0X00,0X06,0X06,0X00,0X00,  // colon
  0X00,0X00,0X00,0X30,0X30,0X00,0X00,0X00,0X12,0X1E,0X0E,0X00,  // semicolon
  0X80,0XC0,0X60,0X30,0X18,0X08,0X00,0X01,0X03,0X06,0X0C,0X08,  // less
  0X40,0X40,0X40,0X40,0X40,0X40,0X02,0X02,0X02,0X02,0X02,0X02,  // equal
  0X08,0X18,0X30,0X60,0XC0,0X80,0X08,0X0C,0X06,0X03,0X01,0X00,  // greater
  0X18,0X1C,0XC4,0XE4,0X3C,0X18,0X00,0X00,0X0D,0X0D,0X00,0X00,  // question
  0XF0,0XF8,0XEC,0XF4,0X1C,0XF8,0X03,0X07,0X0D,0X0B,0X0A,0X0B,  // at
  0XF8,0XFC,0X0C,0X0C,0XFC,0XF8,0X0F,0X0F,0X01,0X01,0X0F,0X0F,  // A
  0XFC,0XFC,0X44,0X44,0XFC,0X98,0X0F,0X0F,0X08,0X08,0X0F,0X07,  // B
  0XF8,0XFC,0X04,0X04,0X1C,0X18,0X07,0X0F,0X08,0X08,0X0E,0X06,  // C
  0XFC,0XFC,0X04,0X0C,0XF8,0XF0,0X0F,0X0F,0X08,0X0C,0X07,0X03,  // D
  0XFC,0XFC,0X44,0X44,0X44,0X04,0X0F,0X0F,0X08,0X08,0X08,0X08,  // E
  0XFC,0XFC,0X44,0X44,0X44,0X04,0X0F,0X0F,0X00,0X00,0X00,0X00,  // F
  0XF8,0XFC,0X04,0X84,0X9C,0X98,0X07,0X0F,0X08,0X08,0X0F,0X07,  // G
  0XFC,0XFC,0X40,0X40,0XFC,0XFC,0X0F,0X0F,0X00,0X00,0X0F,0X0F,  // H
  0X04,0X04,0XFC,0XFC,0X04,0X04,0X08,0X08,0X0F,0X0F,0X08,0X08,  // I
  0X00,0X00,0X00,0X00,0XFC,0XFC,0X06,0X0E,0X08,0X0C,0X07,0X03,  // J
  0XFC,0XFC,0XF0,0X98,0X0C,0X04,0X0F,0X0F,0X01,0X03,0X0E,0X0C,  // K
  0XFC,0XFC,0X00,0X00,0X00,0X00,0X0F,0X0F,0X08,0X08,0X08,0X08,  // L
  0XFC,0XF8,0X60,0X60,0XF8,0XFC,0X0F,0X0F,0X00,0X00,0X0F,0X0F,  // M
  0XFC,0XFC,0X70,0X80,0XFC,0XFC,0X0F,0X0F,0X00,0X03,0X0F,0X0F,  // N
  0XF8,0XFC,0X04,0X04,0XFC,0XF8,0X07,0X0F,0X08,0X08,0X0F,0X07,  // O
  0XFC,0XFC,0X84,0X84,0XFC,0X78,0X0F,0X0F,0X00,0X00,0X00,0X00,  // P
  0XF8,0XFC,0X04,0X04,0XFC,0XF8,0X07,0X0F,0X09,0X0A,0X1F,0X37,  // Q
  0XFC,0XFC,0X44,0XC4,0XFC,0X38,0X0F,0X0F,0X00,0X00,0X0F,0X0F,  // R
  0X18,0X3C,0XE4,0XC4,0X1C,0X18,0X06,0X0E,0X08,0X09,0X0F,0X06,  // S
  0X04,0X04,0XFC,0XFC,0X04,0X04,0X00,0X00,0X0F,0X0F,0X00,0X00,  // T
  0XFC,0XFC,0X00,0X00,0XFC,0XFC,0X07,0X0F,0X08,0X08,0X0F,0X07,  // U
  0XFC,0XFC,0X00,0X00,0XFC,0XFC,0X01,0X07,0X0E,0X0E,0X07,0X01,  // V
  0XFC,0XFC,0X80,0X80,0XFC,0XFC,0X07,0X0F,0X07,0X07,0X0F,0X07,  // W
  0X0C,0X3C,0XF0,0XF0,0X3C,0X0C,0X0C,0X0F,0X03,0X03,0X0F,0X0C,  // X
  0X1C,0X7C,0XE0,0XE0,0X7C,0X1C,0X00,0X00,0X0F,0X0F,0X00,0X00,  // Y
  0X04,0X04,0XC4,0XF4,0X3C,0X0C,0X0C,0X0F,0X0B,0X08,0X08,0X08,  // Z
  0X00,0XFE,0XFE,0X02,0X02,0X02,0X00,0X3F,0X3F,0X20,0X20,0X20,  // bracketleft
  0X0E,0X3E,0XF0,0XC0,0X00,0X00,0X00,0X00,0X01,0X07,0X3E,0X38,  // backslash
  0X00,0X02,0X02,0X02,0XFE,0XFE,0X00,0X20,0X20,0X20,0X3F,0X3F,  // bracketright
  0X04,0X06,0X03,0X03,0X06,0X04,0X00,0X00,0X00,0X00,0X00,0X00,  // asciicircum
  0X00,0X00,0X00,0X00,0X00,0X00,0X30,0X30,0X30,0X30,0X30,0X30,  // underscore
  0X00,0X02,0X06,0X0C,0X08,0X00,0X00,0X00,0X00,0X00,0X00,0X00,  // grave
  0X40,0X60,0X20,0XA0,0XE0,0XC0,0X06,0X0F,0X09,0X08,0X0F,0X0F,  // a
  0XFC,0XFC,0X20,0X20,0XE0,0XC0,0X0F,0X0F,0X08,0X08,0X0F,0X07,  // b
  0XC0,0XE0,0X20,0X20,0X60,0X40,0X07,0X0F,0X08,0X08,0X0C,0X04,  // c
  0XC0,0XE0,0X20,0X20,0XFC,0XFC,0X07,0X0F,0X08,0X08,0X0F,0X0F,  // d
  0XC0,0XE0,0X20,0X20,0XE0,0XC0,0X07,0X0F,0X09,0X09,0X0D,0X05,  // e
  0X40,0X40,0XF8,0XFC,0X4C,0X48,0X00,0X00,0X0F,0X0F,0X00,0X00,  // f
  0XC0,0XE0,0X20,0XE0,0XC0,0X60,0X19,0X3F,0X2A,0X2B,0X39,0X10,  // g
  0XFC,0XFC,0X20,0X20,0XE0,0XC0,0X0F,0X0F,0X00,0X00,0X0F,0X0F,  // h
  0X00,0X00,0XEC,0XEC,0X00,0X00,0X00,0X00,0X0F,0X0F,0X00,0X00,  // i
  0X00,0X00,0X00,0X00,0XEC,0XEC,0X00,0X10,0X30,0X20,0X3F,0X1F,  // j
  0XFC,0XFC,0X80,0XC0,0X60,0X00,0X0F,0X0F,0X01,0X03,0X06,0X0C,  // k
  0X00,0X00,0XFC,0XFC,0X00,0X00,0X00,0X00,0X0F,0X0F,0X00,0X00,  // l
  0XE0,0XE0,0XC0,0XE0,0XE0,0XC0,0X0F,0X0F,0X07,0X07,0X0F,0X0F,  // m
  0XE0,0XE0,0X20,0X20,0XE0,0XC0,0X0F,0X0F,0X00,0X00,0X0F,0X0F,  // n
  0XC0,0XE0,0X20,0X20,0XE0,0XC0,0X07,0X0F,0X08,0X08,0X0F,0X07,  // o
  0XE0,0XE0,0X20,0X20,0XE0,0XC0,0X3F,0X3F,0X08,0X08,0X0F,0X07,  // p
  0XC0,0XE0,0X20,0X20,0XE0,0XE0,0X07,0X0F,0X08,0X08,0X3F,0X3F,  // q
  0XE0,0XE0,0X20,0X20,0XE0,0XC0,0X0F,0X0F,0X00,0X00,0X00,0X00,  // r
  0X40,0XE0,0XA0,0X20,0X60,0X40,0X04,0X0C,0X09,0X0B,0X0E,0X04,  // s
  0X20,0X20,0XFC,0XFC,0X20,0X20,0X00,0X00,0X07,0X0F,0X08,0X08,  // t
  0XE0,0XE0,0X00,0X00,0XE0,0XE0,0X07,0X0F,0X08,0X08,0X0F,0X0F,  // u
  0XE0,0XE0,0X00,0X00,0XE0,0XE0,0X00,0X03,0X0F,0X0F,0X03,0X00,  // v
  0XE0,0XE0,0X80,0X80,0XE0,0XE0,0X07,0X0F,0X07,0X07,0X0F,0X07,  // w
  0X60,0XE0,0X80,0X80,0XE0,0X60,0X0C,0X0E,0X03,0X03,0X0E,0X0C,  // x
  0X60,0XE0,0X80,0X00,0XE0,0XE0,0X10,0X31,0X27,0X3E,0X1F,0X01,  // y
  0X20,0X20,0X20,0XA0,0XE0,0X60,0X0C,0X0E,0X0B,0X09,0X08,0X08,  // z
  0X00,0X80,0XFC,0X7E,0X02,0X02,0X00,0X00,0X1F,0X3F,0X20,0X20,  // braceleft
  0X00,0X00,0XFE,0XFE,0X00,0X00,0X00,0X00,0X3F,0X3F,0X00,0X00,  // bar
  0X00,0X02,0X02,0X7E,0XFC,0X80,0X00,0X20,0X20,0X3F,0X1F,0X00,  // braceright
  0X1C,0X06,0X0C,0X0C,0X18,0X0E,0X00,0X00,0X00,0X00,0X00,0X00,  // asciitilde
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X3F,0X3F,0X3F,0X3F,0X3F,0X3F   // del
};
#endif  // X11fixed7x14B_h


=== Файл: src\SSD1306Ascii\src\fonts\ZevvPeep8x16.h ===

// STARTFONT 2.1
// FONT -zevv-peep-Medium-R-Normal--16-140-75-75-C-80-ISO8859-1
#ifndef font8x16_h
#define font8x16_h

GLCDFONTDECL(ZevvPeep8x16) = {
  0x0, 0x0, // size of zero indicates fixed width font,
  7,        // width
  14,       // height
  0x20,     // first char
  0x60,     // char count  
  0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,  // ' '
  0X00,0X00,0XFC,0X00,0X00,0X00,0X00,0X00,0X00,0X0D,0X00,0X00,0X00,0X00,  // '!'
  0X00,0X3C,0X00,0X3C,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,  // '"'
  0X20,0XF8,0X20,0X20,0XF8,0X20,0X00,0X01,0X07,0X01,0X01,0X07,0X01,0X00,  // '#'
  0X60,0X90,0XF8,0X90,0X10,0X00,0X00,0X04,0X04,0X0F,0X04,0X03,0X00,0X00,  // '$'
  0X18,0X24,0X98,0X60,0X10,0X0C,0X00,0X0C,0X02,0X01,0X06,0X09,0X06,0X00,  // '%'
  0X30,0XC8,0XC8,0X30,0X00,0X00,0X00,0X07,0X08,0X08,0X09,0X06,0X09,0X00,  // '&'
  0X00,0X00,0X3C,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,  // '''
  0X00,0X00,0XE0,0X18,0X04,0X02,0X00,0X00,0X00,0X03,0X0C,0X10,0X20,0X00,  // '('
  0X02,0X04,0X18,0XE0,0X00,0X00,0X00,0X20,0X10,0X0C,0X03,0X00,0X00,0X00,  // ')'
  0X80,0XA0,0XC0,0XC0,0XA0,0X80,0X00,0X00,0X02,0X01,0X01,0X02,0X00,0X00,  // '*'
  0X80,0X80,0X80,0XF0,0X80,0X80,0X80,0X00,0X00,0X00,0X07,0X00,0X00,0X00,  // '+'
  0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X20,0X18,0X0C,0X04,0X00,0X00,0X00,  // ','
  0X80,0X80,0X80,0X80,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,  // '-'
  0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X08,0X1C,0X08,0X00,0X00,0X00,  // '.'
  0X00,0X00,0X80,0X60,0X18,0X06,0X00,0X18,0X06,0X01,0X00,0X00,0X00,0X00,  // '/'
  0XF0,0X08,0X84,0X44,0X08,0XF0,0X00,0X03,0X04,0X08,0X08,0X04,0X03,0X00,  // '0'
  0X20,0X10,0X08,0XFC,0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0X00,0X00,0X00,  // '1'
  0X18,0X04,0X04,0X84,0X44,0X38,0X00,0X0C,0X0A,0X09,0X08,0X08,0X08,0X00,  // '2'
  0X08,0X04,0X44,0X44,0X44,0XB8,0X00,0X06,0X08,0X08,0X08,0X08,0X07,0X00,  // '3'
  0X80,0X60,0X18,0X04,0XFC,0X00,0X00,0X01,0X01,0X01,0X01,0X0F,0X01,0X00,  // '4'
  0X7C,0X24,0X24,0X24,0X24,0XC4,0X00,0X06,0X08,0X08,0X08,0X08,0X07,0X00,  // '5'
  0XF8,0X84,0X44,0X44,0X44,0X88,0X00,0X07,0X08,0X08,0X08,0X08,0X07,0X00,  // '6'
  0X04,0X04,0X04,0XC4,0X34,0X0C,0X00,0X00,0X0C,0X03,0X00,0X00,0X00,0X00,  // '7'
  0XB8,0X44,0X44,0X44,0X44,0XB8,0X00,0X07,0X08,0X08,0X08,0X08,0X07,0X00,  // '8'
  0X78,0X84,0X84,0X84,0X44,0XF8,0X00,0X04,0X08,0X08,0X08,0X08,0X07,0X00,  // '9'
  0X00,0X20,0X70,0X20,0X00,0X00,0X00,0X00,0X08,0X1C,0X08,0X00,0X00,0X00,  // ':'
  0X00,0X20,0X70,0X20,0X00,0X00,0X00,0X20,0X18,0X0C,0X04,0X00,0X00,0X00,  // ';'
  0X80,0X40,0X20,0X10,0X08,0X00,0X00,0X00,0X01,0X02,0X04,0X08,0X00,0X00,  // '<'
  0X40,0X40,0X40,0X40,0X40,0X40,0X00,0X02,0X02,0X02,0X02,0X02,0X02,0X00,  // '='
  0X00,0X08,0X10,0X20,0X40,0X80,0X00,0X00,0X08,0X04,0X02,0X01,0X00,0X00,  // '>'
  0X04,0X84,0X44,0X24,0X18,0X00,0X00,0X00,0X0D,0X00,0X00,0X00,0X00,0X00,  // '?'
  0XF0,0X08,0XC4,0X24,0X24,0XF8,0X00,0X03,0X04,0X09,0X0A,0X0A,0X03,0X00,  // '@'
  0XF8,0X84,0X84,0X84,0X84,0XF8,0X00,0X0F,0X00,0X00,0X00,0X00,0X0F,0X00,  // 'A'
  0XFC,0X44,0X44,0X44,0X78,0X80,0X00,0X0F,0X08,0X08,0X08,0X08,0X07,0X00,  // 'B'
  0XF8,0X04,0X04,0X04,0X04,0X18,0X00,0X07,0X08,0X08,0X08,0X08,0X06,0X00,  // 'C'
  0XFC,0X04,0X04,0X04,0X08,0XF0,0X00,0X0F,0X08,0X08,0X08,0X04,0X03,0X00,  // 'D'
  0XFC,0X44,0X44,0X44,0X44,0X04,0X00,0X0F,0X08,0X08,0X08,0X08,0X08,0X00,  // 'E'
  0XFC,0X44,0X44,0X44,0X44,0X04,0X00,0X0F,0X00,0X00,0X00,0X00,0X00,0X00,  // 'F'
  0XF8,0X04,0X04,0X84,0X84,0X98,0X00,0X07,0X08,0X08,0X08,0X08,0X07,0X00,  // 'G'
  0XFC,0X40,0X40,0X40,0X40,0XFC,0X00,0X0F,0X00,0X00,0X00,0X00,0X0F,0X00,  // 'H'
  0X04,0X04,0XFC,0X04,0X04,0X00,0X00,0X08,0X08,0X0F,0X08,0X08,0X00,0X00,  // 'I'
  0X00,0X00,0X04,0X04,0X04,0XFC,0X00,0X06,0X08,0X08,0X08,0X08,0X07,0X00,  // 'J'
  0XFC,0X40,0X20,0XD0,0X08,0X04,0X00,0X0F,0X00,0X00,0X00,0X03,0X0C,0X00,  // 'K'
  0XFC,0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0X08,0X08,0X08,0X08,0X08,0X00,  // 'L'
  0XFC,0X18,0X60,0X80,0X60,0X18,0XFC,0X0F,0X00,0X00,0X01,0X00,0X00,0X0F,  // 'M'
  0XFC,0X18,0X60,0X80,0X00,0XFC,0X00,0X0F,0X00,0X00,0X01,0X06,0X0F,0X00,  // 'N'
  0XF8,0X04,0X04,0X04,0X04,0XF8,0X00,0X07,0X08,0X08,0X08,0X08,0X07,0X00,  // 'O'
  0XFC,0X84,0X84,0X84,0X84,0X78,0X00,0X0F,0X00,0X00,0X00,0X00,0X00,0X00,  // 'P'
  0XF8,0X04,0X04,0X04,0X04,0XF8,0X00,0X07,0X08,0X08,0X0E,0X18,0X17,0X00,  // 'Q'
  0XFC,0X84,0X84,0X84,0X84,0X78,0X00,0X0F,0X00,0X01,0X02,0X04,0X08,0X00,  // 'R'
  0X38,0X44,0X44,0X84,0X84,0X08,0X00,0X04,0X08,0X08,0X08,0X08,0X07,0X00,  // 'S'
  0X04,0X04,0X04,0XFC,0X04,0X04,0X04,0X00,0X00,0X00,0X0F,0X00,0X00,0X00,  // 'T'
  0XFC,0X00,0X00,0X00,0X00,0XFC,0X00,0X07,0X08,0X08,0X08,0X08,0X07,0X00,  // 'U'
  0XFC,0X00,0X00,0X00,0X00,0XFC,0X00,0X00,0X03,0X0C,0X0C,0X03,0X00,0X00,  // 'V'
  0XFC,0X00,0X00,0XC0,0X00,0X00,0XFC,0X03,0X0C,0X03,0X00,0X03,0X0C,0X03,  // 'W'
  0X0C,0X30,0XC0,0XC0,0X30,0X0C,0X00,0X0C,0X03,0X00,0X00,0X03,0X0C,0X00,  // 'X'
  0X3C,0X40,0X80,0X80,0X40,0X3C,0X00,0X00,0X00,0X00,0X0F,0X00,0X00,0X00,  // 'Y'
  0X04,0X04,0X84,0X44,0X34,0X0C,0X00,0X0C,0X0A,0X09,0X08,0X08,0X08,0X00,  // 'Z'
  0X00,0X00,0XFE,0X02,0X02,0X02,0X00,0X00,0X00,0X3F,0X20,0X20,0X20,0X00,  // '['
  0X06,0X18,0X60,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X06,0X18,0X00,  // '\'
  0X02,0X02,0X02,0XFE,0X00,0X00,0X00,0X20,0X20,0X20,0X3F,0X00,0X00,0X00,  // ']'
  0X10,0X08,0X04,0X04,0X08,0X10,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,  // '^'
  0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X20,0X20,0X20,0X20,0X20,0X20,0X00,  // '_'
  0X00,0X04,0X0C,0X18,0X20,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,  // '`'
  0X00,0XA0,0XA0,0XA0,0XA0,0XC0,0X00,0X07,0X08,0X08,0X08,0X04,0X0F,0X00,  // 'a'
  0XFC,0X40,0X20,0X20,0X20,0XC0,0X00,0X0F,0X04,0X08,0X08,0X08,0X07,0X00,  // 'b'
  0XC0,0X20,0X20,0X20,0X20,0X40,0X00,0X07,0X08,0X08,0X08,0X08,0X04,0X00,  // 'c'
  0XC0,0X20,0X20,0X20,0X40,0XFC,0X00,0X07,0X08,0X08,0X08,0X04,0X0F,0X00,  // 'd'
  0XC0,0X20,0X20,0X20,0X20,0XC0,0X00,0X07,0X09,0X09,0X09,0X09,0X09,0X00,  // 'e'
  0X80,0XF8,0X84,0X84,0X84,0X08,0X00,0X00,0X0F,0X00,0X00,0X00,0X00,0X00,  // 'f'
  0XC0,0X20,0X20,0X20,0X40,0XE0,0X00,0X23,0X44,0X44,0X44,0X42,0X3F,0X00,  // 'g'
  0XFC,0X40,0X20,0X20,0X20,0XC0,0X00,0X0F,0X00,0X00,0X00,0X00,0X0F,0X00,  // 'h'
  0X00,0X20,0X20,0XEC,0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0X00,0X00,0X00,  // 'i'
  0X00,0X00,0X20,0X20,0XEC,0X00,0X00,0X10,0X20,0X20,0X20,0X1F,0X00,0X00,  // 'j'
  0XFC,0X00,0X80,0X40,0X20,0X00,0X00,0X0F,0X01,0X01,0X02,0X04,0X08,0X00,  // 'k'
  0X00,0XFC,0X00,0X00,0X00,0X00,0X00,0X00,0X07,0X08,0X08,0X08,0X00,0X00,  // 'l'
  0XE0,0X20,0X20,0XC0,0X20,0X20,0XC0,0X0F,0X00,0X00,0X03,0X00,0X00,0X0F,  // 'm'
  0XE0,0X40,0X20,0X20,0X20,0XC0,0X00,0X0F,0X00,0X00,0X00,0X00,0X0F,0X00,  // 'n'
  0XC0,0X20,0X20,0X20,0X20,0XC0,0X00,0X07,0X08,0X08,0X08,0X08,0X07,0X00,  // 'o'
  0XE0,0X40,0X20,0X20,0X20,0XC0,0X00,0X7F,0X02,0X04,0X04,0X04,0X03,0X00,  // 'p'
  0XC0,0X20,0X20,0X20,0X40,0XE0,0X00,0X03,0X04,0X04,0X04,0X02,0X7F,0X00,  // 'q'
  0XE0,0X40,0X20,0X20,0X20,0X40,0X00,0X0F,0X00,0X00,0X00,0X00,0X00,0X00,  // 'r'
  0XC0,0X20,0X20,0X20,0X20,0X40,0X00,0X04,0X09,0X09,0X09,0X09,0X06,0X00,  // 's'
  0X20,0XF8,0X20,0X20,0X20,0X00,0X00,0X00,0X07,0X08,0X08,0X08,0X04,0X00,  // 't'
  0XE0,0X00,0X00,0X00,0X00,0XE0,0X00,0X07,0X08,0X08,0X08,0X04,0X0F,0X00,  // 'u'
  0XE0,0X00,0X00,0X00,0X00,0XE0,0X00,0X00,0X03,0X0C,0X0C,0X03,0X00,0X00,  // 'v'
  0XE0,0X00,0X00,0X80,0X00,0X00,0XE0,0X07,0X08,0X04,0X03,0X04,0X08,0X07,  // 'w'
  0X20,0X40,0X80,0X80,0X40,0X20,0X00,0X08,0X04,0X02,0X02,0X04,0X08,0X00,  // 'x'
  0XE0,0X00,0X00,0X00,0X00,0XE0,0X00,0X23,0X44,0X44,0X44,0X42,0X3F,0X00,  // 'y'
  0X20,0X20,0X20,0X20,0XA0,0X60,0X00,0X08,0X0C,0X0A,0X09,0X08,0X08,0X00,  // 'z'
  0X00,0X80,0X80,0X7C,0X02,0X02,0X00,0X00,0X00,0X00,0X1F,0X20,0X20,0X00,  // '{'
  0X00,0X00,0XFE,0X00,0X00,0X00,0X00,0X00,0X00,0X1F,0X00,0X00,0X00,0X00,  // '|'
  0X02,0X02,0X7C,0X80,0X80,0X00,0X00,0X20,0X20,0X1F,0X00,0X00,0X00,0X00,  // '}'
  0X30,0X08,0X08,0X10,0X20,0X20,0X18,0X00,0X00,0X00,0X00,0X00,0X00,0X00,  // '~'
  0XFE,0XFE,0XFE,0XFE,0XFE,0XFE,0XFE,0X7F,0X7F,0X7F,0X7F,0X7F,0X7F,0X7F   // del
};
#endif  // font8x16_h

=== Файл: src\SSD1306Ascii\src\utility\AvrI2c.h ===

/* Arduino SSD1306Ascii Library
 * Copyright (C) 2015 by William Greiman
 *
 * This file is part of the Arduino SSD1306Ascii Library
 *
 * This Library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Arduino SSD1306Ascii Library.  If not, see
 * <http://www.gnu.org/licenses/>.
 */
/**
 * @file AvrI2c.h
 * @brief Small fast I2C class for AVR.
 */
#ifndef AvrI2c_h
#define AvrI2c_h
#include <Arduino.h>

/** Bit to or with address for read start and read restart */
uint8_t const I2C_READ = 1;

/** Bit to or with address for write start and write restart */
uint8_t const I2C_WRITE = 0;
//------------------------------------------------------------------------------
// Status codes in TWSR - names are from Atmel TWSR.h with TWSR_ added

/** start condition transmitted */
uint8_t const TWSR_START = 0x08;

/** repeated start condition transmitted */
uint8_t const TWSR_REP_START = 0x10;

/** slave address plus write bit transmitted, ACK received */
uint8_t const TWSR_MTX_ADR_ACK = 0x18;

/** data transmitted, ACK received */
uint8_t const TWSR_MTX_DATA_ACK = 0x28;

/** slave address plus read bit transmitted, ACK received */
uint8_t const TWSR_MRX_ADR_ACK = 0x40;
//------------------------------------------------------------------------------
/**
 * \class AvrI2c
 * \brief Hardware I2C master class for AVR.
 *
 * Uses ATmega TWI hardware port
 */
class AvrI2c {
 public:
  /**
   * @brief Initialize prescalar and SLC clock rate.
   * @param[in] fastMode Fast 400 kHz mode if true else standard 100 kHz mode.
   */
  void begin(bool fastMode = true) {
    // Zero prescaler.
    TWSR = 0;
    // Set bit rate.
    setClock(fastMode && F_CPU > 15000000 ? 400000 : 100000);
  }
  /**
   * @brief Read a byte and send Ack if more reads follow else
             Nak to terminate read.
   *
   * @param[in] last Set true to terminate the read else false.
   * @return The byte read from the I2C bus.
   */
  uint8_t read(bool last) {
    execCmd((1 << TWINT) | (1 << TWEN) | (last ? 0 : (1 << TWEA)));
    return TWDR;
  }
  /**
   * @brief Issue a repeated start condition.
   *
   * same as start with no stop.  Included to document intention.
   *
   * @param[in] addressRW I2C address with read/write bit.
   * @return The value true, 1, for success or false, 0, for failure.
   */
  bool repeatedStart(uint8_t addressRW) {
    return start(addressRW);
  }
  /**
   * @brief Set the I2C bit rate.
   *
   * @param[in] frequency Desired frequency in Hz.
   *            Valid range for a 16 MHz board is about 40 kHz to 444,000 kHz.
   */
  void setClock(uint32_t frequency) {
    TWBR = ((F_CPU / frequency) - 16) / 2;
  }
  /**
   * @brief Issue a start condition.
   *
   * @param[in] addressRW I2C address with read/write bit.
   *
   * @return The value true for success or false for failure.
   */
  bool start(uint8_t addressRW) {
    // send START condition
    execCmd((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    if (status() != TWSR_START && status() != TWSR_REP_START) {
      return false;
    }
    // send device address and direction
    TWDR = addressRW;
    execCmd((1 << TWINT) | (1 << TWEN));
    if (addressRW & I2C_READ) {
      return status() == TWSR_MRX_ADR_ACK;
    } else {
      return status() == TWSR_MTX_ADR_ACK;
    }
  }
  /** @return status from last TWI command - useful for library debug */
  uint8_t status(void) {return status_;}
  /** Issue a stop condition. */
  void stop(void) {
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);

    // wait until stop condition is executed and bus released
    while (TWCR & (1 << TWSTO)) {}
  }
  /**
   * @brief Write a byte.
   *
   * @param[in] data The byte to send.
   *
   * @return The value true, 1, if the slave returned an Ack or false for Nak.
   */
  bool write(uint8_t data) {
    TWDR = data;
    execCmd((1 << TWINT) | (1 << TWEN));
    return status() == TWSR_MTX_DATA_ACK;
  }

 private:
  uint8_t status_;

  void execCmd(uint8_t cmdReg) {
    // send command
    TWCR = cmdReg;
    // wait for command to complete
    while (!(TWCR & (1 << TWINT))) {}
    // status bits.
    status_ = TWSR & 0xF8;
  }
};
#endif  // AvrI2c_h


=== Файл: src\SSD1306Ascii\src\utility\DigitalOutput.h ===

/* Arduino SSD1306Ascii Library
 * Copyright (C) 2015 by William Greiman
 *
 * This file is part of the Arduino SSD1306Ascii Library
 *
 * This Library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Arduino SSD1306Ascii Library.  If not, see
 * <http://www.gnu.org/licenses/>.
 */
/**
 * @file DigitalOutput.h
 * @brief Faster version of digitalWrite().
 */
#ifndef DigitalOutput_h
#define DigitalOutput_h

#include <Arduino.h>
#ifdef __AVR__
#include <util/atomic.h>
#include <avr/io.h>
/**
 * @class DigitalOutput
 * @brief Faster version of digitalWrite().
 */
class DigitalOutput {
 public:
  /**
   * @breif initialize the digital pin.
   *
   * @param[in] pin The Arduino pin number.
   */
  void begin(uint8_t pin) {
    uint8_t port = digitalPinToPort(pin);
    m_portReg = portOutputRegister(port);
    m_bit = digitalPinToBitMask(pin);
    m_mask = ~m_bit;
    pinMode(pin, OUTPUT);
  }
  /**
   * @brief Set the level of a digital pin.
   *
   * @param[in] level The value to be set.
   */
  inline __attribute__((always_inline))
  void write(bool level) {ATOMIC_BLOCK(ATOMIC_FORCEON) {writeI(level);}}
  /**
   * @brief Set the level of a digital pin.
   *
   * @param[in] level The value to be set.
   * @note This function must be called with interrupts disabled.
   */
  inline __attribute__((always_inline))
  void writeI(bool level) {
    *m_portReg = level ? *m_portReg | m_bit : *m_portReg & m_mask;
  }

 private:
  uint8_t m_bit;
  uint8_t m_mask;
  volatile uint8_t* m_portReg;
};
#else  // _AVR_
/**
 * @class DigitalOutput
 * @brief Non AVR version of digitalWrite().
 */
class DigitalOutput {
 public:
  /**
   * @brief initialize the digital pin.
   *
   * @param[in] pin The Arduino pin number.
   */
  void begin(uint8_t pin) {
    m_pin = pin;
    pinMode(m_pin, OUTPUT);
  }
  /**
   * @brief Set the level of a digital pin.
   *
   * @param[in] level The value to be set.
   */
  inline __attribute__((always_inline))
  void write(bool level) {
    digitalWrite(m_pin, level);
  }
 private:
  uint8_t m_pin;
};
#endif  // _AVR_
#endif  // DigitalOutput_h


